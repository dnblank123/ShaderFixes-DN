// eff shaders?
Texture2D<float4> t6 : register(t6);

Texture3D<float4> t1 : register(t1);

SamplerState s6_s : register(s6);

SamplerState s1_s : register(s1);

cbuffer cb0 : register(b0)
{
  float4 cb0[48];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float v1 : CLIPDISTANCE0,
  float3 w1 : TEXCOORD7,
  float v2 : DEPTHVALUE0,
  float2 w2 : TEXCOORD0,
  float4 v3 : FOGFACTOR0,
  float4 v4 : TEXCOORD6,
  float3 v5 : TEXCOORD4,
  float3 v6 : WORLDVIEWNORMAL0,
  float3 v7 : WORLDVIEWPOSITION0,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 0;

  r0.z = cb0[47].x;
  r0.z = r0.z;
  r1.xyz = int3(0,0,0);
  r1.xyz = r1.xyz;
  r0.w = dot(v6.xyz, v6.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v6.xyz * r0.www;
  r3.xyz = v7.xyz;
  r4.xyz = -r3.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r2.xyz, r4.xyz);
  r0.w = max(0, r0.w);
  r0.w = min(1, r0.w);
  r2.xyz = r2.xyz;
  r4.xyz = r4.xyz;
  r0.w = r0.w;
  r5.xyz = -cb0[5].xyz;
  r4.xyz = r5.xyz + r4.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r2.xyz = r2.xyz;
  r5.xyz = -cb0[5].xyz;
  r1.w = cb0[3].x;
  r1.w = r1.w;
  r2.w = dot(r2.xyz, r5.xyz);
  r2.w = r2.w + r1.w;
  r3.w = 1;
  r1.w = r3.w + r1.w;
  r1.w = r2.w / r1.w;
  r1.w = max(0, r1.w);
  r1.w = min(1, r1.w);
  r1.w = r1.w;
  r1.w = r1.w;
  r5.xyz = -cb0[5].xyz;
  r2.w = dot(r5.xyz, r4.xyz);
  r2.w = max(0, r2.w);
  r2.w = min(1, r2.w);
  r3.w = 2;
  r3.w = r3.w * r2.w;
  r2.w = r3.w * r2.w;
  r3.w = cb0[3].y;
  r2.w = r3.w * r2.w;
  r2.w = 0.5 + r2.w;
  r3.w = 1;
  r4.x = 1;
  r4.x = -r4.x;
  r4.x = r4.x + r2.w;
  r4.y = 1;
  r4.z = -r1.w;
  r4.y = r4.y + r4.z;
  r4.z = 1;
  r4.z = r4.z * r4.y;
  r4.y = r4.y * r4.y;
  r4.y = r4.y * r4.y;
  r4.y = r4.z * r4.y;
  r4.x = r4.x * r4.y;
  r3.w = r4.x + r3.w;
  r4.x = 1;
  r4.y = 1;
  r4.y = -r4.y;
  r2.w = r4.y + r2.w;
  r4.y = 1;
  r0.w = -r0.w;
  r0.w = r4.y + r0.w;
  r4.y = 1;
  r4.y = r4.y * r0.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r0.w;
  r0.w = r4.y * r0.w;
  r0.w = r2.w * r0.w;
  r0.w = r4.x + r0.w;
  r4.xyz = cb0[10].xyz * r3.www;
  r4.xyz = r4.xyz * r0.www;
  r4.xyz = r4.xyz * r1.www;
  r1.xyz = r4.xyz + r1.xyz;
  r0.w = (int)cb0[4].y;
  r0.w = r0.w;
  r1.w = 0;
  r4.xyz = r1.xyz;


  r1.x = 0;
  r1.yzw = r4.xyz;
  r2.w = r1.x;

  r2.xyz = cb0[45].xyz * cb0[2].xyz;
  r1.xyz = cb0[46].xyz * r1.yzw;
  r1.xyz = r1.xyz + r2.xyz;
  r1.w = cb0[45].w;
  r0.xy = w2.xy;
  r0.z = r0.z;
  r0.w = 0;
  r0.xyzw = t1.SampleLevel(s1_s, r0.xyz, r0.w).xyzw;
  r0.xyzw = r0.xyzw;
  r1.xyzw = r1.xyzw * r0.xyzw;
  r0.x = cmp(r0.w < cb0[0].x);
  if (r0.x != 0) {
    discard;
  }
  r1.xyz = r1.xyz;
  r0.xy = v3.zw;
  r2.xyz = t6.Sample(s6_s, v3.xy).xyz;
  r2.xyz = r2.xyz;
  r2.xyz = r2.xyz;
  r3.xyz = -cb0[1].xyz;
  r2.xyz = r3.xyz + r2.xyz;
  r0.yzw = r2.xyz * r0.yyy;
  r0.yzw = cb0[1].xyz + r0.yzw;
  r2.xyz = -r0.yzw;
  r2.xyz = r2.xyz + r1.xyz;
  r2.xyz = r2.xyz * r0.xxx;
  r1.xyz = r2.xyz + r0.yzw;
  r1.xyz = r1.xyz;
  r1.xyz = r1.xyz;
  r1.w = r1.w;
  r0.yzw = int3(0,0,0);
  r0.x = v2.x;
  o0.xyzw = r1.xyzw;
  o1.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Feb 01 15:37:03 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// CLIPDISTANCE             0   x           1     NONE   float   x
// TEXCOORD                 7    yzw        1     NONE   float
// DEPTHVALUE               0   x           2     NONE   float   x
// TEXCOORD                 0    yz         2     NONE   float    yz
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float
// TEXCOORD                 4   xyz         5     NONE   float
// WORLDVIEWNORMAL          0   xyz         6     NONE   float   xyz
// WORLDVIEWPOSITION        0   xyz         7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[48], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.x
dcl_input_ps linear v2.x
dcl_input_ps linear v2.yz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 7
itof r0.x, l(0)
lt r0.x, v1.x, r0.x
if_nz r0.x
  discard_nz l(-1)
endif
mov r0.z, cb0[47].x
mov r0.z, r0.z
itof r1.xyz, l(0, 0, 0, 0)
mov r1.xyz, r1.xyzx
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v6.xyzx
mov r3.xyz, v7.xyzx
mov r4.xyz, -r3.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r2.xyzx, r4.xyzx
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mov r2.xyz, r2.xyzx
mov r4.xyz, r4.xyzx
mov r0.w, r0.w
mov r5.xyz, -cb0[5].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mov r2.xyz, r2.xyzx
mov r5.xyz, -cb0[5].xyzx
mov r1.w, cb0[3].x
mov r1.w, r1.w
dp3 r2.w, r2.xyzx, r5.xyzx
add r2.w, r1.w, r2.w
itof r3.w, l(1)
add r1.w, r1.w, r3.w
div r1.w, r2.w, r1.w
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)
mov r1.w, r1.w
mov r1.w, r1.w
mov r5.xyz, -cb0[5].xyzx
dp3 r2.w, r5.xyzx, r4.xyzx
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)
itof r3.w, l(2)
mul r3.w, r2.w, r3.w
mul r2.w, r2.w, r3.w
mov r3.w, cb0[3].y
mul r2.w, r2.w, r3.w
add r2.w, r2.w, l(0.500000)
itof r3.w, l(1)
itof r4.x, l(1)
mov r4.x, -r4.x
add r4.x, r2.w, r4.x
itof r4.y, l(1)
mov r4.z, -r1.w
add r4.y, r4.z, r4.y
mov r4.z, l(1.000000)
mul r4.z, r4.y, r4.z
mul r4.y, r4.y, r4.y
mul r4.y, r4.y, r4.y
mul r4.y, r4.y, r4.z
mul r4.x, r4.y, r4.x
add r3.w, r3.w, r4.x
itof r4.x, l(1)
itof r4.y, l(1)
mov r4.y, -r4.y
add r2.w, r2.w, r4.y
itof r4.y, l(1)
mov r0.w, -r0.w
add r0.w, r0.w, r4.y
mov r4.y, l(1.000000)
mul r4.y, r0.w, r4.y
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r4.y
mul r0.w, r0.w, r2.w
add r0.w, r0.w, r4.x
mul r4.xyz, r3.wwww, cb0[10].xyzx
mul r4.xyz, r0.wwww, r4.xyzx
mul r4.xyz, r1.wwww, r4.xyzx
add r1.xyz, r1.xyzx, r4.xyzx
ftoi r0.w, cb0[4].y
mov r0.w, r0.w
mov r1.w, l(0)
mov r4.xyz, r1.xyzx
mov r2.w, r1.w
loop
  ilt r3.w, r2.w, r0.w
  breakc_z r3.w
  mov r3.w, r2.w
  mov r5.xyz, r2.xyzx
  mov r6.xyz, r3.xyzx
  mov r6.xyz, -r6.xyzx
  add r6.xyz, r6.xyzx, cb0[r3.w + 15].xyzx
  dp3 r4.w, r6.xyzx, r6.xyzx
  sqrt r4.w, r4.w
  mul r5.w, r4.w, cb0[r3.w + 15].w
  mov r5.w, -r5.w
  add r5.w, r5.w, l(1.000000)
  max r5.w, r5.w, l(0.000000)
  div r6.xyz, r6.xyzx, r4.wwww
  dp3 r4.w, r5.xyzx, r6.xyzx
  max r4.w, r4.w, l(0.000000)
  min r4.w, r4.w, l(1.000000)
  mul r5.xyz, r4.wwww, cb0[r3.w + 20].xyzx
  mul r5.xyz, r5.wwww, r5.xyzx
  mov r5.xyz, r5.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  iadd r2.w, r2.w, l(1)
endloop
ftoi r0.w, cb0[4].z
mov r0.w, r0.w
mov r1.x, l(0)
mov r1.yzw, r4.xxyz
mov r2.w, r1.x
loop
  ilt r3.w, r2.w, r0.w
  breakc_z r3.w
  mov r5.xyz, -r3.xyzx
  add r5.xyz, r5.xyzx, cb0[r2.w + 30].xyzx
  dp3 r3.w, r5.xyzx, r5.xyzx
  sqrt r3.w, r3.w
  div r5.xyz, r5.xyzx, r3.wwww
  mov r6.xyz, -cb0[r2.w + 25].xyzx
  dp3 r4.w, r6.xyzx, r5.xyzx
  ge r3.w, cb0[r2.w + 30].w, r3.w
  if_nz r3.w
    mov r3.w, -cb0[r2.w + 40].w
    add r3.w, r3.w, r4.w
    div r3.w, r3.w, cb0[r2.w + 35].w
    max r3.w, r3.w, l(0.000000)
    min r3.w, r3.w, l(1.000000)
    log r3.w, r3.w
    mul r3.w, r3.w, cb0[r2.w + 25].w
    exp r3.w, r3.w
  else
    mov r3.w, l(0)
  endif
  itof r4.w, l(0)
  dp3 r5.x, r2.xyzx, r5.xyzx
  max r4.w, r4.w, r5.x
  mul r5.xyz, r4.wwww, cb0[r2.w + 35].xyzx
  mul r5.xyz, r3.wwww, r5.xyzx
  add r1.yzw, r1.yyzw, r5.xxyz
  iadd r2.w, r2.w, l(1)
endloop
mov r1.yzw, r1.yyzw
mov r1.yzw, r1.yyzw
mul r2.xyz, cb0[2].xyzx, cb0[45].xyzx
mul r1.xyz, r1.yzwy, cb0[46].xyzx
add r1.xyz, r2.xyzx, r1.xyzx
mov r1.w, cb0[45].w
mov r0.xy, v2.yzyy
mov r0.z, r0.z
itof r0.w, l(0)
sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r0.xyzx, t1.xyzw, s1, r0.w
mov r0.xyzw, r0.xyzw
mul r1.xyzw, r0.xyzw, r1.xyzw
lt r0.x, r0.w, cb0[0].x
if_nz r0.x
  discard_nz l(-1)
endif
mov r1.xyz, r1.xyzx
mov r0.xy, v3.zwzz
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v3.xyxx, t6.xyzw, s6
mov r2.xyz, r2.xyzx
mov r2.xyz, r2.xyzx
mov r3.xyz, -cb0[1].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r0.yzw, r0.yyyy, r2.xxyz
add r0.yzw, r0.yyzw, cb0[1].xxyz
mov r2.xyz, -r0.yzwy
add r2.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, r0.xxxx, r2.xyzx
add r1.xyz, r0.yzwy, r2.xyzx
mov r1.xyz, r1.xyzx
mov r1.xyz, r1.xyzx
mov r1.w, r1.w
itof r0.yzw, l(0, 0, 0, 1)
mov r0.x, v2.x
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
