// VS RM robot
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[522];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//
//
//void main(
//  int4 v0 : BLENDINDICES0,
//  float4 v1 : NORMAL0,
//  float3 v2 : POSITION0,
//  float2 v3 : TEXCOORD0,
//  float4 v4 : BLENDWEIGHT0,
//  out float4 o0 : SV_POSITION0,
//  out float o1 : CLIPDISTANCE0,
//  out float3 p1 : TEXCOORD7,
//  out float o2 : DEPTHVALUE0,
//  out float2 p2 : TEXCOORD0,
//  out float4 o3 : FOGFACTOR0,
//  out float4 o4 : TEXCOORD6,
//  out float4 o5 : TEXCOORD2,
//  out float3 o6 : TEXCOORD4,
//  out float3 o7 : WORLDVIEWNORMAL0,
//  out float3 o8 : WORLDVIEWPOSITION0)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.xyzw = v4.xyzw;
//  r1.x = (int)v0.x * 4;
//  r2.x = cb0[r1.x+9].x * r0.x;
//  r2.y = cb0[r1.x+10].x * r0.x;
//  r2.z = cb0[r1.x+11].x * r0.x;
//  r2.w = cb0[r1.x+12].x * r0.x;
//  r3.x = cb0[r1.x+9].y * r0.x;
//  r3.y = cb0[r1.x+10].y * r0.x;
//  r3.z = cb0[r1.x+11].y * r0.x;
//  r3.w = cb0[r1.x+12].y * r0.x;
//  r4.x = cb0[r1.x+9].z * r0.x;
//  r4.y = cb0[r1.x+10].z * r0.x;
//  r4.z = cb0[r1.x+11].z * r0.x;
//  r4.w = cb0[r1.x+12].z * r0.x;
//  r5.x = cb0[r1.x+9].w * r0.x;
//  r5.y = cb0[r1.x+10].w * r0.x;
//  r5.z = cb0[r1.x+11].w * r0.x;
//  r5.w = cb0[r1.x+12].w * r0.x;
//  r0.x = (int)v0.y * 4;
//  r1.x = cb0[r0.x+9].x * r0.y;
//  r1.y = cb0[r0.x+10].x * r0.y;
//  r1.z = cb0[r0.x+11].x * r0.y;
//  r1.w = cb0[r0.x+12].x * r0.y;
//  r6.x = cb0[r0.x+9].y * r0.y;
//  r6.y = cb0[r0.x+10].y * r0.y;
//  r6.z = cb0[r0.x+11].y * r0.y;
//  r6.w = cb0[r0.x+12].y * r0.y;
//  r7.x = cb0[r0.x+9].z * r0.y;
//  r7.y = cb0[r0.x+10].z * r0.y;
//  r7.z = cb0[r0.x+11].z * r0.y;
//  r7.w = cb0[r0.x+12].z * r0.y;
//  r8.x = cb0[r0.x+9].w * r0.y;
//  r8.y = cb0[r0.x+10].w * r0.y;
//  r8.z = cb0[r0.x+11].w * r0.y;
//  r8.w = cb0[r0.x+12].w * r0.y;
//  r1.xyzw = r2.xyzw + r1.xyzw;
//  r2.xyzw = r6.xyzw + r3.xyzw;
//  r3.xyzw = r7.xyzw + r4.xyzw;
//  r4.xyzw = r8.xyzw + r5.xyzw;
//  r0.x = (int)v0.z * 4;
//  r5.x = cb0[r0.x+9].x * r0.z;
//  r5.y = cb0[r0.x+10].x * r0.z;
//  r5.z = cb0[r0.x+11].x * r0.z;
//  r5.w = cb0[r0.x+12].x * r0.z;
//  r6.x = cb0[r0.x+9].y * r0.z;
//  r6.y = cb0[r0.x+10].y * r0.z;
//  r6.z = cb0[r0.x+11].y * r0.z;
//  r6.w = cb0[r0.x+12].y * r0.z;
//  r7.x = cb0[r0.x+9].z * r0.z;
//  r7.y = cb0[r0.x+10].z * r0.z;
//  r7.z = cb0[r0.x+11].z * r0.z;
//  r7.w = cb0[r0.x+12].z * r0.z;
//  r8.x = cb0[r0.x+9].w * r0.z;
//  r8.y = cb0[r0.x+10].w * r0.z;
//  r8.z = cb0[r0.x+11].w * r0.z;
//  r8.w = cb0[r0.x+12].w * r0.z;
//  r1.xyzw = r5.xyzw + r1.xyzw;
//  r2.xyzw = r6.xyzw + r2.xyzw;
//  r3.xyzw = r7.xyzw + r3.xyzw;
//  r4.xyzw = r8.xyzw + r4.xyzw;
//  r0.x = (int)v0.w * 4;
//  r5.x = cb0[r0.x+9].x * r0.w;
//  r5.y = cb0[r0.x+10].x * r0.w;
//  r5.z = cb0[r0.x+11].x * r0.w;
//  r5.w = cb0[r0.x+12].x * r0.w;
//  r6.x = cb0[r0.x+9].y * r0.w;
//  r6.y = cb0[r0.x+10].y * r0.w;
//  r6.z = cb0[r0.x+11].y * r0.w;
//  r6.w = cb0[r0.x+12].y * r0.w;
//  r7.x = cb0[r0.x+9].z * r0.w;
//  r7.y = cb0[r0.x+10].z * r0.w;
//  r7.z = cb0[r0.x+11].z * r0.w;
//  r7.w = cb0[r0.x+12].z * r0.w;
//  r8.x = cb0[r0.x+9].w * r0.w;
//  r8.y = cb0[r0.x+10].w * r0.w;
//  r8.z = cb0[r0.x+11].w * r0.w;
//  r8.w = cb0[r0.x+12].w * r0.w;
//  r0.xyzw = r5.xyzw + r1.xyzw;
//  r1.xyzw = r6.xyzw + r2.xyzw;
//  r2.xyzw = r7.xyzw + r3.xyzw;
//  r3.xyzw = r8.xyzw + r4.xyzw;
//
//  r4.xyz = int3(0,0,0);
//  r5.xyzw = cb0[0].xyzw * r0.xxxx;
//  r6.xyzw = cb0[1].xyzw * r1.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[2].xyzw * r2.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[3].xyzw * r3.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[0].xyzw * r0.yyyy;
//  r7.xyzw = cb0[1].xyzw * r1.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[2].xyzw * r2.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[3].xyzw * r3.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[0].xyzw * r0.zzzz;
//  r8.xyzw = cb0[1].xyzw * r1.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[2].xyzw * r2.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[3].xyzw * r3.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[0].xyzw * r0.wwww;
//  r9.xyzw = cb0[1].xyzw * r1.wwww;
//  r8.xyzw = r9.xyzw + r8.xyzw;
//  r9.xyzw = cb0[2].xyzw * r2.wwww;
//  r8.xyzw = r9.xyzw + r8.xyzw;
//  r3.xyzw = cb0[3].xyzw * r3.wwww;
//  r3.xyzw = r8.xyzw + r3.xyzw;
//  r8.x = r5.x;
//  r8.y = r6.x;
//  r8.z = r7.x;
//  r8.w = r3.x;
//  r9.x = r5.y;
//  r9.y = r6.y;
//  r9.z = r7.y;
//  r9.w = r3.y;
//  r10.x = r5.z;
//  r10.y = r6.z;
//  r10.z = r7.z;
//  r10.w = r3.z;
//  r3.x = r5.w;
//  r3.y = r6.w;
//  r3.z = r7.w;
//  r3.w = r3.w;
//  r5.xyz = v2.xyz;
//  r5.w = 1;
//  r6.x = dot(r0.xyzw, r5.xyzw);
//  r6.y = dot(r1.xyzw, r5.xyzw);
//  r6.z = dot(r2.xyzw, r5.xyzw);
//  r7.w = 0;
//  r7.xyz = v1.xyz;
//  r0.x = dot(r0.xyzw, r7.xyzw);
//  r0.y = dot(r1.xyzw, r7.xyzw);
//  r0.z = dot(r2.xyzw, r7.xyzw);
//  r1.xyzw = cb0[4].xyzw * r6.xxxx;
//  r2.xyzw = cb0[5].xyzw * r6.yyyy;
//  r1.xyzw = r2.xyzw + r1.xyzw;
//  r2.xyzw = cb0[6].xyzw * r6.zzzz;
//  r1.xyzw = r2.xyzw + r1.xyzw;
//  r2.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//  r1.xyzw = r2.zxyw + r1.zxyw;
//  r2.x = dot(r8.xyzw, r5.xyzw);
//  r2.y = dot(r9.xyzw, r5.xyzw);
//  r2.z = dot(r10.xyzw, r5.xyzw);
//  r2.w = dot(r3.xyzw, r5.xyzw);
//  r0.w = dot(r2.xyzw, cb0[8].xyzw);
//
//  r3.xy = v3.xy;
//  r3.z = dot(r6.xyz, r6.xyz);
//  r3.z = rsqrt(r3.z);
//  r5.xyz = r6.xyz * r3.zzz;
//  r3.z = dot(r5.xyz, r0.xyz);
//  r3.z = r3.z + r3.z;
//  r3.z = -r3.z;
//  r7.xyz = r3.zzz * r0.xyz;
//  r5.xyz = r7.xyz + r5.xyz;
//  r7.xyzw = cb0[0].xyzw * r5.xxxx;
//  r8.xyzw = cb0[1].xyzw * r5.yyyy;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r5.xyzw = cb0[2].xyzw * r5.zzzz;
//  r5.xyzw = r7.xyzw + r5.xyzw;
//  r3.z = dot(r5.xyzw, r5.xyzw);
//  r3.z = rsqrt(r3.z);
//  r5.xyz = r5.xyz * r3.zzz;
//  r3.z = 0.5 * r5.y;
//  r3.z = -r3.z;
//  r3.z = 0.5 + r3.z;
//  r5.yw = r1.yz / r1.ww;
//  r7.xy = int2(1,1);
//  r5.yw = r7.xy + r5.yw;
//  r5.yw = float2(0.5,0.5) * r5.yw;
//  r3.w = -r5.w;
//  r3.w = 1 + r3.w;
//  r1.x = r1.x;
//  r4.w = -r1.x;
//  r4.w = cb0[521].z + r4.w;
//  r7.xy = cb0[521].xy * r4.ww;
//  r7.xy = max(float2(0,0), r7.xy);
//  r7.xz = min(float2(1,1), r7.yx);
//  r7.w = r7.x * r7.x;
//  r7.z = r7.z;
//  r7.w = r7.w;
//  r7.zw = r7.zw;
//  r1.x = r1.x;
//  r4.w = 0.00999999978 * r1.x;
//  r4.w = r4.w;
//  r2.xyz = r2.xyz;
//  r2.w = r1.x;
//  o0.xyzw = r1.yzxw;
//  o1.x = 0;
//  p1.xyz = 0;
//  o3.xyw = 0;
//  o3.z = r7.z;
//  o4.xyzw = 0;
//  o2.x = 0;
//  p2.xy = r3.xy;
//  o5.xz = 0; // r5.xz removes environment map reflections
//  o5.y = r3.z;
//  o6.xyz = 0;
//  o7.xyz = r0.xyz;
//  o8.xyz = r6.xyz;
//  return;
//}


//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[522];                   // Offset:    0 Size:  8352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// POSITION                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// CLIPDISTANCE             0   x           1     NONE   float   x   
// TEXCOORD                 7    yzw        1     NONE   float    yzw
// DEPTHVALUE               0   x           2     NONE   float   x   
// TEXCOORD                 0    yz         2     NONE   float    yz 
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyz 
// TEXCOORD                 4   xyz         6     NONE   float   xyz 
// WORLDVIEWNORMAL          0   xyz         7     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz         8     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[522], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.yzw
dcl_output o2.x
dcl_output o2.yz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyz
dcl_temps 20
ishl r0.xyzw, v0.xyzw, l(2, 2, 2, 2)
itof r0.xyzw, r0.xyzw
add r1.xyzw, r0.xxxx, l(9.000000, 10.000000, 11.000000, 12.000000)
ftou r1.xyzw, r1.xyzw
mul r2.xyz, v4.xxxx, cb0[r1.x + 0].yxzy
mov r3.x, r2.y
mul r4.xyz, v4.xxxx, cb0[r1.y + 0].xzyx
mov r3.y, r4.x
mul r1.xyz, v4.xxxx, cb0[r1.z + 0].xyzx
mul r5.xyz, v4.xxxx, cb0[r1.w + 0].xyzx
mov r3.z, r1.x
mov r3.w, r5.x
add r6.xyzw, r0.yyyy, l(9.000000, 10.000000, 11.000000, 12.000000)
ftou r6.xyzw, r6.xyzw
mul r7.xyz, v4.yyyy, cb0[r6.x + 0].yxzy
mov r8.x, r7.y
mul r9.xyz, v4.yyyy, cb0[r6.y + 0].xzyx
mov r8.y, r9.x
mul r6.xyz, v4.yyyy, cb0[r6.z + 0].xyzx
mul r10.xyz, v4.yyyy, cb0[r6.w + 0].xyzx
mov r8.z, r6.x
mov r8.w, r10.x
add r3.xyzw, r3.xyzw, r8.xyzw
add r8.xyzw, r0.zzzz, l(9.000000, 10.000000, 11.000000, 12.000000)
add r0.xyzw, r0.wwww, l(9.000000, 10.000000, 11.000000, 12.000000)
ftou r0.xyzw, r0.xyzw
ftou r8.xyzw, r8.xyzw
mul r11.xyz, v4.zzzz, cb0[r8.x + 0].yxzy
mov r12.x, r11.y
mul r13.xyz, v4.zzzz, cb0[r8.y + 0].xzyx
mov r12.y, r13.x
mul r8.xyz, v4.zzzz, cb0[r8.z + 0].xyzx
mul r14.xyz, v4.zzzz, cb0[r8.w + 0].xyzx
mov r12.z, r8.x
mov r12.w, r14.x
add r3.xyzw, r3.xyzw, r12.xyzw
mul r12.xyz, v4.wwww, cb0[r0.x + 0].yxzy
mov r15.x, r12.y
mul r16.xyz, v4.wwww, cb0[r0.y + 0].xzyx
mov r15.y, r16.x
mul r0.xyz, v4.wwww, cb0[r0.z + 0].xyzx
mul r17.xyz, v4.wwww, cb0[r0.w + 0].xyzx
mov r15.z, r0.x
mov r15.w, r17.x
add r3.xyzw, r3.xyzw, r15.xyzw
mov r15.xyz, v2.xyzx
mov r15.w, l(1.000000)
dp4 r18.x, r3.xyzw, r15.xyzw
dp3 r3.x, r3.xyzx, v1.xyzx
mul r19.xyzw, r18.xxxx, cb0[4].xyzw
mov r9.x, r7.z
mov r7.y, r9.z
mov r7.z, r6.y
mov r9.z, r6.z
mov r7.w, r10.y
mov r9.w, r10.z
mov r4.x, r2.z
mov r2.y, r4.z
mov r2.z, r1.y
mov r4.z, r1.z
mov r2.w, r5.y
mov r4.w, r5.z
add r1.xyzw, r4.xyzw, r9.xyzw
add r2.xyzw, r2.xyzw, r7.xyzw
mov r13.x, r11.z
mov r11.y, r13.z
mov r11.z, r8.y
mov r13.z, r8.z
mov r11.w, r14.y
mov r13.w, r14.z
add r1.xyzw, r1.xyzw, r13.xyzw
add r2.xyzw, r2.xyzw, r11.xyzw
mov r16.x, r12.z
mov r12.y, r16.z
mov r12.z, r0.y
mov r16.z, r0.z
mov r12.w, r17.y
mov r16.w, r17.z
add r0.xyzw, r1.xyzw, r16.xyzw
add r1.xyzw, r2.xyzw, r12.xyzw
dp4 r18.y, r1.xyzw, r15.xyzw
dp3 r3.y, r1.xyzx, v1.xyzx
dp4 r18.z, r0.xyzw, r15.xyzw
dp3 r3.z, r0.xyzx, v1.xyzx
mad r0.xyzw, cb0[5].xyzw, r18.yyyy, r19.xyzw
mad r0.xyzw, cb0[6].xyzw, r18.zzzz, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[7].xyzw
mov o0.xyzw, r0.xyzw
add r0.x, -r0.z, cb0[521].z
mul_sat o3.z, r0.x, cb0[521].x
mov o1.xyzw, l(0,0,0,0)
mov o2.x, l(0)
mov o2.yz, v3.xxyx
mov o3.xyw, l(0,0,0,0)
mov o4.xyzw, l(0,0,0,0)
dp3 r0.x, r18.xyzx, r18.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r18.xyzx
mov o8.xyz, r18.xyzx
dp3 r0.w, r0.xyzx, r3.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, -r0.wwww, r3.xyzx, r0.xyzx
mov o7.xyz, r3.xyzx
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
dp4 r0.x, r0.xyzw, r0.xyzw
rsq r0.x, r0.x
mul r0.x, r0.x, r0.y
mad o5.y, -r0.x, l(0.500000), l(0.500000)
mov o5.xz, l(0,0,0,0)
mov o6.xyz, l(0,0,0,0)
ret 
// Approximately 113 instruction slots used



