// vs ground
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[162];                   // Offset:    0 Size:  2592
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// POSITION                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xyzw        4     NONE   float   xy  
// TEXCOORD                 1   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// CLIPDISTANCE             0   x           1     NONE   float   x   
// TEXCOORD                 7    yzw        1     NONE   float    yzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float   xyzw
// COLOR                    2   xyzw        4     NONE   float   xyzw
// DEPTHVALUE               0   x           5     NONE   float   x   
// TEXCOORD                 0    yz         5     NONE   float    yz 
// FOGFACTOR                0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 1   xyzw        8     NONE   float   xyz 
// TEXCOORD                 2   xyzw        9     NONE   float   xyz 
// TEXCOORD                 3   xyzw       10     NONE   float   xyz 
// TEXCOORD                 4   xyz        11     NONE   float   xyz 
// WORLDVIEWNORMAL          0   xyz        12     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz        13     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[162], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xy
dcl_input v5.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.yzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.x
dcl_output o5.yz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output o9.xyz
dcl_output o10.xyz
dcl_output o11.xyz
dcl_output o12.xyz
dcl_output o13.xyz
dcl_temps 4
mul r0.xyz, v3.xxxx, cb0[132].xyzx
mad r0.xyz, cb0[133].xyzx, v3.yyyy, r0.xyzx
mad r0.xyz, cb0[134].xyzx, v3.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb0[135].xyzx
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mul r1.xyz, v2.xxxx, cb0[132].xyzx
mad r1.xyz, cb0[133].xyzx, v2.yyyy, r1.xyzx
mad r1.xyz, cb0[134].xyzx, v2.zzzz, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, v3.xxxx, cb0[4].xyzx
mad r2.xyz, cb0[5].xyzx, v3.yyyy, r2.xyzx
mad r2.xyz, cb0[6].xyzx, v3.zzzz, r2.xyzx
add o7.xyz, r2.xyzx, cb0[7].xyzx
add r2.xy, v3.xzxx, cb0[160].xzxx
div o5.yz, r2.xxyx, cb0[161].xxxx
round_ni r1.w, cb0[139].x
mov r2.xyz, l(0,0,0,0)
mov r3.x, l(0)
loop 
  lt r3.w, r3.x, r1.w
  if_z r3.w
    break 
  endif 
  add r3.xyz, r3.xxxx, l(1.000000, 140.000000, 145.000000, 0.000000)
  ftou r3.yz, r3.yyzy
  dp3 r3.y, r1.xyzx, -cb0[r3.y + 0].xyzx
  max r3.y, r3.y, l(0.000000)
  mad r2.xyz, cb0[r3.z + 0].xyzx, r3.yyyy, r2.xyzx
endloop 
mov r2.w, l(1.000000)
mad o4.xyzw, cb0[138].xyzw, l(0.682000, 0.682000, 0.682000, 1.000000), r2.xyzw
add r1.x, -r0.z, cb0[137].z
mul_sat r1.xy, r1.xxxx, cb0[137].yxyy
mul r1.z, r1.x, r1.x
mov o0.xyzw, r0.xyzw
mov o2.xyzw, v0.xyzw
mov o3.xyzw, v1.xyzw
mov r1.w, l(0)
mov o6.xyzw, r1.wwyz
mov o7.w, r0.z
mov o8.xyz, l(0,0,0,0)
mov o9.xy, v4.xyxx
mov o9.z, l(0)
mov o10.xy, v5.xyxx
mov o10.z, l(0)
mov o11.xyz, l(0,0,0,0)
mov o12.xyz, l(0,0,0,0)
mov o13.xyz, l(0,0,0,0)
mov o1.xyzw, l(0,0,0,0)
mov o5.x, l(0)
ret 
// Approximately 56 instruction slots used
