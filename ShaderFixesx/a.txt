//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions:
//
// cbuffer cb0
// {
//
//   float4 cb0[46];                    // Offset:    0 Size:   736
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int   x
// NORMAL                   0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 5   x           3     NONE   float   x
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 7   xyz         2     NONE   float   xyz
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xy
// TEXCOORD                 1   xyz         5     NONE   float   xyz
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[46], dynamicIndexed
dcl_input v0.x
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.x
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyz
dcl_temps 4
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
mov x0[0].xy, l(-0.500000,0.500000,0,0)
mov x0[1].xy, l(0.500000,0.500000,0,0)
mov x0[2].xy, l(-0.500000,-0.500000,0,0)
mov x0[3].xy, l(0.500000,-0.500000,0,0)
mov x1[0].xy, l(0,0,0,0)
mov x1[1].xy, l(1.000000,0,0,0)
mov x1[2].xy, l(0,1.000000,0,0)
mov x1[3].xy, l(1.000000,1.000000,0,0)
add r0.x, -v2.x, cb0[12].x
mul r0.y, r0.x, cb0[17].z
mad r0.x, r0.x, cb0[17].z, -cb0[15].x
mad r0.x, -r0.x, cb0[15].y, r0.y
mul r0.z, r0.y, l(20.000000)
round_ni r0.w, r0.z
frc r0.z, r0.z
ftoi r1.x, r0.w
xor r1.y, r1.x, l(4)
and r1.xy, r1.xyxx, l(0x80000000, 0x80000000, 0, 0)
utof r1.xy, r1.xyxx
ne r1.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
ftou r1.z, |r0.w|
ushr r1.w, r1.z, l(2)
and r1.z, r1.z, l(3)
utof r1.z, r1.z
movc r1.x, r1.x, -r1.z, r1.z
utof r1.z, r1.w
movc r1.y, r1.y, -r1.z, r1.z
add r1.y, r1.y, l(19.000000)
ftou r1.xy, r1.xyxx
dp4 r1.x, cb0[r1.y + 0].xyzw, icb[r1.x + 0].xyzw
add r1.y, r0.w, l(1.000000)
ftou r0.w, r0.w
utof r0.w, r0.w
add r0.w, r0.w, l(25.000000)
ftou r0.w, r0.w
ftoi r1.z, r1.y
xor r1.w, r1.z, l(4)
and r1.zw, r1.zzzw, l(0, 0, 0x80000000, 0x80000000)
utof r1.zw, r1.zzzw
ne r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
ftou r2.x, |r1.y|
ftou r1.y, r1.y
utof r1.y, r1.y
add r1.y, r1.y, l(25.000000)
ftou r1.y, r1.y
add r3.xyzw, -cb0[r0.w + 0].xyzw, cb0[r1.y + 0].xyzw
mad r3.xyzw, r3.xyzw, r0.zzzz, cb0[r0.w + 0].xyzw
mul o1.xyzw, r3.xyzw, cb0[14].xyzw
ushr r0.w, r2.x, l(2)
and r1.y, r2.x, l(3)
utof r1.y, r1.y
movc r1.y, r1.z, -r1.y, r1.y
ftou r1.y, r1.y
utof r0.w, r0.w
movc r0.w, r1.w, -r0.w, r0.w
add r0.w, r0.w, l(19.000000)
ftou r0.w, r0.w
dp4 r0.w, cb0[r0.w + 0].xyzw, icb[r1.y + 0].xyzw
add r0.w, r0.w, -r1.x
mad r0.z, r0.w, r0.z, r1.x
mul r0.xz, r0.xxzx, cb0[12].zzyz
mad r0.z, r0.z, v3.x, r0.z
lt r0.w, r0.y, l(0.000000)
ge r1.x, r0.y, l(1.000000)
or r0.w, r0.w, r1.x
itof r0.w, r0.w
ne r0.w, r0.w, l(0.000000)
itof r1.x, v0.x
ftou r1.x, r1.x
movc r0.w, r0.w, l(0), r1.x
mov r1.xy, x0[r0.w + 0].xyxx
mov o4.xy, x1[r0.w + 0].xyxx
mul r0.zw, r0.zzzz, r1.yyyx
mad r1.x, r0.y, cb0[17].y, cb0[17].x
mul r1.x, r1.x, v2.y
sincos r1.x, r2.x, r1.x
mul r1.xy, r0.zwzz, r1.xxxx
mad r0.w, r0.w, r2.x, -r1.x
mad r0.z, r0.z, r2.x, r1.y
mul r1.xyz, v1.xxxx, cb0[4].xyzx
mad r1.xyz, cb0[5].xyzx, v1.yyyy, r1.xyzx
mad r1.xyz, cb0[6].xyzx, v1.zzzz, r1.xyzx
add r0.w, r0.w, r1.x
mul r2.xyz, r0.wwww, cb0[8].xyzx
add r0.z, r0.z, r1.y
mad r1.xyw, cb0[9].xyxz, r0.zzzz, r2.xyxz
mad r1.xyz, cb0[10].xyzx, r1.zzzz, r1.xywx
lt r0.z, cb0[15].x, r0.y
mul r0.y, r0.y, cb0[12].z
movc r0.x, r0.z, r0.x, r0.y
ge r0.y, l(-0.700000), v4.y
eq r0.z, v4.w, l(80.000000)
or r0.y, r0.z, r0.y
movc r0.yzw, r0.yyyy, l(0,0,0,0), v4.xxyz
mul r2.xyz, r0.yyyy, cb0[4].xyzx
mad r2.xyz, cb0[5].xyzx, r0.zzzz, r2.xyzx
mad r0.yzw, cb0[6].xxyz, r0.wwww, r2.xxyz
mul r0.yzw, r0.yyzw, v4.wwww
mad r0.yzw, r0.yyzw, r0.xxxx, cb0[13].xxyz
mad r1.w, r0.x, l(0.500000), l(1.000000)
log r2.x, cb0[15].z
mul r1.w, r1.w, r2.x
exp r1.w, r1.w
mul r2.xyz, r1.wwww, cb0[16].xyzx
mad r0.xyz, r2.xyzx, r0.xxxx, r0.yzwy
add r0.xyz, r1.xyzx, r0.xyzx
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
add o0.xyzw, r0.xyzw, cb0[3].xyzw
mov o2.xyz, l(0,0,0,0)
mov o3.xyzw, l(0,0,0,0)
mov o5.xyz, l(0,0,0,0)
ret
// Approximately 114 instruction slots used