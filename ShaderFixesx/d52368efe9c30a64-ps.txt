// ps granom todo fix
//Texture2D<float4> t15 : register(t15);
//
//Texture2D<float4> t6 : register(t6);
//
//Texture2D<float4> t3 : register(t3);
//
//Texture2D<float4> t0 : register(t0);
//
//SamplerState s15_s : register(s15);
//
//SamplerState s6_s : register(s6);
//
//SamplerState s3_s : register(s3);
//
//SamplerState s0_s : register(s0);
//
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[71];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//
//
//void main(
//  float4 v0 : SV_POSITION0,
//  float v1 : CLIPDISTANCE0,
//  float3 w1 : TEXCOORD7,
//  float v2 : DEPTHVALUE0,
//  float2 w2 : TEXCOORD0,
//  float4 v3 : FOGFACTOR0,
//  float4 v4 : TEXCOORD6,
//  float3 v5 : TEXCOORD4,
//  float3 v6 : WORLDVIEWNORMAL0,
//  float3 v7 : WORLDVIEWPOSITION0,
//  out float4 o0 : SV_TARGET0,
//  out float4 o1 : SV_TARGET1)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.x = 0;
//  r0.xyz = int3(0,0,0);
//  r0.xyz = r0.xyz;
//  r0.w = dot(v6.xyz, v6.xyz);
//  r0.w = rsqrt(r0.w);
//  r1.xyz = v6.xyz * r0.www;
//  r2.xyz = v7.xyz;
//  r3.xyz = -r2.xyz;
//  r0.w = dot(r3.xyz, r3.xyz);
//  r0.w = rsqrt(r0.w);
//  r3.xyz = r3.xyz * r0.www;
//  r0.w = dot(r1.xyz, r3.xyz);
//  r0.w = max(0, r0.w);
//  r0.w = min(1, r0.w);
//  r1.xyz = r1.xyz;
//  r3.xyz = r3.xyz;
//  r0.w = r0.w;
//  r4.xyz = -cb0[28].xyz;
//  r3.xyz = r4.xyz + r3.xyz;
//  r1.w = dot(r3.xyz, r3.xyz);
//  r1.w = rsqrt(r1.w);
//  r3.xyz = r3.xyz * r1.www;
//  r1.xyz = r1.xyz;
//  r4.xyz = -cb0[28].xyz;
//  r1.w = cb0[26].x;
//  r1.w = r1.w;
//  r2.w = dot(r1.xyz, r4.xyz);
//  r2.w = r2.w + r1.w;
//  r3.w = 1;
//  r1.w = r3.w + r1.w;
//  r1.w = r2.w / r1.w;
//  r1.w = max(0, r1.w);
//  r1.w = min(1, r1.w);
//  r1.w = r1.w;
//  r1.w = r1.w;
//  r4.xyz = -cb0[28].xyz;
//  r2.w = dot(r4.xyz, r3.xyz);
//  r2.w = max(0, r2.w);
//  r2.w = min(1, r2.w);
//  r3.x = 2;
//  r3.x = r3.x * r2.w;
//  r2.w = r3.x * r2.w;
//  r3.x = cb0[26].y;
//  r2.w = r3.x * r2.w;
//  r2.w = 0.5 + r2.w;
//  r3.x = 1;
//  r3.y = 1;
//  r3.y = -r3.y;
//  r3.y = r3.y + r2.w;
//  r3.z = 1;
//  r3.w = -r1.w;
//  r3.z = r3.z + r3.w;
//  r3.w = 1;
//  r3.w = r3.w * r3.z;
//  r3.z = r3.z * r3.z;
//  r3.z = r3.z * r3.z;
//  r3.z = r3.w * r3.z;
//  r3.y = r3.y * r3.z;
//  r3.x = r3.x + r3.y;
//  r3.y = 1;
//  r3.z = 1;
//  r3.z = -r3.z;
//  r2.w = r3.z + r2.w;
//  r3.z = 1;
//  r0.w = -r0.w;
//  r0.w = r3.z + r0.w;
//  r3.z = 1;
//  r3.z = r3.z * r0.w;
//  r0.w = r0.w * r0.w;
//  r0.w = r0.w * r0.w;
//  r0.w = r3.z * r0.w;
//  r0.w = r2.w * r0.w;
//  r0.w = r3.y + r0.w;
//  r3.xyz = cb0[33].xyz * r3.xxx;
//  r3.xyz = r3.xyz * r0.www;
//  r3.xyz = r3.xyz * r1.www;
//  r0.xyz = r3.xyz + r0.xyz;
//  r0.w = (int)cb0[27].y;
//  r0.w = r0.w;
//  r1.w = 0;
//  r3.xyz = r0.xyz;
//  r2.w = r1.w;
//  r0.x = (int)cb0[27].z;
//  r0.x = r0.x;
//  r0.y = 0;
//  r4.xyz = r3.xyz;
//  r0.z = r0.y;
//  r4.xyz = r4.xyz;
//  r4.xyz = r4.xyz;
//  r0.xyz = cb0[68].xyz * cb0[25].xyz;
//  r1.xyz = cb0[69].xyz * r4.xyz;
//  r0.xyz = r1.xyz + r0.xyz;
//  r0.w = cb0[68].w;
//  r1.xyzw = t0.Sample(s0_s, w2.xy).xyzw;
//  r1.xyzw = r1.xyzw;
//  r0.xyzw = r1.xyzw * r0.xyzw;
//  r1.xyz = v4.xyz;
//  r1.w = v4.w;
//  r1.w = r1.w;
//  r2.x = -1;
//  r2.x = (int)r2.x + asint(cb0[19].x);
//  r2.y = -r1.w;
//  r1.w = max(r2.y, r1.w);
//  r2.y = cmp(r1.w < cb0[20].x);
//  if (r2.y != 0) {
//    r2.z = 0;
//  }
//  if (r2.y == 0) {
//    r2.y = cmp(r1.w < cb0[20].y);
//    if (r2.y != 0) {
//      r2.z = 1;
//    }
//    if (r2.y == 0) {
//      r1.w = cmp(r1.w < cb0[20].z);
//      if (r1.w != 0) {
//        r2.z = 2;
//      }
//      if (r1.w == 0) {
//        r2.z = r2.x;
//      }
//    }
//  }
//  r2.z = r2.z;
//  r1.w = (int)r2.z * 4;
//  r3.xyzw = cb0[r1.w+3].xyzw * r1.xxxx;
//  r4.xyzw = cb0[r1.w+4].xyzw * r1.yyyy;
//  r3.xyzw = r4.xyzw + r3.xyzw;
//  r4.xyzw = cb0[r1.w+5].xyzw * r1.zzzz;
//  r3.xyzw = r4.xyzw + r3.xyzw;
//  r1.xyzw = cb0[r1.w+6].xyzw * float4(1,1,1,1);
//  r1.xyzw = r3.xywz + r1.xywz;
//  r1.w = r1.w / r1.z;
//  r2.xy = float2(0.5,0.5) * r1.xy;
//  r2.xy = r2.xy / r1.zz;
//  r2.xy = float2(0.5,0.5) + r2.xy;
//  r2.y = -r2.y;
//  r2.y = 1 + r2.y;
//  r2.x = r2.x;
//  r2.y = r2.y;
//  r2.z = r2.z;
//  r3.xy = float2(1,1);
//  r2.w = cmp(1 < asint(cb0[19].x));
//  if (r2.w != 0) {
//    r3.x = 0.5;
//  }
//  r2.w = cmp(2 < asint(cb0[19].x));
//  if (r2.w != 0) {
//    r3.y = 0.5;
//  }
//  r2.w = 2;
//  r2.w = (uint)r2.z % (uint)r2.w;
//  r2.w = (int)r2.w;
//  r2.x = r2.w + r2.x;
//  r4.x = r2.x * r3.x;
//  r2.x = 0;
//  r2.w = 1;
//  r2.w = cmp((uint)r2.w < (uint)r2.z);
//  if (r2.w != 0) {
//    r2.x = 1;
//  }
//  r2.x = (int)r2.x;
//  r2.x = r2.x + r2.y;
//  r4.y = r2.x * r3.y;
//  r4.x = r4.x;
//  r4.y = r4.y;
//  r4.xy = r4.xy;
//  r2.x = cmp(0 < cb0[24].z);
//  if (r2.x != 0) {
//    r2.x = max(0, cb0[24].z);
//    r2.x = min(1, r2.x);
//    r3.xyz = float3(-1,-1,-1);
//    r3.xyz = cb0[23].xyz + r3.xyz;
//    r2.xyw = r3.xyz * r2.xxx;
//    r2.xyw = float3(1,1,1) + r2.xyw;
//  } else {
//    r3.x = max(0, cb0[24].y);
//    r3.x = min(1, r3.x);
//    r3.yzw = float3(-1,-1,-1);
//    r3.yzw = cb0[22].xyz + r3.yzw;
//    r3.xyz = r3.xxx * r3.yzw;
//    r2.xyw = float3(1,1,1) + r3.xyz;
//  }
//  r2.xyw = r2.xyw;
//  r2.xyw = r2.xyw;
//  r4.xy = r4.xy;
//  r1.w = r1.w;
//  r2.z = r2.z;
//  r3.x = 0;
//  r3.y = asint(cb0[19].y);
//  r5.x = 2 * r3.y;
//  r3.y = asint(cb0[19].y);
//  r5.y = 2 * r3.y;
//  r3.y = -1;
//  r3.z = r3.x;
//  r3.w = r3.y;
//  r1.w = r3.z / 9;
//  r1.w = r1.w;
//  r3.xyz = float3(-1,-1,-1);
//  r2.xyw = r3.xyz + r2.xyw;
//  r2.xyw = r2.xyw * r1.www;
//  r2.xyw = float3(1,1,1) + r2.xyw;
//  r2.xyw = r2.xyw;
//  r2.z = r2.z;
//  r1.xyz = r1.xyz;
//  r2.xyw = r2.xyw;
//  r1.w = -1;
//  r1.w = (int)r1.w + asint(cb0[19].x);
//  r1.w = cmp((int)r1.w == (int)r2.z);
//  if (r1.w != 0) {
//    r1.xy = float2(0.5,0.5) * r1.xy;
//    r1.xy = r1.xy / r1.zz;
//    r1.xy = float2(0.5,0.5) + r1.xy;
//    r1.y = -r1.y;
//    r1.y = 1 + r1.y;
//    r1.z = cmp(r1.x < 0);
//    r1.x = cmp(1 < r1.x);
//    r1.x = (int)r1.x | (int)r1.z;
//    r1.z = cmp(r1.y < 0);
//    r1.x = (int)r1.z | (int)r1.x;
//    r1.y = cmp(1 < r1.y);
//    r1.x = (int)r1.y | (int)r1.x;
//    if (r1.x != 0) {
//      r2.xyw = int3(1,1,1);
//    }
//  }
//  r2.xyw = r2.xyw;
//  r2.xyw = r2.xyw;
//  r1.xyz = r2.xyw * r0.xyz;
//  r1.w = cmp(r0.w < cb0[0].x);
//  if (r1.w != 0) {
//    if (-1 != 0) discard;
//  }
//  r1.xyz = r1.xyz;
//  r1.w = cb0[70].x;
//  r2.x = cb0[70].y;
//  r2.y = cb0[1].x;
//  r2.z = cb0[70].z;
//  r2.y = r2.y * r2.z;
//  r2.y = cos(r2.y);
//  r2.x = r2.x * r2.y;
//  r1.w = r2.x + r1.w;
//  r2.xyzw = t3.Sample(s3_s, w2.xy).xyzw;
//  r2.xyzw = r2.xyzw * r1.wwww;
//  r3.xyz = -r1.xyz;
//  r2.xyz = r3.xyz + r2.xyz;
//  r2.xyz = r2.www * r2.xyz;
//  r1.xyz = r2.xyz + r1.xyz;
//  r1.xyz = r1.xyz;
//  r1.xyz = r1.xyz;
//  r1.xyz = r1.xyz;
//  r2.xy = v3.zw;
//  r3.xyz = r3.xyz;
//  r3.xyz = r3.xyz;
//  r4.xyz = -cb0[2].xyz;
//  r3.xyz = r4.xyz + r3.xyz;
//  r2.yzw = r3.xyz * r2.yyy;
//  r2.yzw = cb0[2].xyz + r2.yzw;
//  r3.xyz = -r2.yzw;
//  r1.xyz = r3.xyz + r1.xyz;
//  r1.xyz = r2.xxx * r1.xyz;
//  r0.xyz = r2.yzw + r1.xyz;
//  r0.xyz = r0.xyz;
//  r0.xyz = r0.xyz;
//  r0.w = r0.w;
//  r1.yzw = int3(0,0,0);
//  r1.x = v2.x;
//  o0.xyzw = r0.xyzw;
//  o1.xyzw = 0;
//  return;
//}

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[71];                    // Offset:    0 Size:  1136
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// s0_s                              sampler      NA          NA             s0      1 
// s3_s                              sampler      NA          NA             s3      1 
// t0                                texture  float4          2d             t0      1 
// t3                                texture  float4          2d             t3      1 
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// CLIPDISTANCE             0   x           1     NONE   float       
// TEXCOORD                 7    yzw        1     NONE   float       
// DEPTHVALUE               0   x           2     NONE   float       
// TEXCOORD                 0    yz         2     NONE   float    yz 
// FOGFACTOR                0   xyzw        3     NONE   float     zw
// TEXCOORD                 6   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float       
// WORLDVIEWNORMAL          0   xyz         6     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz         7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[71], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v2.yz
dcl_input_ps linear v3.zw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.yzyy, t0.xyzw, s0
mul r0.w, r0.w, cb0[68].w
lt r1.x, r0.w, cb0[0].x
discard_nz r1.x
dp3 r1.x, v6.xyzx, v6.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v6.xyzx
dp3 r1.w, -v7.xyzx, -v7.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, -v7.xyzx
dp3_sat r2.x, r1.xyzx, r2.xyzx
mad r2.yzw, -v7.xxyz, r1.wwww, -cb0[28].xxyz
dp3 r1.w, r2.yzwy, r2.yzwy
rsq r1.w, r1.w
mul r2.yzw, r1.wwww, r2.yyzw
dp3 r1.x, r1.xyzx, -cb0[28].xyzx
add r1.x, r1.x, cb0[26].x
add r1.y, cb0[26].x, l(1.000000)
div_sat r1.x, r1.x, r1.y
dp3_sat r1.y, -cb0[28].xyzx, r2.yzwy
mul r1.y, r1.y, r1.y
dp2 r1.y, r1.yyyy, cb0[26].yyyy
add r1.y, r1.y, l(-0.500000)
add r1.z, -r1.x, l(1.000000)
mul r1.w, r1.z, r1.z
mul r1.w, r1.w, r1.w
mul r1.z, r1.w, r1.z
mad r1.z, r1.y, r1.z, l(1.000000)
add r1.w, -r2.x, l(1.000000)
mul r2.x, r1.w, r1.w
mul r2.x, r2.x, r2.x
mul r1.w, r1.w, r2.x
mad r1.y, r1.y, r1.w, l(1.000000)
mul r2.xyz, r1.zzzz, cb0[33].xyzx
mul r1.yzw, r1.yyyy, r2.xxyz
mul r1.xyz, r1.xxxx, r1.yzwy
mul r2.xyz, cb0[25].xyzx, cb0[68].xyzx
mad r1.xyz, cb0[69].xyzx, r1.xyzx, r2.xyzx
mul r2.xyz, r0.xyzx, r1.xyzx
mul r1.w, cb0[1].x, cb0[70].z
sincos null, r1.w, r1.w
mad r1.w, cb0[70].y, r1.w, cb0[70].x
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v2.yzyy, t3.xyzw, s3
mul r2.w, r1.w, r3.w
mad r3.xyz, r3.xyzx, r1.wwww, -r2.xyzx
mad r2.xyz, r2.wwww, r3.xyzx, r2.xyzx
mad r0.xyz, -r0.xyzx, r1.xyzx, -cb0[2].xyzx
mad r0.xyz, r0.xyzx, v3.wwww, cb0[2].xyzx
add r1.xyz, r2.xyzx, -r0.xyzx
mad o0.xyz, v3.zzzz, r1.xyzx, r0.xyzx
mov o0.w, r0.w
mov o1.xyzw, l(0,0,0,0)
ret 
// Approximately 53 instruction slots used
