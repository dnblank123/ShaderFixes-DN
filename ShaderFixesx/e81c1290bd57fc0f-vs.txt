// vs particle 2? // todo optimization
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[89];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//Texture1D<float4> IniParams : register(t120);
//
//
//void main(
//  int4 v0 : BLENDINDICES0,
//  float4 v1 : NORMAL0,
//  float4 v2 : TEXCOORD0,
//  float v3 : TEXCOORD5,
//  float4 v4 : BLENDWEIGHT0,
//  out float4 o0 : SV_POSITION0,
//  out float4 o1 : COLOR0,
//  out float3 o2 : TEXCOORD7,
//  out float4 o3 : FOGFACTOR0,
//  out float4 o4 : TEXCOORD0,
//  out float3 o5 : TEXCOORD1)
//{
//  const float4 icb[] = { { 1.000000, 0, 0, 0},
//                              { 0, 1.000000, 0, 0},
//                              { 0, 0, 1.000000, 0},
//                              { 0, 0, 0, 1.000000} };
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  float4 x0[4];
//  float4 x1[4];
//  r0.xyz = float3(0,0,0);
//  r1.xyz = float3(0,0,0);
//  x0[0].xy = float2(-0.5,0.5);
//  x0[1].xy = float2(0.5,0.5);
//  x0[2].xy = float2(-0.5,-0.5);
//  x0[3].xy = float2(0.5,-0.5);
//  x1[0].xy = float2(0,0);
//  x1[1].xy = float2(1,0);
//  x1[2].xy = float2(0,1);
//  x1[3].xy = float2(1,1);
//  r0.w = cb0[16].x;
//  r0.w = r0.w;
//  r1.w = cb0[20].z;
//  r1.w = r1.w;
//  r2.xy = v2.xy;
//  r2.z = cb0[18].x;
//  r2.z = r2.z;
//  r2.w = cb0[18].y;
//  r2.w = r2.w;
//  r3.x = cb0[16].z;
//  r3.x = r3.x;
//  r3.y = cb0[18].z;
//  r3.y = r3.y;
//  r4.xyz = cb0[19].xyz;
//  r3.z = cb0[20].y;
//  r3.z = r3.z;
//  r3.w = cb0[20].x;
//  r3.w = r3.w;
//  r4.w = cb0[16].y;
//  r4.w = r4.w;
//  r5.x = floor(cb0[20].w);
//  r5.x = r5.x;
//  r5.y = v3.x;
//  r5.z = v0.y;
//  r6.xyz = cb0[r5.z+49].xxx * cb0[0].xyz;
//  r7.xyz = cb0[r5.z+49].yyy * cb0[1].xyz;
//  r6.xyz = r7.xyz + r6.xyz;
//  r7.xyz = cb0[r5.z+49].zzz * cb0[2].xyz;
//  r6.xyz = r7.xyz + r6.xyz;
//  r7.xyz = cb0[r5.z+49].www * cb0[3].xyz;
//  r6.xyz = r7.xyz + r6.xyz;
//  if (v4.y <= -0.24 || v4.y <= -1)
//  {
//    v4.xyz = r0.y;
//  }
//  r7.xyz = cb0[8].xyz * v4.xxx;
//  r8.xyz = cb0[9].xyz * v4.yyy;
//  r7.xyz = r8.xyz + r7.xyz;
//  r8.xyz = cb0[10].xyz * v4.zzz;
//  r7.xyz = r8.xyz + r7.xyz;
//  r8.xyz = float3(0,0,0) * cb0[11].xyz;
//  r7.xyz = r8.xyz + r7.xyz;
//  r7.xyz = v4.www * r7.xyz;
//  r5.z = -r2.x;
//  r5.z = r5.z + r0.w;
//  r5.z = r5.z * r1.w;
//  r5.w = cmp(r2.z < r5.z);
//  if (r5.w != 0) {
//    r5.w = -r2.z;
//    r5.w = r5.z + r5.w;
//    r5.w = r5.w * r2.w;
//    r5.w = -r5.w;
//    r5.w = r5.z + r5.w;
//    r5.w = r5.w * r3.x;
//  } else {
//    r5.w = r5.z * r3.x;
//  }
//  r6.w = 0.5 * r5.w;
//  r7.xyz = r7.xyz * r5.www;
//  r7.xyz = r7.xyz + r6.xyz;
//  r6.w = 1 + r6.w;
//  r7.w = log2(r3.y);
//  r6.w = r7.w * r6.w;
//  r6.w = exp2(r6.w);
//  r8.xyz = r6.www * r4.xyz;
//  r8.xyz = r8.xyz * r5.www;
//  r7.xyz = r8.xyz + r7.xyz;
//  r3.z = r5.z * r3.z;
//  r3.z = r3.z + r3.w;
//  r2.y = r3.z * r2.y;
//  r3.z = 20;
//  r3.z = r5.z * r3.z;
//  r3.w = floor(r3.z);
//  r5.w = 1 + r3.w;
//  r3.z = frac(r3.z);
//  r6.w = floor(r3.w);
//  r7.w = -floor(r6.w);
//  r8.x = -4;
//  r8.y = (int)r6.w ^ 4;
//  r7.w = max(floor(r7.w), floor(r6.w));
//  r8.x = max(4, (int)r8.x);
//  uiDest.w = (uint)r7.w / (uint)r8.x;
//  r7.w = uiDest.w;
//  r8.x = -floor(r7.w);
//  r8.y = (int)r8.y & 0x80000000;
//  r8.y = cmp(0 != (int)r8.y);
//  r7.w = r8.y ? r8.x : r7.w;
//  r8.x = -floor(r6.w);
//  r8.y = -4;
//  r8.z = (int)r6.w & 0x80000000;
//  r6.w = max(floor(r8.x), floor(r6.w));
//  r8.x = max(4, (int)r8.y);
//  r6.w = (uint)r6.w % (uint)r8.x;
//  r8.x = -floor(r6.w);
//  r8.y = cmp(0 != floor(r8.z));
//  r6.w = r8.y ? r8.x : r6.w;
//  r6.w = dot(cb0[r7.w+22].xyzw, icb[r6.w+0].xyzw);
//  r7.w = floor(r5.w);
//  r8.x = -floor(r7.w);
//  r8.y = -4;
//  r8.z = (int)r7.w ^ 4;
//  r8.x = max(floor(r8.x), floor(r7.w));
//  r8.y = max(4, floor(r8.y));
//  uiDest.x = (uint)r8.x / (uint)r8.y;
//  r8.x = uiDest.x;
//  r8.y = -floor(r8.x);
//  r8.z = (int)r8.z & 0x80000000;
//  r8.z = cmp(0 != (int)r8.z);
//  r8.x = r8.z ? r8.y : r8.x;
//  r8.y = -floor(r7.w);
//  r8.z = -4;
//  r8.w = (int)r7.w & 0x80000000;
//  r7.w = max(floor(r8.y), floor(r7.w));
//  r8.y = max(4, floor(r8.z));
//  r7.w = (uint)r7.w % (uint)r8.y;
//  r8.y = -floor(r7.w);
//  r8.z = cmp(0 != floor(r8.w));
//  r7.w = r8.z ? r8.y : r7.w;
//  r7.w = dot(cb0[r8.x+22].xyzw, icb[r7.w+0].xyzw);
//  r8.x = -r6.w;
//  r7.w = r8.x + r7.w;
//  r7.w = r7.w * r3.z;
//  r6.w = r7.w + r6.w;
//  r4.w = r6.w * r4.w;
//  r5.y = r4.w * r5.y;
//  r4.w = r5.y + r4.w;
//  r5.y = cmp(r5.z < 0);
//  r5.z = cmp(r5.z >= 1);
//  r5.y = (int)r5.z | (int)r5.y;
//  if (r5.y != 0) {
//    r5.y = 0;
//  } else {
//    r5.y = v0.x;
//  }
//  r8.xy = x0[r5.y+0].xy;
//  r8.xy = r8.xy * r4.ww;
//  r4.w = cmp(0 < (int)r5.x);
//  if (r4.w != 0) {
//    r9.xyz = cb0[8].xyz * v4.xxx;
//    r10.xyz = cb0[9].xyz * v4.yyy;
//    r9.xyz = r10.xyz + r9.xyz;
//    r10.xyz = cb0[10].xyz * v4.zzz;
//    r9.xyz = r10.xyz + r9.xyz;
//    r10.xyz = float3(0,0,0) * cb0[11].xyz;
//    r9.xyz = r10.xyz + r9.xyz;
//    r9.xyz = v4.www * r9.xyz;
//    r2.x = 0.100000001 + r2.x;
//    r2.x = -r2.x;
//    r0.w = r2.x + r0.w;
//    r0.w = r0.w * r1.w;
//    r1.w = cmp(r2.z < r0.w);
//    if (r1.w != 0) {
//      r1.w = -r2.z;
//      r1.w = r1.w + r0.w;
//      r1.w = r1.w * r2.w;
//      r1.w = -r1.w;
//      r0.w = r1.w + r0.w;
//    } else {
//      r0.w = r0.w;
//    }
//    r0.w = r0.w * r3.x;
//    r1.w = 0.5 * r0.w;
//    r2.xzw = r9.xyz * r0.www;
//    r2.xzw = r2.xzw + r6.xyz;
//    r3.x = 1;
//    r1.w = r3.x + r1.w;
//    r3.x = log2(r3.y);
//    r1.w = r3.x * r1.w;
//    r1.w = exp2(r1.w);
//    r4.xyz = r1.www * r4.xyz;
//    r4.xyz = r4.xyz * r0.www;
//    r2.xzw = r4.xyz + r2.xzw;
//    r4.xyzw = cb0[4].xyzw * r2.xxxx;
//    r6.xyzw = cb0[5].xyzw * r2.zzzz;
//    r4.xyzw = r6.xyzw + r4.xyzw;
//    r6.xyzw = cb0[6].xyzw * r2.wwww;
//    r4.xyzw = r6.xyzw + r4.xyzw;
//    r6.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//    r4.xyzw = r6.xyzw + r4.xyzw;
//    r6.xyzw = cb0[4].xyzw * r7.xxxx;
//    r9.xyzw = cb0[5].xyzw * r7.yyyy;
//    r6.xyzw = r9.xyzw + r6.xyzw;
//    r9.xyzw = cb0[6].xyzw * r7.zzzz;
//    r6.xyzw = r9.xyzw + r6.xyzw;
//    r9.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//    r6.xyzw = r9.xyzw + r6.xyzw;
//    r6.xyzw = -r6.xyzw;
//    r4.xyzw = r6.xyzw + r4.xyzw;
//    r0.w = dot(r4.xyzw, r4.xyzw);
//    r0.w = sqrt(r0.w);
//    r1.w = 0;
//    r0.w = cmp(r0.w == r1.w);
//    if (r0.w == 0) {
//      r0.w = dot(r4.xy, r4.xy);
//      r0.w = rsqrt(r0.w);
//      r4.xy = r4.xy * r0.ww;
//    }
//    r4.x = r4.x;
//    r0.w = -r4.y;
//    r1.w = -r4.x;
//    r2.x = max(r4.x, r1.w);
//    r2.z = -r2.x;
//    r2.z = 1 + r2.z;
//    r2.z = sqrt(r2.z);
//    r2.w = -0.0187292993 * r2.x;
//    r2.w = 0.0742610022 + r2.w;
//    r2.w = r2.w * r2.x;
//    r2.w = -0.212114394 + r2.w;
//    r2.x = r2.w * r2.x;
//    r2.x = 1.57072878 + r2.x;
//    r2.x = r2.x * r2.z;
//    r2.z = -2 * r2.x;
//    r2.z = 3.14159274 + r2.z;
//    r1.w = cmp(r4.x < r1.w);
//    r1.w = r1.w ? r2.z : 0;
//    r1.w = r2.x + r1.w;
//    r1.w = -r1.w;
//    r1.w = 1.57079637 + r1.w;
//    r2.x = 0;
//    r1.w = cmp(r2.x < r1.w);
//    r2.x = -r0.w;
//    r2.z = max(r2.x, r0.w);
//    r2.w = -r2.z;
//    r2.w = 1 + r2.w;
//    r2.w = sqrt(r2.w);
//    r3.x = -0.0187292993 * r2.z;
//    r3.x = 0.0742610022 + r3.x;
//    r3.x = r3.x * r2.z;
//    r3.x = -0.212114394 + r3.x;
//    r2.z = r3.x * r2.z;
//    r2.z = 1.57072878 + r2.z;
//    r2.z = r2.z * r2.w;
//    r2.w = -2 * r2.z;
//    r2.w = 3.14159274 + r2.w;
//    r2.x = cmp(r0.w < r2.x);
//    r2.x = r2.x ? r2.w : 0;
//    r2.x = r2.z + r2.x;
//    r2.z = -r0.w;
//    r2.w = max(r2.z, r0.w);
//    r3.x = -r2.w;
//    r3.x = 1 + r3.x;
//    r3.x = sqrt(r3.x);
//    r3.y = -0.0187292993 * r2.w;
//    r3.y = 0.0742610022 + r3.y;
//    r3.y = r3.y * r2.w;
//    r3.y = -0.212114394 + r3.y;
//    r2.w = r3.y * r2.w;
//    r2.w = 1.57072878 + r2.w;
//    r2.w = r2.w * r3.x;
//    r3.x = -2 * r2.w;
//    r3.x = 3.14159274 + r3.x;
//    r0.w = cmp(r0.w < r2.z);
//    r0.w = r0.w ? r3.x : 0;
//    r0.w = r2.w + r0.w;
//    r0.w = -r0.w;
//    r0.w = r1.w ? r2.x : r0.w;
//    r0.w = r0.w;
//    r2.y = r2.y + r0.w;
//  }
//  r0.w = sin(r2.y);
//  r1.w = cos(r2.y);
//  r2.x = r8.x * r1.w;
//  r2.y = r8.y * r0.w;
//  r2.y = -r2.y;
//  r2.x = r2.x + r2.y;
//  r0.w = r8.x * r0.w;
//  r1.w = r8.y * r1.w;
//  r0.w = r1.w + r0.w;
//  r1.w = 0;
//  r2.yzw = cb0[8].xyz * v1.xxx;
//  r4.xyz = cb0[9].xyz * v1.yyy;
//  r2.yzw = r4.xyz + r2.yzw;
//  r4.xyz = cb0[10].xyz * v1.zzz;
//  r2.yzw = r4.xyz + r2.yzw;
//  r4.xyz = float3(0,0,0) * cb0[11].xyz;
//  r2.yzw = r4.xyz + r2.yzw;
//  r2.x = r2.x + r2.y;
//  r0.w = r2.z + r0.w;
//  r1.w = r2.w + r1.w;
//  r2.xyz = cb0[12].xyz * r2.xxx;
//  r4.xyz = cb0[13].xyz * r0.www;
//  r2.xyz = r4.xyz + r2.xyz;
//  r4.xyz = cb0[14].xyz * r1.www;
//  r2.xyz = r4.xyz + r2.xyz;
//  r3.xy = x1[r5.y+0].xy;
//  r0.w = r7.x + r2.x;
//  r1.w = r7.y + r2.y;
//  r2.x = r7.z + r2.z;
//  r4.xyzw = cb0[4].xyzw * r0.wwww;
//  r6.xyzw = cb0[5].xyzw * r1.wwww;
//  r4.xyzw = r6.xyzw + r4.xyzw;
//  r2.xyzw = cb0[6].xyzw * r2.xxxx;
//  r2.xyzw = r4.xyzw + r2.xyzw;
//  r4.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//  r2.xyzw = r4.xyzw + r2.xyzw;
//  r0.w = (uint)r3.w;
//  r1.w = (uint)r5.w;
//  r4.xyzw = -cb0[r0.w+28].xyzw;
//  r4.xyzw = cb0[r1.w+28].xyzw + r4.xyzw;
//  r4.xyzw = r4.xyzw * r3.zzzz;
//  r4.xyzw = cb0[r0.w+28].xyzw + r4.xyzw;
//  r4.xyzw = cb0[17].xyzw * r4.xyzw;
//  r2.xyzw = r2.xyzw;
//  o0.xyzw = r2.xyzw;
//  o1.xyzw = r4.xyzw;
//  o3.xyzw = 0;
//  o2.xyz = 0;
//  o5.xyz = 0;
//  o4.xy = r3.xy;
//  return;
//}

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[89];                    // Offset:    0 Size:  1424
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int   xy  
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 5   x           3     NONE   float   x   
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 7   xyz         2     NONE   float   xyz 
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xy  
// TEXCOORD                 1   xyz         5     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[89], dynamicIndexed
dcl_input v0.xy
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.x
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyz
dcl_temps 6
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
mov x0[0].xy, l(-0.500000,0.500000,0,0)
mov x0[1].xy, l(0.500000,0.500000,0,0)
mov x0[2].xy, l(-0.500000,-0.500000,0,0)
mov x0[3].xy, l(0.500000,-0.500000,0,0)
mov x1[0].xy, l(0,0,0,0)
mov x1[1].xy, l(1.000000,0,0,0)
mov x1[2].xy, l(0,1.000000,0,0)
mov x1[3].xy, l(1.000000,1.000000,0,0)
round_ni r0.x, cb0[20].w
itof r0.yz, v0.yyxy
add r0.y, r0.y, l(49.000000)
ftou r0.yz, r0.yyzy
mul r1.xyz, cb0[0].xyzx, cb0[r0.y + 0].xxxx
mad r1.xyz, cb0[r0.y + 0].yyyy, cb0[1].xyzx, r1.xyzx
mad r1.xyz, cb0[r0.y + 0].zzzz, cb0[2].xyzx, r1.xyzx
mad r1.xyz, cb0[r0.y + 0].wwww, cb0[3].xyzx, r1.xyzx
ge r0.y, l(-0.240000), v4.y
movc r2.xyz, r0.yyyy, l(0,0,0,0), v4.xyzx
mul r3.xyz, r2.xxxx, cb0[8].xyzx
mad r2.xyw, cb0[9].xyxz, r2.yyyy, r3.xyxz
mad r2.xyz, cb0[10].xyzx, r2.zzzz, r2.xywx
mul r2.xyz, r2.xyzx, v4.wwww
add r0.y, -v2.x, cb0[16].x
mul r0.w, r0.y, cb0[20].z
lt r1.w, cb0[18].x, r0.w
mad r0.y, r0.y, cb0[20].z, -cb0[18].x
mad r0.y, -r0.y, cb0[18].y, r0.w
mul r0.y, r0.y, cb0[16].z
mul r2.w, r0.w, cb0[16].z
movc r0.y, r1.w, r0.y, r2.w
mad r3.xyz, r2.xyzx, r0.yyyy, r1.xyzx
mad r1.w, r0.y, l(0.500000), l(1.000000)
log r2.w, cb0[18].z
mul r1.w, r1.w, r2.w
exp r1.w, r1.w
mul r4.xyz, r1.wwww, cb0[19].xyzx
mad r3.xyz, r4.xyzx, r0.yyyy, r3.xyzx
mad r0.y, r0.w, cb0[20].y, cb0[20].x
mul r1.w, r0.y, v2.y
mul r3.w, r0.w, l(20.000000)
round_ni r4.x, r3.w
add r4.y, r4.x, l(1.000000)
frc r3.w, r3.w
ftoi r4.z, r4.x
xor r4.w, r4.z, l(4)
ftou r5.x, |r4.x|
ushr r5.y, r5.x, l(2)
and r4.zw, r4.zzzw, l(0, 0, 0x80000000, 0x80000000)
utof r4.zw, r4.zzzw
ftoi r4.w, r4.w
and r5.x, r5.x, l(3)
utof r5.xy, r5.xyxx
ne r4.z, r4.z, l(0.000000)
movc r4.zw, r4.zzzw, -r5.xxxy, r5.xxxy
add r4.w, r4.w, l(22.000000)
ftou r4.zw, r4.zzzw
dp4 r4.z, cb0[r4.w + 0].xyzw, icb[r4.z + 0].xyzw
ftoi r4.w, r4.y
xor r5.x, r4.w, l(4)
ftou r5.y, |r4.y|
ushr r5.z, r5.y, l(2)
and r5.xy, r5.xyxx, l(0x80000000, 3, 0, 0)
utof r5.xyz, r5.xyzx
ftoi r5.x, r5.x
movc r5.x, r5.x, -r5.z, r5.z
and r4.w, r4.w, l(0x80000000)
utof r4.w, r4.w
ne r4.w, r4.w, l(0.000000)
movc r4.w, r4.w, -r5.y, r5.y
add r5.x, r5.x, l(22.000000)
ftou r5.x, r5.x
ftou r4.w, r4.w
dp4 r4.w, cb0[r5.x + 0].xyzw, icb[r4.w + 0].xyzw
add r4.w, r4.w, -r4.z
mad r4.z, r4.w, r3.w, r4.z
mul r4.z, r4.z, cb0[16].y
mad r4.z, r4.z, v3.x, r4.z
lt r4.w, r0.w, l(0.000000)
ge r0.w, r0.w, l(1.000000)
or r0.w, r4.w, r0.w
itof r0.w, r0.w
ne r0.w, r0.w, l(0.000000)
movc r0.z, r0.w, l(0), r0.z
mov r5.xy, x0[r0.z + 0].xyxx
mul r4.zw, r4.zzzz, r5.yyyx
ftoi r0.x, r0.x
ilt r0.x, l(0), r0.x
if_nz r0.x
  add r0.x, v2.x, l(0.100000)
  add r0.x, -r0.x, cb0[16].x
  mul r0.w, r0.x, cb0[20].z
  lt r5.x, cb0[18].x, r0.w
  mad r0.x, r0.x, cb0[20].z, -cb0[18].x
  mad r0.x, -r0.x, cb0[18].y, r0.w
  movc r0.x, r5.x, r0.x, r0.w
  mul r0.x, r0.x, cb0[16].z
  mad r1.xyz, r2.xyzx, r0.xxxx, r1.xyzx
  mad r0.w, r0.x, l(0.500000), l(1.000000)
  mul r0.w, r0.w, r2.w
  exp r0.w, r0.w
  mul r2.xyz, r0.wwww, cb0[19].xyzx
  mad r1.xyz, r2.xyzx, r0.xxxx, r1.xyzx
  mul r2.xyzw, r1.xxxx, cb0[4].xyzw
  mad r2.xyzw, cb0[5].xyzw, r1.yyyy, r2.xyzw
  mad r2.xyzw, cb0[6].xyzw, r1.zzzz, r2.xyzw
  add r2.xyzw, r2.xyzw, cb0[7].xyzw
  mul r5.xyzw, r3.xxxx, cb0[4].xyzw
  mad r5.xyzw, cb0[5].xyzw, r3.yyyy, r5.xyzw
  mad r5.xyzw, cb0[6].xyzw, r3.zzzz, r5.xyzw
  add r5.xyzw, r5.xyzw, cb0[7].xyzw
  add r2.xyzw, r2.xyzw, -r5.xyzw
  dp4 r0.x, r2.xyzw, r2.xyzw
  sqrt r0.x, r0.x
  eq r0.x, r0.x, l(0.000000)
  dp2 r0.w, r2.xyxx, r2.xyxx
  rsq r0.w, r0.w
  mul r1.xy, r0.wwww, r2.xyxx
  movc r0.xw, r0.xxxx, r2.xxxy, r1.xxxy
  add r1.xy, -|r0.xwxx|, l(1.000000, 1.000000, 0.000000, 0.000000)
  sqrt r1.xy, r1.xyxx
  mad r2.xy, |r0.xwxx|, l(-0.018729, -0.018729, 0.000000, 0.000000), l(0.074261, 0.074261, 0.000000, 0.000000)
  mad r2.xy, r2.xyxx, |r0.xwxx|, l(-0.212114, -0.212114, 0.000000, 0.000000)
  mad r2.xy, r2.xyxx, |r0.xwxx|, l(1.570729, 1.570729, 0.000000, 0.000000)
  mul r2.zw, r1.xxxy, r2.xxxy
  mad r2.zw, r2.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.141593, 3.141593)
  lt r0.x, r0.x, -r0.x
  and r0.x, r2.z, r0.x
  mad r0.x, r2.x, r1.x, r0.x
  add r0.x, -r0.x, l(1.570796)
  lt r0.x, l(0.000000), r0.x
  lt r0.w, -r0.w, r0.w
  and r0.w, r2.w, r0.w
  mad r0.w, r2.y, r1.y, r0.w
  movc r0.x, r0.x, r0.w, -r0.w
  mad r1.w, r0.y, v2.y, r0.x
endif 
sincos r0.x, r1.x, r1.w
mul r0.xy, r0.xxxx, r4.zwzz
mad r0.x, r4.w, r1.x, -r0.x
mad r0.y, r4.z, r1.x, r0.y
mul r1.xyz, v1.xxxx, cb0[8].xyzx
mad r1.xyz, cb0[9].xyzx, v1.yyyy, r1.xyzx
mad r1.xyz, cb0[10].xyzx, v1.zzzz, r1.xyzx
add r0.x, r0.x, r1.x
add r0.y, r0.y, r1.y
mul r1.xyw, r0.xxxx, cb0[12].xyxz
mad r0.xyw, cb0[13].xyxz, r0.yyyy, r1.xyxw
mad r0.xyw, cb0[14].xyxz, r1.zzzz, r0.xyxw
mov o4.xy, x1[r0.z + 0].xyxx
add r0.xyz, r0.xywx, r3.xyzx
mul r1.xyzw, r0.xxxx, cb0[4].xyzw
mad r1.xyzw, cb0[5].xyzw, r0.yyyy, r1.xyzw
mad r0.xyzw, cb0[6].xyzw, r0.zzzz, r1.xyzw
add o0.xyzw, r0.xyzw, cb0[7].xyzw
ftou r0.xy, r4.xyxx
utof r0.xy, r0.xyxx
add r0.xy, r0.xyxx, l(28.000000, 28.000000, 0.000000, 0.000000)
ftou r0.xy, r0.xyxx
add r1.xyzw, -cb0[r0.x + 0].xyzw, cb0[r0.y + 0].xyzw
mad r0.xyzw, r1.xyzw, r3.wwww, cb0[r0.x + 0].xyzw
mul o1.xyzw, r0.xyzw, cb0[17].xyzw
mov o3.xyzw, l(0,0,0,0)
mov o2.xyz, l(0,0,0,0)
mov o5.xyz, l(0,0,0,0)
ret 
// Approximately 165 instruction slots used
