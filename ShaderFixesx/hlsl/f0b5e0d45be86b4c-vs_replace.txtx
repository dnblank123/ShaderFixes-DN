// vs ground
cbuffer cb0 : register(b0)
{
  float4 cb0[162];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);


void main(
  float4 v0 : COLOR0,
  float4 v1 : COLOR1,
  float4 v2 : NORMAL0,
  float3 v3 : POSITION0,
  float4 v4 : TEXCOORD0,
  float2 v5 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float o1 : CLIPDISTANCE0,
  out float3 p1 : TEXCOORD7,
  out float4 o2 : COLOR0,
  out float4 o3 : COLOR1,
  out float4 o4 : COLOR2,
  out float o5 : DEPTHVALUE0,
  out float2 p5 : TEXCOORD0,
  out float4 o6 : FOGFACTOR0,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD1,
  out float4 o9 : TEXCOORD2,
  out float4 o10 : TEXCOORD3,
  out float3 o11 : TEXCOORD4,
  out float3 o12 : WORLDVIEWNORMAL0,
  out float3 o13 : WORLDVIEWPOSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0,0,0);
  r1.xyz = float3(0,0,0);
  r2.xyz = cb0[132].xyz * v3.xxx;
  r3.xyz = cb0[133].xyz * v3.yyy;
  r2.xyz = r3.xyz + r2.xyz;
  r3.xyz = cb0[134].xyz * v3.zzz;
  r2.xyz = r3.xyz + r2.xyz;
  r3.xyz = float3(1,1,1) * cb0[135].xyz;
  r2.xyz = r3.xyz + r2.xyz;
  r3.xyzw = cb0[0].xyzw * r2.xxxx;
  r4.xyzw = cb0[1].xyzw * r2.yyyy;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = cb0[2].xyzw * r2.zzzz;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = float4(1,1,1,1) * cb0[3].xyzw;
  r3.xyzw = r4.zxyw + r3.zxyw;
  r0.w = 0;
  r4.xyz = cb0[132].xyz * v2.xxx;
  r5.xyz = cb0[133].xyz * v2.yyy;
  r4.xyz = r5.xyz + r4.xyz;
  r5.xyz = cb0[134].xyz * v2.zzz;
  r4.xyz = r5.xyz + r4.xyz;
  r5.xyz = cb0[135].xyz * r0.www;
  r4.xyz = r5.xyz + r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r5.xyzw = cb0[4].xyzw * v3.xxxx;
  r6.xyzw = cb0[5].xyzw * v3.yyyy;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r6.xyzw = cb0[6].xyzw * v3.zzzz;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r6.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
  r5.xyzw = r6.xyzw + r5.xyzw;
  r0.w = dot(r5.xyzw, cb0[136].xyzw);
  r6.xyzw = v0.xyzw;
  r7.xy = cb0[160].xz + v3.xz;
  r7.xy = r7.xy / cb0[161].xx;
  r3.x = r3.x;
  r1.w = -r3.x;
  r1.w = cb0[137].z + r1.w;
  r7.zw = cb0[137].xy * r1.ww;
  r7.zw = max(float2(0,0), r7.zw);
  r8.xy = min(float2(1,1), r7.zw);
  r8.y = r8.y * r8.y;
  r8.z = 0;
  r9.xyzw = v1.xyzw;
  r10.z = 0;
  r10.xy = v4.xy;
  r11.z = 0;
  r11.xy = v5.xy;
  r12.xyzw = float4(0,0,0,1);
  r1.w = floor(cb0[139].x);
  r1.w = r1.w;
  r2.w = 0;
  r13.xyz = r12.xyz;
  r4.w = r2.w;
  while (true) {
    r7.z = cmp(floor(r4.w) < floor(r1.w));
    if (r7.z == 0) break;
    r7.z = r4.w;
    r14.xyz = r4.xyz;
    r7.w = 0;
    r15.xyz = -cb0[r7.z+140].xyz;
    r8.w = dot(r14.xyz, r15.xyz);
    r7.w = max(r8.w, r7.w);
    r14.xyz = cb0[r7.z+145].xyz * r7.www;
    r13.xyz = r14.xyz + r13.xyz;
    r4.w = floor(r4.w) + 1;
  }
  r1.w = floor(cb0[139].y);
  r1.w = r1.w;
  r2.w = 0;
  r12.xyz = r13.xyz;
  r13.xyzw = float4(0.681999981,0.681999981,0.681999981,1) * cb0[138].xyzw;
  r12.xyzw = r13.xyzw + r12.xyzw;
  r7.zw = r3.yz / r3.ww;
  r13.xy = int2(1,1);
  r1.w = -r7.w;
  r1.w = 1 + r1.w;
  r3.x = r3.x;
  r2.w = -r3.x;
  r2.w = cb0[137].z + r2.w;
  r13.xy = cb0[137].xy * r2.ww;
  r13.xy = max(float2(0,0), r13.xy);
  r13.xz = min(float2(1,1), r13.yx);
  r13.w = r13.x * r13.x;
  r5.xyz = r5.xyz;
  r5.w = r3.x;
  o0.xyzw = r3.yzxw;
  o1.x = 0;
  p1.xyz = 0;
  o2.xyzw = r6.xyzw;
  o3.xyzw = r9.xyzw;
  o4.xyzw = r12.xyzw;
  o6.x = 0;
  o6.y = 0;
  o6.zw = r13.zw;
  o7.xyzw = r5.xyzw;
  o5.x = 0;
  p5.xy = r7.xy;
  o8.xyz = 0;
  o9.xyz = r10.xyz;
  o10.xyz = r11.xyz;
  o11.xyz = 0;
  o12.xyz = 0;
  o13.xyz = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Jan 03 15:56:52 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz
// POSITION                 0   xyz         3     NONE   float   xyz
// TEXCOORD                 0   xy          4     NONE   float   xy
// TEXCOORD                 1   xy          5     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// CLIPDISTANCE             0   x           1     NONE   float   x
// TEXCOORD                 7    yzw        1     NONE   float    yzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float   xyzw
// COLOR                    2   xyzw        4     NONE   float   xyzw
// DEPTHVALUE               0   x           5     NONE   float   x
// TEXCOORD                 0    yz         5     NONE   float    yz
// FOGFACTOR                0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 1   xyz         8     NONE   float   xyz
// TEXCOORD                 2   xyz         9     NONE   float   xyz
// TEXCOORD                 3   xyz        10     NONE   float   xyz
// TEXCOORD                 4   xyz        11     NONE   float   xyz
// WORLDVIEWNORMAL          0   xyz        12     NONE   float   xyz
// WORLDVIEWPOSITION        0   xyz        13     NONE   float   xyz
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[162], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xy
dcl_input v5.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.yzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.x
dcl_output o5.yz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output o9.xyz
dcl_output o10.xyz
dcl_output o11.xyz
dcl_output o12.xyz
dcl_output o13.xyz
dcl_temps 16
mov r0.xyz, l(0,0,0,0)
mov r1.xyz, l(0,0,0,0)
mul r2.xyz, v3.xxxx, cb0[132].xyzx
mul r3.xyz, v3.yyyy, cb0[133].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, v3.zzzz, cb0[134].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, cb0[135].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyzw, r2.xxxx, cb0[0].xyzw
mul r4.xyzw, r2.yyyy, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r2.zzzz, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r3.xyzw, r3.zxyw, r4.zxyw
itof r0.w, l(0)
mul r4.xyz, v2.xxxx, cb0[132].xyzx
mul r5.xyz, v2.yyyy, cb0[133].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, v2.zzzz, cb0[134].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, r0.wwww, cb0[135].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r5.xyzw, v3.xxxx, cb0[4].xyzw
mul r6.xyzw, v3.yyyy, cb0[5].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, v3.zzzz, cb0[6].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r5.xyzw, r5.xyzw, r6.xyzw
dp4 r0.w, r5.xyzw, cb0[136].xyzw
mov r6.xyzw, v0.xyzw
add r7.xy, v3.xzxx, cb0[160].xzxx
div r7.xy, r7.xyxx, cb0[161].xxxx
mov r3.x, r3.x
mov r1.w, -r3.x
add r1.w, r1.w, cb0[137].z
mul r7.zw, r1.wwww, cb0[137].xxxy
max r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r8.xy, r7.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r8.y, r8.y, r8.y
mov r8.x, r8.x
mov r8.y, r8.y
itof r8.z, l(0)
mov r8.xy, r8.xyxx
mov r9.xyzw, v1.xyzw
itof r10.z, l(0)
mov r10.xy, v4.xyxx
itof r11.z, l(0)
mov r11.xy, v5.xyxx
mov r12.xyzw, l(0,0,0,1.000000)
mov r12.xyzw, r12.xyzw
mov r4.xyz, r4.xyzx
mov r2.xyz, r2.xyzx
ftoi r1.w, cb0[139].x
mov r1.w, r1.w
mov r2.w, l(0)
mov r13.xyz, r12.xyzx
mov r4.w, r2.w
loop
  ilt r7.z, r4.w, r1.w
  breakc_z r7.z
  mov r7.z, r4.w
  mov r14.xyz, r4.xyzx
  itof r7.w, l(0)
  mov r15.xyz, -cb0[r7.z + 140].xyzx
  dp3 r8.w, r14.xyzx, r15.xyzx
  max r7.w, r7.w, r8.w
  mul r14.xyz, r7.wwww, cb0[r7.z + 145].xyzx
  add r13.xyz, r13.xyzx, r14.xyzx
  iadd r4.w, r4.w, l(1)
endloop
ftoi r1.w, cb0[139].y
mov r1.w, r1.w
mov r2.w, l(0)
mov r12.xyz, r13.xyzx
mov r4.w, r2.w
loop
  ilt r7.z, r4.w, r1.w
  breakc_z r7.z
  mov r7.z, r4.w
  mov r14.xyz, r4.xyzx
  mov r15.xyz, r2.xyzx
  mov r15.xyz, -r15.xyzx
  add r15.xyz, r15.xyzx, cb0[r7.z + 150].xyzx
  dp3 r7.w, r15.xyzx, r15.xyzx
  sqrt r7.w, r7.w
  mul r8.w, r7.w, cb0[r7.z + 150].w
  mov r8.w, -r8.w
  add r8.w, r8.w, l(1.000000)
  max r8.w, r8.w, l(0.000000)
  div r15.xyz, r15.xyzx, r7.wwww
  dp3 r7.w, r14.xyzx, r15.xyzx
  max r7.w, r7.w, l(0.000000)
  min r7.w, r7.w, l(1.000000)
  mul r14.xyz, r7.wwww, cb0[r7.z + 155].xyzx
  mul r14.xyz, r8.wwww, r14.xyzx
  mov r14.xyz, r14.xyzx
  add r12.xyz, r12.xyzx, r14.xyzx
  iadd r4.w, r4.w, l(1)
endloop
mov r12.xyz, r12.xyzx
mov r12.w, r12.w
mov r12.xyzw, r12.xyzw
mul r13.xyzw, cb0[138].xyzw, l(0.682000, 0.682000, 0.682000, 1.000000)
add r12.xyzw, r12.xyzw, r13.xyzw
div r7.zw, r3.yyyz, r3.wwww
itof r13.xy, l(1, 1, 0, 0)
add r7.zw, r7.zzzw, r13.xxxy
mul r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
mov r1.w, -r7.w
add r1.w, r1.w, l(1.000000)
mov r3.x, r3.x
mov r2.w, -r3.x
add r2.w, r2.w, cb0[137].z
mul r13.xy, r2.wwww, cb0[137].xyxx
max r13.xy, r13.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r13.xz, r13.yyxy, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r13.w, r13.x, r13.x
mov r13.z, r13.z
mov r13.w, r13.w
mov r13.zw, r13.zzzw
mov r3.x, r3.x
mul r2.w, r3.x, l(0.010000)
mov r2.w, r2.w
mov r5.xyz, r5.xyzx
mov r5.w, r3.x
mov o0.xyzw, r3.yzxw
mov o1.x, r0.w
mov o1.yzw, r0.xxyz
mov o2.xyzw, r6.xyzw
mov o3.xyzw, r9.xyzw
mov o4.xyzw, r12.xyzw
mov o6.x, r7.z
mov o6.y, r1.w
mov o6.zw, r13.zzzw
mov o7.xyzw, r5.xyzw
mov o5.x, r2.w
mov o5.yz, r7.xxyx
mov o8.xyz, r8.xyzx
mov o9.xyz, r10.xyzx
mov o10.xyz, r11.xyzx
mov o11.xyz, r1.xyzx
mov o12.xyz, r4.xyzx
mov o13.xyz, r2.xyzx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
