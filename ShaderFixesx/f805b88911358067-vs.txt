// vs player
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[525];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//
//
//void main(
//  float3 v0 : BITANGENT0,
//  int4 v1 : BLENDINDICES0,
//  float4 v2 : NORMAL0,
//  float3 v3 : POSITION0,
//  float3 v4 : TANGENT0,
//  float2 v5 : TEXCOORD0,
//  float4 v6 : BLENDWEIGHT0,
//  out float4 o0 : SV_POSITION0,
//  out float3 o1 : BINORMAL0,
//  out float p1 : CLIPDISTANCE0,
//  out float3 o2 : TEXCOORD7,
//  out float p2 : DEPTHVALUE0,
//  out float4 o3 : FOGFACTOR0,
//  out float4 o4 : TEXCOORD6,
//  out float3 o5 : TANGENT0,
//  out float4 o6 : TEXCOORD0,
//  out float4 o7 : TEXCOORD1,
//  out float4 o8 : TEXCOORD2,
//  out float3 o9 : TEXCOORD4,
//  out float3 o10 : WORLDVIEWNORMAL0,
//  out float3 o11 : WORLDVIEWPOSITION0)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.xyzw = v6.xyzw;
//  r1.x = (int)v1.x * 4;
//  r2.x = cb0[r1.x+13].x * r0.x;
//  r2.y = cb0[r1.x+14].x * r0.x;
//  r2.z = cb0[r1.x+15].x * r0.x;
//  r2.w = cb0[r1.x+16].x * r0.x;
//  r3.x = cb0[r1.x+13].y * r0.x;
//  r3.y = cb0[r1.x+14].y * r0.x;
//  r3.z = cb0[r1.x+15].y * r0.x;
//  r3.w = cb0[r1.x+16].y * r0.x;
//  r4.x = cb0[r1.x+13].z * r0.x;
//  r4.y = cb0[r1.x+14].z * r0.x;
//  r4.z = cb0[r1.x+15].z * r0.x;
//  r4.w = cb0[r1.x+16].z * r0.x;
//  r5.x = cb0[r1.x+13].w * r0.x;
//  r5.y = cb0[r1.x+14].w * r0.x;
//  r5.z = cb0[r1.x+15].w * r0.x;
//  r5.w = cb0[r1.x+16].w * r0.x;
//  r0.x = (int)v1.y * 4;
//  r1.x = cb0[r0.x+13].x * r0.y;
//  r1.y = cb0[r0.x+14].x * r0.y;
//  r1.z = cb0[r0.x+15].x * r0.y;
//  r1.w = cb0[r0.x+16].x * r0.y;
//  r6.x = cb0[r0.x+13].y * r0.y;
//  r6.y = cb0[r0.x+14].y * r0.y;
//  r6.z = cb0[r0.x+15].y * r0.y;
//  r6.w = cb0[r0.x+16].y * r0.y;
//  r7.x = cb0[r0.x+13].z * r0.y;
//  r7.y = cb0[r0.x+14].z * r0.y;
//  r7.z = cb0[r0.x+15].z * r0.y;
//  r7.w = cb0[r0.x+16].z * r0.y;
//  r8.x = cb0[r0.x+13].w * r0.y;
//  r8.y = cb0[r0.x+14].w * r0.y;
//  r8.z = cb0[r0.x+15].w * r0.y;
//  r8.w = cb0[r0.x+16].w * r0.y;
//  r1.xyzw = r2.xyzw + r1.xyzw;
//  r2.xyzw = r6.xyzw + r3.xyzw;
//  r3.xyzw = r7.xyzw + r4.xyzw;
//  r4.xyzw = r8.xyzw + r5.xyzw;
//  r0.x = (int)v1.z * 4;
//  r5.x = cb0[r0.x+13].x * r0.z;
//  r5.y = cb0[r0.x+14].x * r0.z;
//  r5.z = cb0[r0.x+15].x * r0.z;
//  r5.w = cb0[r0.x+16].x * r0.z;
//  r6.x = cb0[r0.x+13].y * r0.z;
//  r6.y = cb0[r0.x+14].y * r0.z;
//  r6.z = cb0[r0.x+15].y * r0.z;
//  r6.w = cb0[r0.x+16].y * r0.z;
//  r7.x = cb0[r0.x+13].z * r0.z;
//  r7.y = cb0[r0.x+14].z * r0.z;
//  r7.z = cb0[r0.x+15].z * r0.z;
//  r7.w = cb0[r0.x+16].z * r0.z;
//  r8.x = cb0[r0.x+13].w * r0.z;
//  r8.y = cb0[r0.x+14].w * r0.z;
//  r8.z = cb0[r0.x+15].w * r0.z;
//  r8.w = cb0[r0.x+16].w * r0.z;
//  r1.xyzw = r5.xyzw + r1.xyzw;
//  r2.xyzw = r6.xyzw + r2.xyzw;
//  r3.xyzw = r7.xyzw + r3.xyzw;
//  r4.xyzw = r8.xyzw + r4.xyzw;
//  r0.x = (int)v1.w * 4;
//  r5.x = cb0[r0.x+13].x * r0.w;
//  r5.y = cb0[r0.x+14].x * r0.w;
//  r5.z = cb0[r0.x+15].x * r0.w;
//  r5.w = cb0[r0.x+16].x * r0.w;
//  r6.x = cb0[r0.x+13].y * r0.w;
//  r6.y = cb0[r0.x+14].y * r0.w;
//  r6.z = cb0[r0.x+15].y * r0.w;
//  r6.w = cb0[r0.x+16].y * r0.w;
//  r7.x = cb0[r0.x+13].z * r0.w;
//  r7.y = cb0[r0.x+14].z * r0.w;
//  r7.z = cb0[r0.x+15].z * r0.w;
//  r7.w = cb0[r0.x+16].z * r0.w;
//  r8.x = cb0[r0.x+13].w * r0.w;
//  r8.y = cb0[r0.x+14].w * r0.w;
//  r8.z = cb0[r0.x+15].w * r0.w;
//  r8.w = cb0[r0.x+16].w * r0.w;
//  r0.xyzw = r5.xyzw + r1.xyzw;
//  r1.xyzw = r6.xyzw + r2.xyzw;
//  r2.xyzw = r7.xyzw + r3.xyzw;
//  r3.xyzw = r8.xyzw + r4.xyzw;
//  r0.xyzw = r0.xyzw;
//  r1.xyzw = r1.xyzw;
//  r2.xyzw = r2.xyzw;
//  r3.xyzw = r3.xyzw;
//  r4.xyz = int3(0,0,0);
//  r5.xyzw = cb0[0].xyzw * r0.xxxx;
//  r6.xyzw = cb0[1].xyzw * r1.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[2].xyzw * r2.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[3].xyzw * r3.xxxx;
//  r5.xyzw = r6.xyzw + r5.xyzw;
//  r6.xyzw = cb0[0].xyzw * r0.yyyy;
//  r7.xyzw = cb0[1].xyzw * r1.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[2].xyzw * r2.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[3].xyzw * r3.yyyy;
//  r6.xyzw = r7.xyzw + r6.xyzw;
//  r7.xyzw = cb0[0].xyzw * r0.zzzz;
//  r8.xyzw = cb0[1].xyzw * r1.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[2].xyzw * r2.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[3].xyzw * r3.zzzz;
//  r7.xyzw = r8.xyzw + r7.xyzw;
//  r8.xyzw = cb0[0].xyzw * r0.wwww;
//  r9.xyzw = cb0[1].xyzw * r1.wwww;
//  r8.xyzw = r9.xyzw + r8.xyzw;
//  r9.xyzw = cb0[2].xyzw * r2.wwww;
//  r8.xyzw = r9.xyzw + r8.xyzw;
//  r3.xyzw = cb0[3].xyzw * r3.wwww;
//  r3.xyzw = r8.xyzw + r3.xyzw;
//  r8.x = r5.x;
//  r8.y = r6.x;
//  r8.z = r7.x;
//  r8.w = r3.x;
//  r9.x = r5.y;
//  r9.y = r6.y;
//  r9.z = r7.y;
//  r9.w = r3.y;
//  r10.x = r5.z;
//  r10.y = r6.z;
//  r10.z = r7.z;
//  r10.w = r3.z;
//  r3.x = r5.w;
//  r3.y = r6.w;
//  r3.z = r7.w;
//  r3.w = r3.w;
//  r5.xyz = v3.xyz;
//  r5.w = 1;
//  r6.x = dot(r0.xyzw, r5.xyzw);
//  r6.y = dot(r1.xyzw, r5.xyzw);
//  r6.z = dot(r2.xyzw, r5.xyzw);
//  r7.w = 0;
//  r7.xyz = v2.xyz;
//  r11.x = dot(r0.xyzw, r7.xyzw);
//  r11.y = dot(r1.xyzw, r7.xyzw);
//  r11.z = dot(r2.xyzw, r7.xyzw);
//  r7.w = 0;
//  r7.xyz = v4.xyz;
//  r0.x = dot(r0.xyzw, r7.xyzw);
//  r0.y = dot(r1.xyzw, r7.xyzw);
//  r0.z = dot(r2.xyzw, r7.xyzw);
//  r0.w = 0;
//  r1.xyz = cb0[8].xyz * v0.xxx;
//  r2.xyz = cb0[9].xyz * v0.yyy;
//  r1.xyz = r2.xyz + r1.xyz;
//  r2.xyz = cb0[10].xyz * v0.zzz;
//  r1.xyz = r2.xyz + r1.xyz;
//  r2.xyz = cb0[11].xyz * r0.www;
//  r1.xyz = r2.xyz + r1.xyz;
//  r2.xyzw = cb0[4].xyzw * r6.xxxx;
//  r7.xyzw = cb0[5].xyzw * r6.yyyy;
//  r2.xyzw = r7.xyzw + r2.xyzw;
//  r7.xyzw = cb0[6].xyzw * r6.zzzz;
//  r2.xyzw = r7.xyzw + r2.xyzw;
//  r7.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//  r2.xyzw = r7.zxyw + r2.zxyw;
//  r7.x = dot(r8.xyzw, r5.xyzw);
//  r7.y = dot(r9.xyzw, r5.xyzw);
//  r7.z = dot(r10.xyzw, r5.xyzw);
//  r7.w = dot(r3.xyzw, r5.xyzw);
//  r0.w = dot(r7.xyzw, cb0[12].xyzw);
//
//  r3.x = frac(v5.x);
//  r3.y = v5.y;
//  r5.x = floor(v5.x);
//  r5.yz = int2(0,0);
//  r1.w = dot(r6.xyz, r6.xyz);
//  r1.w = rsqrt(r1.w);
//  r8.xyz = r6.xyz * r1.www;
//  r1.w = dot(r8.xyz, r11.xyz);
//  r1.w = r1.w + r1.w;
//  r1.w = -r1.w;
//  r9.xyz = r11.xyz * r1.www;
//  r8.xyz = r9.xyz + r8.xyz;
//  r9.xyzw = cb0[0].xyzw * r8.xxxx;
//  r10.xyzw = cb0[1].xyzw * r8.yyyy;
//  r9.xyzw = r10.xyzw + r9.xyzw;
//  r8.xyzw = mad(cb0[2].xyzw, r8.zzzz, r9.xyzw);
//  r1.w = dot(r8.xyzw, r8.xyzw);
//  r1.w = rsqrt(r1.w);
//  r8.xyz = r8.xyz * r1.www;
//  r1.w = 0.5 * r8.y;
//  r1.w = -r1.w;
//  r1.w = 0.5 + r1.w;
//  r3.zw = r2.yz / r2.ww;
//  r8.yw = int2(0,0);
//  r3.zw = r8.yw + r3.zw;
//  r9.xy = float2(0.5,0.5) * r3.zw;
//  r9.zw = int2(0,0);
//  r3.z = -r9.y;
//  r3.z = 1 + r3.z;
//  r2.x = r2.x;
//  r3.w = 0.00999999978 * r2.x;
//  r3.w = r3.w;
//  r7.xyz = r7.xyz;
//  r7.w = r2.x;
//  o0.xyzw = r2.yzxw;
//  o1.xyz = r1.xyz;
//  p1.x = 0;
//  o2.xyz = 0;
//  p2.x = 0;
//  o3.xzw = 0;
//  o3.y = 0;
//  o4.xyzw = 0;
//  o5.xyz = 0;
//  o7.xyz = 0;
//  o8.xz = 0;
//  o8.y = 0;
//  o9.xyz = 0;
//  o10.xyz = r11.xyz;
//  o11.xyz = r6.xyz;
//  o6.xy = r3.xy;
//  return;
//}

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[525];                   // Offset:    0 Size:  8400
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BITANGENT                0   xyz         0     NONE   float   xyz 
// BLENDINDICES             0   xyzw        1     NONE     int   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// POSITION                 0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyz         4     NONE   float       
// TEXCOORD                 0   xy          5     NONE   float   xy  
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// BINORMAL                 0   xyz         1     NONE   float   xyz 
// CLIPDISTANCE             0      w        1     NONE   float      w
// TEXCOORD                 7   xyz         2     NONE   float   xyz 
// DEPTHVALUE               0      w        2     NONE   float      w
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TANGENT                  0   xyz         5     NONE   float   xyz 
// TEXCOORD                 0   xyzw        6     NONE   float   xy  
// TEXCOORD                 1   xyzw        7     NONE   float   xyz 
// TEXCOORD                 2   xyzw        8     NONE   float   xyz 
// TEXCOORD                 4   xyz         9     NONE   float   xyz 
// WORLDVIEWNORMAL          0   xyz        10     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz        11     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[525], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v5.xy
dcl_input v6.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xy
dcl_output o7.xyz
dcl_output o8.xyz
dcl_output o9.xyz
dcl_output o10.xyz
dcl_output o11.xyz
dcl_temps 19
ishl r0.xyzw, v1.xyzw, l(2, 2, 2, 2)
itof r0.xyzw, r0.xyzw
add r1.xyzw, r0.xxxx, l(13.000000, 14.000000, 15.000000, 16.000000)
ftou r1.xyzw, r1.xyzw
mul r2.xyz, v6.xxxx, cb0[r1.x + 0].yxzy
mov r3.x, r2.y
mul r4.xyz, v6.xxxx, cb0[r1.y + 0].xzyx
mov r3.y, r4.x
mul r1.xyz, v6.xxxx, cb0[r1.z + 0].xyzx
mul r5.xyz, v6.xxxx, cb0[r1.w + 0].xyzx
mov r3.z, r1.x
mov r3.w, r5.x
add r6.xyzw, r0.yyyy, l(13.000000, 14.000000, 15.000000, 16.000000)
ftou r6.xyzw, r6.xyzw
mul r7.xyz, v6.yyyy, cb0[r6.x + 0].yxzy
mov r8.x, r7.y
mul r9.xyz, v6.yyyy, cb0[r6.y + 0].xzyx
mov r8.y, r9.x
mul r6.xyz, v6.yyyy, cb0[r6.z + 0].xyzx
mul r10.xyz, v6.yyyy, cb0[r6.w + 0].xyzx
mov r8.z, r6.x
mov r8.w, r10.x
add r3.xyzw, r3.xyzw, r8.xyzw
add r8.xyzw, r0.zzzz, l(13.000000, 14.000000, 15.000000, 16.000000)
add r0.xyzw, r0.wwww, l(13.000000, 14.000000, 15.000000, 16.000000)
ftou r0.xyzw, r0.xyzw
ftou r8.xyzw, r8.xyzw
mul r11.xyz, v6.zzzz, cb0[r8.x + 0].yxzy
mov r12.x, r11.y
mul r13.xyz, v6.zzzz, cb0[r8.y + 0].xzyx
mov r12.y, r13.x
mul r8.xyz, v6.zzzz, cb0[r8.z + 0].xyzx
mul r14.xyz, v6.zzzz, cb0[r8.w + 0].xyzx
mov r12.z, r8.x
mov r12.w, r14.x
add r3.xyzw, r3.xyzw, r12.xyzw
mul r12.xyz, v6.wwww, cb0[r0.x + 0].yxzy
mov r15.x, r12.y
mul r16.xyz, v6.wwww, cb0[r0.y + 0].xzyx
mov r15.y, r16.x
mul r0.xyz, v6.wwww, cb0[r0.z + 0].xyzx
mul r17.xyz, v6.wwww, cb0[r0.w + 0].xyzx
mov r15.z, r0.x
mov r15.w, r17.x
add r3.xyzw, r3.xyzw, r15.xyzw
mov r15.xyz, v3.xyzx
mov r15.w, l(1.000000)
dp4 r18.x, r3.xyzw, r15.xyzw
dp3 o10.x, r3.xyzx, v2.xyzx
mul r3.xyzw, r18.xxxx, cb0[4].xyzw
mov r9.x, r7.z
mov r7.y, r9.z
mov r7.z, r6.y
mov r9.z, r6.z
mov r7.w, r10.y
mov r9.w, r10.z
mov r4.x, r2.z
mov r2.y, r4.z
mov r2.z, r1.y
mov r4.z, r1.z
mov r2.w, r5.y
mov r4.w, r5.z
add r1.xyzw, r4.xyzw, r9.xyzw
add r2.xyzw, r2.xyzw, r7.xyzw
mov r13.x, r11.z
mov r11.y, r13.z
mov r11.z, r8.y
mov r13.z, r8.z
mov r11.w, r14.y
mov r13.w, r14.z
add r1.xyzw, r1.xyzw, r13.xyzw
add r2.xyzw, r2.xyzw, r11.xyzw
mov r16.x, r12.z
mov r12.y, r16.z
mov r12.z, r0.y
mov r16.z, r0.z
mov r12.w, r17.y
mov r16.w, r17.z
add r0.xyzw, r1.xyzw, r16.xyzw
add r1.xyzw, r2.xyzw, r12.xyzw
dp4 r18.y, r1.xyzw, r15.xyzw
dp3 o10.y, r1.xyzx, v2.xyzx
dp4 r18.z, r0.xyzw, r15.xyzw
dp3 o10.z, r0.xyzx, v2.xyzx
mad r0.xyzw, cb0[5].xyzw, r18.yyyy, r3.xyzw
mov o11.xyz, r18.xyzx
mad r0.xyzw, cb0[6].xyzw, r18.zzzz, r0.xyzw
add o0.xyzw, r0.xyzw, cb0[7].xyzw
mul r0.xyz, v0.xxxx, cb0[8].xyzx
mad r0.xyz, cb0[9].xyzx, v0.yyyy, r0.xyzx
mad o1.xyz, cb0[10].xyzx, v0.zzzz, r0.xyzx
//mov o1.w, l(0)
//mov o2.xyzw, l(0,0,0,0)
//mov o3.xyzw, l(0,0,0,0)
//mov o4.xyzw, l(0,0,0,0)
//mov o5.xyz, l(0,0,0,0)
frc o6.x, v5.x
mov o6.y, v5.y
//mov o7.xyz, l(0,0,0,0)
//mov o8.xyz, l(0,0,0,0)
//mov o9.xyz, l(0,0,0,0)
ret 
// Approximately 102 instruction slots used