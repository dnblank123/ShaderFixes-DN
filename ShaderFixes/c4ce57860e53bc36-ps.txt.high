// // ice stack high graph
// Texture2D<float4> t15 : register(t15);

// Texture2D<float4> t8 : register(t8);

// Texture2D<float4> t7 : register(t7);

// Texture2D<float4> t6 : register(t6);

// Texture2D<float4> t0 : register(t0);

// SamplerState s15_s : register(s15);

// SamplerState s8_s : register(s8);

// SamplerState s7_s : register(s7);

// SamplerState s6_s : register(s6);

// SamplerState s0_s : register(s0);

// cbuffer cb0 : register(b0)
// {
  // float4 cb0[69];
// }




// // 3Dmigoto declarations
// #define cmp -


// void main(
  // float4 v0 : SV_POSITION0,
  // float v1 : CLIPDISTANCE0,
  // float3 w1 : TEXCOORD7,
  // float v2 : DEPTHVALUE0,
  // float2 w2 : TEXCOORD0,
  // float4 v3 : FOGFACTOR0,
  // float4 v4 : TEXCOORD6,
  // float4 v5 : TEXCOORD2,
  // float3 v6 : TEXCOORD4,
  // float3 v7 : WORLDVIEWNORMAL0,
  // float3 v8 : WORLDVIEWPOSITION0,
  // out float4 o0 : SV_TARGET0,
  // out float4 o1 : SV_TARGET1)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // // r0.x = 0;
  // // r0.x = cmp(v1.x < r0.x);
  // // if (r0.x != 0) {
    // // if (-1 != 0) discard;
  // // }
  // r0.xyz = int3(0,0,0);
  // r0.xyz = r0.xyz;
  // r0.w = dot(v7.xyz, v7.xyz);
  // r0.w = rsqrt(r0.w);
  // r1.xyz = v7.xyz * r0.www;
  // r2.xyz = v8.xyz;
  // r3.xyz = -r2.xyz;
  // r0.w = dot(r3.xyz, r3.xyz);
  // r0.w = rsqrt(r0.w);
  // r3.xyz = r3.xyz * r0.www;
  // r0.w = dot(r1.xyz, r3.xyz);
  // r0.w = max(0, r0.w);
  // r0.w = min(1, r0.w);
  // r1.xyz = r1.xyz;
  // r3.xyz = r3.xyz;
  // r0.w = r0.w;
  // r4.xyz = -cb0[27].xyz;
  // r3.xyz = r4.xyz + r3.xyz;
  // r1.w = dot(r3.xyz, r3.xyz);
  // r1.w = rsqrt(r1.w);
  // r3.xyz = r3.xyz * r1.www;
  // r1.xyz = r1.xyz;
  // r4.xyz = -cb0[27].xyz;
  // r1.w = cb0[25].x;
  // r1.w = r1.w;
  // r2.w = dot(r1.xyz, r4.xyz);
  // r2.w = r2.w + r1.w;
  // r3.w = 1;
  // r1.w = r3.w + r1.w;
  // r1.w = r2.w / r1.w;
  // r1.w = max(0, r1.w);
  // r1.w = min(1, r1.w);
  // r1.w = r1.w;
  // r1.w = r1.w;
  // r4.xyz = -cb0[27].xyz;
  // r2.w = dot(r4.xyz, r3.xyz);
  // r2.w = max(0, r2.w);
  // r2.w = min(1, r2.w);
  // r3.x = 2;
  // r3.x = r3.x * r2.w;
  // r2.w = r3.x * r2.w;
  // r3.x = cb0[25].y;
  // r2.w = r3.x * r2.w;
  // r2.w = 0.5 + r2.w;
  // r3.x = 1;
  // r3.y = 1;
  // r3.y = -r3.y;
  // r3.y = r3.y + r2.w;
  // r3.z = 1;
  // r3.w = -r1.w;
  // r3.z = r3.z + r3.w;
  // r3.w = 1;
  // r3.w = r3.w * r3.z;
  // r3.z = r3.z * r3.z;
  // r3.z = r3.z * r3.z;
  // r3.z = r3.w * r3.z;
  // r3.y = r3.y * r3.z;
  // r3.x = r3.x + r3.y;
  // r3.y = 1;
  // r3.z = 1;
  // r3.z = -r3.z;
  // r2.w = r3.z + r2.w;
  // r3.z = 1;
  // r0.w = -r0.w;
  // r0.w = r3.z + r0.w;
  // r3.z = 1;
  // r3.z = r3.z * r0.w;
  // r0.w = r0.w * r0.w;
  // r0.w = r0.w * r0.w;
  // r0.w = r3.z * r0.w;
  // r0.w = r2.w * r0.w;
  // r0.w = r3.y + r0.w;
  // r3.xyz = cb0[32].xyz * r3.xxx;
  // r3.xyz = r3.xyz * r0.www;
  // r3.xyz = r3.xyz * r1.www;
  // r0.xyz = r3.xyz + r0.xyz;
  // r0.w = (int)cb0[26].y;
  // r0.w = r0.w;
  // r1.w = 0;
  // r3.xyz = r0.xyz;
  // r2.w = r1.w;
  // // while (true) {
    // // r3.w = cmp((int)r2.w < (int)r0.w);
    // // if (r3.w == 0) break;
    // // r3.w = r2.w;
    // // r4.xyz = r1.xyz;
    // // r5.xyz = r2.xyz;
    // // r5.xyz = -r5.xyz;
    // // r5.xyz = cb0[r3.w+37].xyz + r5.xyz;
    // // r4.w = dot(r5.xyz, r5.xyz);
    // // r4.w = sqrt(r4.w);
    // // r5.w = cb0[r3.w+37].w * r4.w;
    // // r5.w = -r5.w;
    // // r5.w = 1 + r5.w;
    // // r5.w = max(0, r5.w);
    // // r5.xyz = r5.xyz / r4.www;
    // // r4.x = dot(r4.xyz, r5.xyz);
    // // r4.x = max(0, r4.x);
    // // r4.x = min(1, r4.x);
    // // r4.xyz = cb0[r3.w+42].xyz * r4.xxx;
    // // r4.xyz = r4.xyz * r5.www;
    // // r4.xyz = r4.xyz;
    // // r3.xyz = r4.xyz + r3.xyz;
    // // r2.w = (int)r2.w + 1;
  // // }
  // r0.x = (int)cb0[26].z;
  // r0.x = r0.x;
  // r0.y = 0;
  // r4.xyz = r3.xyz;
  // r0.z = r0.y;
  // // while (true) {
    // // r0.w = cmp((int)r0.z < (int)r0.x);
    // // if (r0.w == 0) break;
    // // r5.xyz = -r2.xyz;
    // // r5.xyz = cb0[r0.z+52].xyz + r5.xyz;
    // // r0.w = dot(r5.xyz, r5.xyz);
    // // r0.w = sqrt(r0.w);
    // // r5.xyz = r5.xyz / r0.www;
    // // r6.xyz = -cb0[r0.z+47].xyz;
    // // r1.w = dot(r6.xyz, r5.xyz);
    // // r0.w = cmp(cb0[r0.z+52].w >= r0.w);
    // // if (r0.w != 0) {
      // // r0.w = -cb0[r0.z+62].w;
      // // r0.w = r1.w + r0.w;
      // // r0.w = r0.w / cb0[r0.z+57].w;
      // // r0.w = max(0, r0.w);
      // // r0.w = min(1, r0.w);
      // // r0.w = log2(r0.w);
      // // r0.w = cb0[r0.z+47].w * r0.w;
      // // r0.w = exp2(r0.w);
    // // } else {
      // // r0.w = 0;
    // // }
    // // r1.w = 0;
    // // r2.w = dot(r1.xyz, r5.xyz);
    // // r1.w = max(r2.w, r1.w);
    // // r5.xyz = cb0[r0.z+57].xyz * r1.www;
    // // r5.xyz = r5.xyz * r0.www;
    // // r4.xyz = r5.xyz + r4.xyz;
    // // r0.z = (int)r0.z + 1;
  // // }
  // r4.xyz = r4.xyz;
  // r4.xyz = r4.xyz;
  // r0.xyz = cb0[67].xyz * cb0[24].xyz;
  // r1.xyz = cb0[68].xyz * r4.xyz;
  // r0.xyz = r1.xyz + r0.xyz;
  // r0.w = cb0[67].w;
  // r1.xyzw = t0.Sample(s0_s, w2.xy).xyzw;
  // r1.xyzw = r1.xyzw;
  // r0.xyzw = r1.xyzw * r0.xyzw;
  // r1.xyz = v4.xyz;
  // r2.x = v4.w;
  // r2.x = r2.x;
  // r2.y = -1;
  // // r2.y = (int)r2.y + asint(cb0[18].x);
  // // r2.z = -r2.x;
  // // r2.x = max(r2.x, r2.z);
  // // r2.z = cmp(r2.x < cb0[19].x);
  // // if (r2.z != 0) {
    // // r2.w = 0;
  // // }
  // // if (r2.z == 0) {
    // // r2.z = cmp(r2.x < cb0[19].y);
    // // if (r2.z != 0) {
      // // r2.w = 1;
    // // }
    // // if (r2.z == 0) {
      // // r2.x = cmp(r2.x < cb0[19].z);
      // // if (r2.x != 0) {
        // // r2.w = 2;
      // // }
      // // if (r2.x == 0) {
        // // r2.w = r2.y;
      // // }
    // // }
  // // }
  // // r2.w = r2.w;
  // // r2.x = (int)r2.w * 4;
  // // r3.xyzw = cb0[r2.x+2].xyzw * r1.xxxx;
  // // r4.xyzw = cb0[r2.x+3].xyzw * r1.yyyy;
  // // r3.xyzw = r4.xyzw + r3.xyzw;
  // // r4.xyzw = cb0[r2.x+4].xyzw * r1.zzzz;
  // // r3.xyzw = r4.xyzw + r3.xyzw;
  // // r4.xyzw = cb0[r2.x+5].xyzw * float4(1,1,1,1);
  // // r3.xyzw = r4.xywz + r3.xywz;
  // // r1.x = r3.w / r3.z;
  // // r1.yz = float2(0.5,0.5) * r3.xy;
  // // r1.yz = r1.yz / r3.zz;
  // // r1.yz = float2(0.5,0.5) + r1.yz;
  // // r1.z = -r1.z;
  // // r1.z = 1 + r1.z;
  // // r1.y = r1.y;
  // // r1.z = r1.z;
  // // r2.w = r2.w;
  // // r2.xy = float2(1,1);
  // // r2.z = cmp(1 < asint(cb0[18].x));
  // // if (r2.z != 0) {
    // // r2.x = 0.5;
  // // }
  // // r2.z = cmp(2 < asint(cb0[18].x));
  // // if (r2.z != 0) {
    // // r2.y = 0.5;
  // // }
  // // r2.z = 2;
  // // r2.z = (uint)r2.w % (uint)r2.z;
  // // r2.z = (int)r2.z;
  // // r1.y = r2.z + r1.y;
  // // r4.x = r1.y * r2.x;
  // // r1.y = 0;
  // // r2.x = 1;
  // // r2.x = cmp((uint)r2.x < (uint)r2.w);
  // // if (r2.x != 0) {
    // // r1.y = 1;
  // // }
  // // r1.y = (int)r1.y;
  // // r1.y = r1.y + r1.z;
  // // r4.y = r1.y * r2.y;
  // // r4.x = r4.x;
  // // r4.y = r4.y;
  // // r4.xy = r4.xy;
  // // r1.y = cmp(0 < cb0[23].z);
  // // if (r1.y != 0) {
    // // r1.y = max(0, cb0[23].z);
    // // r1.y = min(1, r1.y);
    // // r2.xyz = float3(-1,-1,-1);
    // // r2.xyz = cb0[22].xyz + r2.xyz;
    // // r2.xyz = r2.xyz * r1.yyy;
    // // r2.xyz = float3(1,1,1) + r2.xyz;
  // // } else {
    // // r1.y = max(0, cb0[23].y);
    // // r1.y = min(1, r1.y);
    // // r5.xyz = float3(-1,-1,-1);
    // // r5.xyz = cb0[21].xyz + r5.xyz;
    // // r5.xyz = r5.xyz * r1.yyy;
    // // r2.xyz = float3(1,1,1) + r5.xyz;
  // // }
  // // r2.xyz = r2.xyz;
  // // r2.xyz = r2.xyz;
  // // r4.xy = r4.xy;
  // // r1.x = r1.x;
  // // r2.w = r2.w;
  // // r1.y = 0;
  // // r1.z = asint(cb0[18].y);
  // // r5.x = 2 * r1.z;
  // // r1.z = asint(cb0[18].y);
  // // r5.y = 2 * r1.z;
  // // r1.z = -1;
  // // r3.w = r1.y;
  // // r4.z = r1.z;
  // // while (true) {
    // // r4.w = cmp(1 >= (int)r4.z);
    // // if (r4.w == 0) break;
    // // r4.w = -1;
    // // r5.z = r3.w;
    // // r5.w = r4.w;
    // // while (true) {
      // // r6.x = cmp(1 >= (int)r5.w);
      // // if (r6.x == 0) break;
      // // r6.x = (int)r4.z;
      // // r6.y = (int)r5.w;
      // // r6.xy = r6.xy / r5.xy;
      // // r6.zw = r5.xy;
      // // r6.xy = r6.xy + r4.xy;
      // // r7.x = r1.x;
      // // r7.y = r2.w;
      // // r7.zw = float2(1,1) / r6.zw;
      // // r8.xy = r6.xy * r6.zw;
      // // r8.xy = float2(0.5,0.5) + r8.xy;
      // // r8.xy = frac(r8.xy);
      // // r6.xy = r6.xy * r6.zw;
      // // r6.xy = float2(0.5,0.5) + r6.xy;
      // // r6.xy = floor(r6.xy);
      // // r6.xy = r6.xy / r6.zw;
      // // r6.zw = float2(0,0) * r7.zw;
      // // r6.zw = r6.xy + r6.zw;
      // // r7.x = r7.x;
      // // r7.y = r7.y;
      // // r6.zw = r6.zw;
      // // r6.z = t15.Sample(s15_s, r6.zw).x;
      // // r6.z = r6.z;
      // // r6.z = r6.z;
      // // if (r7.y == 0) {
        // // r6.w = cb0[20].x + r6.z;
        // // r6.w = cmp(r7.x >= r6.w);
        // // r6.w = r6.w ? 1 : 0;
      // // } else {
        // // r6.z = cb0[20].y + r6.z;
        // // r6.z = cmp(r7.x >= r6.z);
        // // r6.w = r6.z ? 1 : 0;
      // // }
      // // r6.w = r6.w;
      // // r6.w = r6.w;
      // // r8.zw = float2(0,1) * r7.zw;
      // // r8.zw = r8.zw + r6.xy;
      // // r8.zw = r8.zw;
      // // r6.z = t15.Sample(s15_s, r8.zw).x;
      // // r6.z = r6.z;
      // // r6.z = r6.z;
      // // if (r7.y == 0) {
        // // r8.z = cb0[20].x + r6.z;
        // // r8.z = cmp(r7.x >= r8.z);
        // // r8.z = r8.z ? 1 : 0;
      // // } else {
        // // r6.z = cb0[20].y + r6.z;
        // // r6.z = cmp(r7.x >= r6.z);
        // // r8.z = r6.z ? 1 : 0;
      // // }
      // // r8.z = r8.z;
      // // r8.z = r8.z;
      // // r9.xy = float2(1,0) * r7.zw;
      // // r9.xy = r9.xy + r6.xy;
      // // r9.xy = r9.xy;
      // // r6.z = t15.Sample(s15_s, r9.xy).x;
      // // r6.z = r6.z;
      // // r6.z = r6.z;
      // // if (r7.y == 0) {
        // // r8.w = cb0[20].x + r6.z;
        // // r8.w = cmp(r7.x >= r8.w);
        // // r8.w = r8.w ? 1 : 0;
      // // } else {
        // // r6.z = cb0[20].y + r6.z;
        // // r6.z = cmp(r7.x >= r6.z);
        // // r8.w = r6.z ? 1 : 0;
      // // }
      // // r8.w = r8.w;
      // // r8.w = r8.w;
      // // r7.zw = float2(1,1) * r7.zw;
      // // r6.xy = r7.zw + r6.xy;
      // // r6.xy = r6.xy;
      // // r6.x = t15.Sample(s15_s, r6.xy).x;
      // // r6.x = r6.x;
      // // r6.x = r6.x;
      // // if (r7.y == 0) {
        // // r6.y = cb0[20].x + r6.x;
        // // r6.y = cmp(r7.x >= r6.y);
        // // r6.y = r6.y ? 1 : 0;
      // // } else {
        // // r6.x = cb0[20].y + r6.x;
        // // r6.x = cmp(r7.x >= r6.x);
        // // r6.y = r6.x ? 1 : 0;
      // // }
      // // r6.y = r6.y;
      // // r6.y = r6.y;
      // // r6.x = -r6.w;
      // // r6.x = r8.z + r6.x;
      // // r6.x = r8.y * r6.x;
      // // r6.x = r6.w + r6.x;
      // // r6.z = -r8.w;
      // // r6.y = r6.y + r6.z;
      // // r6.y = r8.y * r6.y;
      // // r6.y = r8.w + r6.y;
      // // r6.z = -r6.x;
      // // r6.y = r6.y + r6.z;
      // // r6.y = r8.x * r6.y;
      // // r6.x = r6.x + r6.y;
      // // r6.x = r6.x;
      // // r5.z = r6.x + r5.z;
      // // r5.w = (int)r5.w + 1;
    // // }
    // // r3.w = r5.z;
    // // r4.z = (int)r4.z + 1;
  // // }
  // // r1.x = r3.w / 9;
  // // r1.x = r1.x;
  // // r4.xyz = float3(-1,-1,-1);
  // // r2.xyz = r4.xyz + r2.xyz;
  // // r1.xyz = r2.xyz * r1.xxx;
  // r1.xyz = float3(1,1,1);// + r1.xyz;
  // // r1.xyz = r1.xyz;
  // // r2.w = r2.w;
  // // r3.xyz = r3.xyz;
  // // r1.xyz = r1.xyz;
  // // r2.x = -1;
  // // r2.x = (int)r2.x + asint(cb0[18].x);
  // // r2.x = cmp((int)r2.x == (int)r2.w);
  // // if (r2.x != 0) {
    // // r2.xy = float2(0.5,0.5) * r3.xy;
    // // r2.xy = r2.xy / r3.zz;
    // // r2.xy = float2(0.5,0.5) + r2.xy;
    // // r2.y = -r2.y;
    // // r2.y = 1 + r2.y;
    // // r2.z = cmp(r2.x < 0);
    // // r2.x = cmp(1 < r2.x);
    // // r2.x = (int)r2.x | (int)r2.z;
    // // r2.z = cmp(r2.y < 0);
    // // r2.x = (int)r2.z | (int)r2.x;
    // // r2.y = cmp(1 < r2.y);
    // // r2.x = (int)r2.y | (int)r2.x;
    // // if (r2.x != 0) {
      // // r1.xyz = int3(1,1,1);
    // // }
  // // }
  // r1.xyz = r1.xyz;
  // r1.xyz = r1.xyz;
  // r0.xyz = r1.xyz * r0.xyz;
  // r1.x = cmp(r1.w < cb0[0].x);
  // if (r1.x != 0) {
    // if (-1 != 0) discard;
  // }
  // r1.xyz = t7.Sample(s7_s, w2.xy).xyz; // this
  // r1.xyz = r1.xyz;
  // r1.xyz = r1.xyz;
  // r1.w = -v5.x;
  // r1.w = max(v5.x, r1.w);
  // r2.x = -v5.z;
  // r2.y = max(v5.z, r2.x);
  // r2.z = min(r2.y, r1.w);
  // r2.w = max(r2.y, r1.w);
  // r2.w = 1 / r2.w;
  // r2.z = r2.z * r2.w;
  // r2.w = r2.z * r2.z;
  // r3.x = 0.0208350997 * r2.w;
  // r3.x = -0.0851330012 + r3.x;
  // r3.x = r3.x * r2.w;
  // r3.x = 0.180141002 + r3.x;
  // r3.x = r3.x * r2.w;
  // r3.x = -0.330299497 + r3.x;
  // r2.w = r3.x * r2.w;
  // r2.w = 0.999866009 + r2.w;
  // r2.z = r2.z * r2.w;
  // r1.w = cmp(r2.y < r1.w);
  // r2.y = -2 * r2.z;
  // r2.y = 1.57079637 + r2.y;
  // r1.w = r1.w ? r2.y : 0;
  // r1.w = r1.w + r2.z;
  // r2.x = cmp(v5.z < r2.x);
  // r2.x = r2.x ? -3.141593 : 0;
  // r1.w = r2.x + r1.w;
  // r2.x = min(v5.x, v5.z);
  // r2.y = max(v5.x, v5.z);
  // r2.z = -r2.x;
  // r2.x = cmp(r2.x < r2.z);
  // r2.z = -r2.y;
  // r2.y = cmp(r2.y >= r2.z);
  // r2.x = r2.y ? r2.x : 0;
  // r2.y = -r1.w;
  // r1.w = r2.x ? r2.y : r1.w;
  // r1.w = r1.w / 6.28318548;
  // r1.w = 1 + r1.w;
  // r2.x = frac(r1.w);
  // r1.w = 0.5 * v5.y;
  // r1.w = -r1.w;
  // r2.y = 0.5 + r1.w;
  // r2.x = r2.x;
  // r2.y = r2.y;
  // r2.xyzw = t8.Sample(s8_s, r2.xy).xyzw; //this
  // r2.xyzw = r2.xyzw;
  // r1.xyz = r2.xyz * r1.xyz;
  // r1.w = 0 * r2.w;
  // r0.xyzw = r1.xyzw + r0.xyzw;
  // r1.xyz = v4.xyz;
  // r1.w = v4.w;
  // r1.w = r1.w;
  // r2.x = -1;
  // r2.x = (int)r2.x + asint(cb0[18].x);
  // r2.y = -r1.w;
  // r1.w = max(r2.y, r1.w);
  // r2.y = cmp(r1.w < cb0[19].x);
  // if (r2.y != 0) {
    // r2.z = 0;
  // }
  // if (r2.y == 0) {
    // r2.y = cmp(r1.w < cb0[19].y);
    // if (r2.y != 0) {
      // r2.z = 1;
    // }
    // if (r2.y == 0) {
      // r1.w = cmp(r1.w < cb0[19].z);
      // if (r1.w != 0) {
        // r2.z = 2;
      // }
      // if (r1.w == 0) {
        // r2.z = r2.x;
      // }
    // }
  // }
  // r2.z = r2.z;
  // r1.w = (int)r2.z * 4;
  // r3.xyzw = cb0[r1.w+2].xyzw * r1.xxxx;
  // r4.xyzw = cb0[r1.w+3].xyzw * r1.yyyy;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r4.xyzw = cb0[r1.w+4].xyzw * r1.zzzz;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r1.xyzw = cb0[r1.w+5].xyzw * float4(1,1,1,1);
  // r1.xyzw = r3.xywz + r1.xywz;
  // r1.w = r1.w / r1.z;
  // r2.xy = float2(0.5,0.5) * r1.xy;
  // r2.xy = r2.xy / r1.zz;
  // r2.xy = float2(0.5,0.5) + r2.xy;
  // r2.y = -r2.y;
  // r2.y = 1 + r2.y;
  // r2.x = r2.x;
  // r2.y = r2.y;
  // r2.z = r2.z;
  // r3.xy = float2(1,1);
  // r2.w = cmp(1 < asint(cb0[18].x));
  // if (r2.w != 0) {
    // r3.x = 0.5;
  // }
  // r2.w = cmp(2 < asint(cb0[18].x));
  // if (r2.w != 0) {
    // r3.y = 0.5;
  // }
  // r2.w = 2;
  // r2.w = (uint)r2.z % (uint)r2.w;
  // r2.w = (int)r2.w;
  // r2.x = r2.w + r2.x;
  // r4.x = r2.x * r3.x;
  // r2.x = 0;
  // r2.w = 1;
  // r2.w = cmp((uint)r2.w < (uint)r2.z);
  // if (r2.w != 0) {
    // r2.x = 1;
  // }
  // r2.x = (int)r2.x;
  // r2.x = r2.x + r2.y;
  // r4.y = r2.x * r3.y;
  // r4.x = r4.x;
  // r4.y = r4.y;
  // r4.xy = r4.xy;
  // r2.x = cmp(0 < cb0[23].z);
  // if (r2.x != 0) {
    // r2.x = max(0, cb0[23].z);
    // r2.x = min(1, r2.x);
    // r3.xyz = float3(-1,-1,-1);
    // r3.xyz = cb0[22].xyz + r3.xyz;
    // r2.xyw = r3.xyz * r2.xxx;
    // r2.xyw = float3(1,1,1) + r2.xyw;
  // } else {
    // r3.x = max(0, cb0[23].y);
    // r3.x = min(1, r3.x);
    // r3.yzw = float3(-1,-1,-1);
    // r3.yzw = cb0[21].xyz + r3.yzw;
    // r3.xyz = r3.xxx * r3.yzw;
    // r2.xyw = float3(1,1,1) + r3.xyz;
  // }
  // r2.xyw = r2.xyw;
  // r2.xyw = r2.xyw;
  // r4.xy = r4.xy;
  // r1.w = r1.w;
  // r2.z = r2.z;
  // r3.x = 0;
  // r3.y = asint(cb0[18].y);
  // r5.x = 2 * r3.y;
  // r3.y = asint(cb0[18].y);
  // r5.y = 2 * r3.y;
  // r3.y = -1;
  // r3.z = r3.x;
  // r3.w = r3.y;
  // while (true) {
    // r4.z = cmp(1 >= (int)r3.w);
    // if (r4.z == 0) break;
    // r4.z = -1;
    // r4.w = r3.z;
    // r5.z = r4.z;
    // while (true) {
      // r5.w = cmp(1 >= (int)r5.z);
      // if (r5.w == 0) break;
      // r6.x = (int)r3.w;
      // r6.y = (int)r5.z;
      // r6.xy = r6.xy / r5.xy;
      // r6.zw = r5.xy;
      // r6.xy = r6.xy + r4.xy;
      // r5.w = r1.w;
      // r7.x = r2.z;
      // r7.yz = float2(1,1) / r6.zw;
      // r8.xy = r6.xy * r6.zw;
      // r8.xy = float2(0.5,0.5) + r8.xy;
      // r8.xy = frac(r8.xy);
      // r6.xy = r6.xy * r6.zw;
      // r6.xy = float2(0.5,0.5) + r6.xy;
      // r6.xy = floor(r6.xy);
      // r6.xy = r6.xy / r6.zw;
      // r6.zw = float2(0,0) * r7.yz;
      // r6.zw = r6.xy + r6.zw;
      // r5.w = r5.w;
      // r7.x = r7.x;
      // r6.zw = r6.zw;
      // r6.z = t15.Sample(s15_s, r6.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r6.w = cb0[20].x + r6.z;
        // r6.w = cmp(r5.w >= r6.w);
        // r6.w = r6.w ? 1 : 0;
      // } else {
        // r6.z = cb0[20].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r6.w = r6.z ? 1 : 0;
      // }
      // r6.w = r6.w;
      // r6.w = r6.w;
      // r8.zw = float2(0,1) * r7.yz;
      // r8.zw = r8.zw + r6.xy;
      // r8.zw = r8.zw;
      // r6.z = t15.Sample(s15_s, r8.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r7.w = cb0[20].x + r6.z;
        // r7.w = cmp(r5.w >= r7.w);
        // r7.w = r7.w ? 1 : 0;
      // } else {
        // r6.z = cb0[20].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r7.w = r6.z ? 1 : 0;
      // }
      // r7.w = r7.w;
      // r7.w = r7.w;
      // r8.zw = float2(1,0) * r7.yz;
      // r8.zw = r8.zw + r6.xy;
      // r8.zw = r8.zw;
      // r6.z = t15.Sample(s15_s, r8.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r8.z = cb0[20].x + r6.z;
        // r8.z = cmp(r5.w >= r8.z);
        // r8.z = r8.z ? 1 : 0;
      // } else {
        // r6.z = cb0[20].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r8.z = r6.z ? 1 : 0;
      // }
      // r8.z = r8.z;
      // r8.z = r8.z;
      // r7.yz = float2(1,1) * r7.yz;
      // r6.xy = r7.yz + r6.xy;
      // r6.xy = r6.xy;
      // r6.x = t15.Sample(s15_s, r6.xy).x;
      // r6.x = r6.x;
      // r6.x = r6.x;
      // if (r7.x == 0) {
        // r6.y = cb0[20].x + r6.x;
        // r6.y = cmp(r5.w >= r6.y);
        // r6.y = r6.y ? 1 : 0;
      // } else {
        // r6.x = cb0[20].y + r6.x;
        // r5.w = cmp(r5.w >= r6.x);
        // r6.y = r5.w ? 1 : 0;
      // }
      // r6.y = r6.y;
      // r6.y = r6.y;
      // r5.w = -r6.w;
      // r5.w = r7.w + r5.w;
      // r5.w = r8.y * r5.w;
      // r5.w = r6.w + r5.w;
      // r6.x = -r8.z;
      // r6.x = r6.y + r6.x;
      // r6.x = r8.y * r6.x;
      // r6.x = r8.z + r6.x;
      // r6.y = -r5.w;
      // r6.x = r6.x + r6.y;
      // r6.x = r8.x * r6.x;
      // r5.w = r6.x + r5.w;
      // r5.w = r5.w;
      // r4.w = r5.w + r4.w;
      // r5.z = (int)r5.z + 1;
    // }
    // r3.z = r4.w;
    // r3.w = (int)r3.w + 1;
  // }
  // r1.w = r3.z / 6;
  // r1.w = r1.w;
  // r3.xyz = float3(-1,-1,-1);
  // r2.xyw = r3.xyz + r2.xyw;
  // r2.xyw = r2.xyw * r1.www;
  // r2.xyw = float3(1,1,1) + r2.xyw;
  // r2.xyw = r2.xyw;
  // r2.z = r2.z;
  // r1.xyz = r1.xyz;
  // r2.xyw = r2.xyw;
  // r1.w = -1;
  // // r1.w = (int)r1.w + asint(cb0[18].x);
  // // r1.w = cmp((int)r1.w == (int)r2.z);
  // // if (r1.w != 0) {
    // // r1.xy = float2(0.5,0.5) * r1.xy;
    // // r1.xy = r1.xy / r1.zz;
    // // r1.xy = float2(0.5,0.5) + r1.xy;
    // // r1.y = -r1.y;
    // // r1.y = 1 + r1.y;
    // // r1.z = cmp(r1.x < 0);
    // // r1.x = cmp(1 < r1.x);
    // // r1.x = (int)r1.x | (int)r1.z;
    // // r1.z = cmp(r1.y < 0);
    // // r1.x = (int)r1.z | (int)r1.x;
    // // r1.y = cmp(1 < r1.y);
    // // r1.x = (int)r1.y | (int)r1.x;
    // // if (r1.x != 0) {
      // // r2.xyw = int3(1,1,1);
    // // }
  // // }
  // r2.xyw = r2.xyw;
  // r2.xyw = r2.xyw;
  // r1.xyz = r2.xyw * r0.xyz;
  // r1.xyz = r1.xyz;
  // r2.xy = v3.zw;
  // r3.xyz = 0;//t6.Sample(s6_s, v3.xy).xyz;
  // r3.xyz = r3.xyz;
  // r3.xyz = r3.xyz;
  // r4.xyz = -cb0[1].xyz;
  // r3.xyz = r4.xyz + r3.xyz;
  // r2.yzw = r3.xyz * r2.yyy;
  // r2.yzw = cb0[1].xyz + r2.yzw;
  // r3.xyz = -r2.yzw;
  // r1.xyz = r3.xyz + r1.xyz;
  // r1.xyz = r2.xxx * r1.xyz;
  // r0.xyz = r2.yzw + r1.xyz;
  // r0.xyz = r0.xyz;
  // r0.xyz = r0.xyz;
  // r0.w = r0.w;
  // r1.yzw = int3(0,0,0);
  // r1.x = v2.x;
  // o0.xyzw = r0.xyzw;
  // o1.xyzw = r1.xyzw;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[69];                    // Offset:    0 Size:  1104
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// s0_s                              sampler      NA          NA             s0      1 
// s7_s                              sampler      NA          NA             s7      1 
// s8_s                              sampler      NA          NA             s8      1 
// s15_s                             sampler      NA          NA            s15      1 
// t0                                texture  float4          2d             t0      1 
// t7                                texture  float4          2d             t7      1 
// t8                                texture  float4          2d             t8      1 
// t15                               texture  float4          2d            t15      1 
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// CLIPDISTANCE             0   x           1     NONE   float       
// TEXCOORD                 7    yzw        1     NONE   float       
// DEPTHVALUE               0   x           2     NONE   float   x   
// TEXCOORD                 0    yz         2     NONE   float    yz 
// FOGFACTOR                0   xyzw        3     NONE   float     zw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyz 
// TEXCOORD                 4   xyz         6     NONE   float       
// WORLDVIEWNORMAL          0   xyz         7     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz         8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[69], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v2.x
dcl_input_ps linear v2.yz
dcl_input_ps linear v3.zw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.yzyy, t0.xyzw, s0
lt r1.x, r0.w, cb0[0].x
discard_nz r1.x
dp3 r1.x, v7.xyzx, v7.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v7.xyzx
dp3 r1.w, -v8.xyzx, -v8.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, -v8.xyzx
dp3_sat r2.x, r1.xyzx, r2.xyzx
mad r2.yzw, -v8.xxyz, r1.wwww, -cb0[27].xxyz
dp3 r1.w, r2.yzwy, r2.yzwy
rsq r1.w, r1.w
mul r2.yzw, r1.wwww, r2.yyzw
dp3 r1.x, r1.xyzx, -cb0[27].xyzx
add r1.x, r1.x, cb0[25].x
add r1.y, l(1.000000), cb0[25].x
div_sat r1.x, r1.x, r1.y
dp3_sat r1.y, -cb0[27].xyzx, r2.yzwy
mul r1.y, r1.y, r1.y
dp2 r1.y, r1.yyyy, cb0[25].yyyy
add r1.y, r1.y, l(-0.500000)
add r1.z, -r1.x, l(1.000000)
mul r1.w, r1.z, r1.z
mul r1.w, r1.w, r1.w
mul r1.z, r1.w, r1.z
mad r1.z, r1.y, r1.z, l(1.000000)
add r1.w, -r2.x, l(1.000000)
mul r2.x, r1.w, r1.w
mul r2.x, r2.x, r2.x
mul r1.w, r1.w, r2.x
mad r1.y, r1.y, r1.w, l(1.000000)
mul r2.xyz, r1.zzzz, cb0[32].xyzx
mul r1.yzw, r1.yyyy, r2.xxyz
mul r1.xyz, r1.xxxx, r1.yzwy
mul r2.xyz, cb0[24].xyzx, cb0[67].xyzx
mad r1.xyz, cb0[68].xyzx, r1.xyzx, r2.xyzx
mul r1.xyz, r0.xyzx, r1.xyzx
mul r1.w, r0.w, cb0[67].w
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.yzyy, t7.xyzw, s7
min r0.w, |v5.x|, |v5.z|
max r2.x, |v5.x|, |v5.z|
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r0.w, r0.w, r2.x
mul r2.x, r0.w, r0.w
mad r2.y, r2.x, l(0.020835), l(-0.085133)
mad r2.y, r2.y, r2.x, l(0.180141)
mad r2.y, r2.y, r2.x, l(-0.330299)
mad r2.x, r2.y, r2.x, l(0.999866)
mul r2.y, r0.w, r2.x
lt r2.z, |v5.z|, |v5.x|
mad r2.y, r2.y, l(-2.000000), l(1.570796)
and r2.y, r2.y, r2.z
mad r0.w, r0.w, r2.x, r2.y
lt r2.x, v5.z, -v5.z
and r2.x, r2.x, l(0xc0490fdc)
add r0.w, r0.w, r2.x
min r2.x, v5.z, v5.x
max r2.y, v5.z, v5.x
lt r2.x, r2.x, -r2.x
and r2.x, r2.x, l(0xbf800000)
ge r2.y, r2.y, -r2.y
and r2.x, r2.x, r2.y
ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.x
movc r0.w, r2.x, -r0.w, r0.w
mul r0.w, r0.w, l(0.159155)
frc r2.x, r0.w
mad r2.y, v5.y, l(-0.500000), l(0.500000)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t8.xyzw, s8
mul r0.xyz, r0.xyzx, r2.xyzx
mov r0.w, l(0)
add r0.xyzw, r1.xyzw, r0.xyzw
iadd r1.x, l(-1), cb0[18].x
itof r1.x, r1.x
lt r1.yzw, |v4.wwww|, cb0[19].xxyz
movc r1.x, r1.w, l(2.000000), r1.x
movc r1.x, r1.z, l(1.000000), r1.x
movc r1.x, r1.y, l(0), r1.x
ftoi r1.y, r1.x
ishl r1.y, r1.y, l(2)
itof r1.y, r1.y
add r2.xyzw, r1.yyyy, l(2.000000, 3.000000, 4.000000, 5.000000)
ftou r2.xyzw, r2.xyzw
mul r3.xyzw, v4.xxxx, cb0[r2.x + 0].xywz
mad r3.xyzw, cb0[r2.y + 0].xywz, v4.yyyy, r3.xyzw
mad r3.xyzw, cb0[r2.z + 0].xywz, v4.zzzz, r3.xyzw
add r2.xyzw, r3.xyzw, cb0[r2.w + 0].xywz
div r1.y, r2.w, r2.z
mul r1.zw, r2.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
div r1.zw, r1.zzzw, r2.zzzz
add r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
add r1.w, -r1.w, l(1.000000)
ilt r2.xy, l(1, 2, 0, 0), cb0[18].xxxx
movc r2.xy, r2.xyxx, l(0.500000,0.500000,0,0), l(1.000000,1.000000,0,0)
ftou r2.z, r1.x
and r2.w, r2.z, l(1)
utof r2.w, r2.w
add r1.z, r1.z, r2.w
mul r3.x, r2.x, r1.z
ult r1.z, l(1), r2.z
and r1.z, r1.z, l(0x3f800000)
add r1.z, r1.w, r1.z
mul r3.y, r2.y, r1.z
lt r1.z, l(0.000000), cb0[23].z
mov_sat r2.xy, cb0[23].zyzz
add r4.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb0[22].xyzx
mad r2.xzw, r4.xxyz, r2.xxxx, l(1.000000, 0.000000, 1.000000, 1.000000)
add r4.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb0[21].xyzx
mad r4.xyz, r2.yyyy, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
movc r2.xyz, r1.zzzz, r2.xzwx, r4.xyzx
itof r1.z, cb0[18].y
add r1.z, r1.z, r1.z
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mov r2.w, r1.x
mov r3.z, l(0)
mov r4.x, l(-1.000000)
loop 
  ftoi r3.w, r4.x
  ige r4.z, l(1), r3.w
  if_z r4.z
    break 
  endif 
  eq r4.z, r2.w, l(0.000000)
  mov r4.w, r3.z
  mov r4.y, l(-1.000000)
  loop 
    ftoi r5.x, r4.y
    ige r5.y, l(1), r5.x
    if_z r5.y
      break 
    endif 
    div r5.yz, r4.xxyx, r1.zzzz
    add r5.yz, r3.xxyx, r5.yyzy
    mad r5.yz, r5.yyzy, r1.zzzz, l(0.000000, 0.500000, 0.500000, 0.000000)
    frc r6.xy, r5.yzyy
    round_ni r5.yz, r5.yyzy
    div r5.yz, r5.yyzy, r1.zzzz
    sample_indexable(texture2d)(float,float,float,float) r5.w, r5.yzyy, t15.yzwx, s15
    add r6.zw, r5.wwww, cb0[20].xxxy
    ge r6.zw, r1.yyyy, r6.zzzw
    and r6.zw, r6.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
    movc r5.w, r4.z, r6.z, r6.w
    mad r7.xyzw, r1.wwww, l(0.000000, 1.000000, 1.000000, 0.000000), r5.yzyz
    sample_indexable(texture2d)(float,float,float,float) r6.z, r7.xyxx, t15.yzxw, s15
    add r6.zw, r6.zzzz, cb0[20].xxxy
    ge r6.zw, r1.yyyy, r6.zzzw
    and r6.zw, r6.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
    movc r6.z, r4.z, r6.z, r6.w
    sample_indexable(texture2d)(float,float,float,float) r6.w, r7.zwzz, t15.yzwx, s15
    add r7.xy, r6.wwww, cb0[20].xyxx
    ge r7.xy, r1.yyyy, r7.xyxx
    and r7.xy, r7.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
    movc r6.w, r4.z, r7.x, r7.y
    add r5.yz, r1.wwww, r5.yyzy
    sample_indexable(texture2d)(float,float,float,float) r5.y, r5.yzyy, t15.yxzw, s15
    add r5.yz, r5.yyyy, cb0[20].xxyx
    ge r5.yz, r1.yyyy, r5.yyzy
    and r5.yz, r5.yyzy, l(0, 0x3f800000, 0x3f800000, 0)
    movc r5.y, r4.z, r5.y, r5.z
    add r5.z, -r5.w, r6.z
    mad r5.z, r6.y, r5.z, r5.w
    add r5.y, -r6.w, r5.y
    mad r5.y, r6.y, r5.y, r6.w
    add r5.y, -r5.z, r5.y
    mad r5.y, r6.x, r5.y, r5.z
    add r4.w, r4.w, r5.y
    iadd r5.x, r5.x, l(1)
    itof r4.y, r5.x
  endloop 
  mov r3.z, r4.w
  iadd r3.w, r3.w, l(1)
  itof r4.x, r3.w
endloop 
mul r1.x, r3.z, l(0.166667)
add r1.yzw, r2.xxyz, l(0.000000, -1.000000, -1.000000, -1.000000)
mad r1.xyz, r1.yzwy, r1.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, -cb0[1].xyzx, v3.wwww, cb0[1].xyzx
mad r0.xyz, r1.xyzx, r0.xyzx, -r2.xyzx
mad o0.xyz, v3.zzzz, r0.xyzx, r2.xyzx
mov o0.w, r0.w
mov o1.x, v2.x
mov o1.yzw, l(0,0,0,0)
ret 
// Approximately 183 instruction slots used
