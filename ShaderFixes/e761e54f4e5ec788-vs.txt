// ---- Created with 3Dmigoto v1.3.16 on Tue Feb 13 16:36:39 2024
//cbuffer cb0 : register(b0)
//{
// float4 cb0[525];
//}
//
//
//
//
//#define cmp -
//
//float sqrt1(const float n)
//{
//   int i;
//   float f;
//   i = 0x5F375A86 - (asint(n) >> 1);
//   f = asfloat(i);
//   return 1.0f / ((3 - n * f * f) * n * f * 0.5);
//}
//
//void main(
// int4 v0 : BLENDINDICES0,
// float4 v1 : NORMAL0,
// float3 v2 : POSITION0,
// float2 v3 : TEXCOORD0,
// float4 v4 : BLENDWEIGHT0,
// out float4 o0 : SV_POSITION0,
// out float4 o1 : TEXCOORD6,
// out float2 o2 : TEXCOORD0)
//{
// float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
// uint4 bitmask, uiDest;
// float4 fDest;
//
// r0.xyzw = v4.xyzw;
// r1.x = floor(v0.x) * 4;
// r2.x = cb0[r1.x+12].x * r0.x;
// r2.y = cb0[r1.x+13].x * r0.x;
// r2.z = cb0[r1.x+14].x * r0.x;
// r2.w = cb0[r1.x+15].x * r0.x;
// r3.x = cb0[r1.x+12].y * r0.x;
// r3.y = cb0[r1.x+13].y * r0.x;
// r3.z = cb0[r1.x+14].y * r0.x;
// r3.w = cb0[r1.x+15].y * r0.x;
// r4.x = cb0[r1.x+12].z * r0.x;
// r4.y = cb0[r1.x+13].z * r0.x;
// r4.z = cb0[r1.x+14].z * r0.x;
// r4.w = cb0[r1.x+15].z * r0.x;
// r5.x = cb0[r1.x+12].w * r0.x;
// r5.y = cb0[r1.x+13].w * r0.x;
// r5.z = cb0[r1.x+14].w * r0.x;
// r5.w = cb0[r1.x+15].w * r0.x;
// r0.x = floor(v0.y) * 4;
// r1.x = cb0[r0.x+12].x * r0.y;
// r1.y = cb0[r0.x+13].x * r0.y;
// r1.z = cb0[r0.x+14].x * r0.y;
// r1.w = cb0[r0.x+15].x * r0.y;
// r6.x = cb0[r0.x+12].y * r0.y;
// r6.y = cb0[r0.x+13].y * r0.y;
// r6.z = cb0[r0.x+14].y * r0.y;
// r6.w = cb0[r0.x+15].y * r0.y;
// r7.x = cb0[r0.x+12].z * r0.y;
// r7.y = cb0[r0.x+13].z * r0.y;
// r7.z = cb0[r0.x+14].z * r0.y;
// r7.w = cb0[r0.x+15].z * r0.y;
// r8.x = cb0[r0.x+12].w * r0.y;
// r8.y = cb0[r0.x+13].w * r0.y;
// r8.z = cb0[r0.x+14].w * r0.y;
// r8.w = cb0[r0.x+15].w * r0.y;
// r1.xyzw = r2.xyzw + r1.xyzw;
// r2.xyzw = r6.xyzw + r3.xyzw;
// r3.xyzw = r7.xyzw + r4.xyzw;
// r4.xyzw = r8.xyzw + r5.xyzw;
// r0.x = floor(v0.z) * 4;
// r5.x = cb0[r0.x+12].x * r0.z;
// r5.y = cb0[r0.x+13].x * r0.z;
// r5.z = cb0[r0.x+14].x * r0.z;
// r5.w = cb0[r0.x+15].x * r0.z;
// r6.x = cb0[r0.x+12].y * r0.z;
// r6.y = cb0[r0.x+13].y * r0.z;
// r6.z = cb0[r0.x+14].y * r0.z;
// r6.w = cb0[r0.x+15].y * r0.z;
// r7.x = cb0[r0.x+12].z * r0.z;
// r7.y = cb0[r0.x+13].z * r0.z;
// r7.z = cb0[r0.x+14].z * r0.z;
// r7.w = cb0[r0.x+15].z * r0.z;
// r8.x = cb0[r0.x+12].w * r0.z;
// r8.y = cb0[r0.x+13].w * r0.z;
// r8.z = cb0[r0.x+14].w * r0.z;
// r8.w = cb0[r0.x+15].w * r0.z;
// r1.xyzw = r5.xyzw + r1.xyzw;
// r2.xyzw = r6.xyzw + r2.xyzw;
// r3.xyzw = r7.xyzw + r3.xyzw;
// r4.xyzw = r8.xyzw + r4.xyzw;
// r0.x = floor(v0.w) * 4;
// r5.x = cb0[r0.x+12].x * r0.w;
// r5.y = cb0[r0.x+13].x * r0.w;
// r5.z = cb0[r0.x+14].x * r0.w;
// r5.w = cb0[r0.x+15].x * r0.w;
// r6.x = cb0[r0.x+12].y * r0.w;
// r6.y = cb0[r0.x+13].y * r0.w;
// r6.z = cb0[r0.x+14].y * r0.w;
// r6.w = cb0[r0.x+15].y * r0.w;
// r7.x = cb0[r0.x+12].z * r0.w;
// r7.y = cb0[r0.x+13].z * r0.w;
// r7.z = cb0[r0.x+14].z * r0.w;
// r7.w = cb0[r0.x+15].z * r0.w;
// r8.x = cb0[r0.x+12].w * r0.w;
// r8.y = cb0[r0.x+13].w * r0.w;
// r8.z = cb0[r0.x+14].w * r0.w;
// r8.w = cb0[r0.x+15].w * r0.w;
// r0.xyzw = r5.xyzw + r1.xyzw;
// r1.xyzw = r6.xyzw + r2.xyzw;
// r2.xyzw = r7.xyzw + r3.xyzw;
// r3.xyzw = r8.xyzw + r4.xyzw;
// r0.x = r0.x;
// r0.y = r0.y;
// r0.z = r0.z;
// r0.w = r0.w;
// r1.x = r1.x;
// r1.y = r1.y;
// r1.z = r1.z;
// r1.w = r1.w;
// r2.x = r2.x;
// r2.y = r2.y;
// r2.z = r2.z;
// r2.w = r2.w;
// r3.xyzw = r3.xyzw;
// r4.xyzw = cb0[4].xyzw * r0.xxxx;
// r5.xyzw = cb0[5].xyzw * r1.xxxx;
// r4.xyzw = r5.xyzw + r4.xyzw;
// r5.xyzw = cb0[6].xyzw * r2.xxxx;
// r4.xyzw = r5.xyzw + r4.xyzw;
// r5.xyzw = cb0[7].xyzw * r3.xxxx;
// r4.xyzw = r5.xyzw + r4.xyzw;
// r5.xyzw = cb0[4].xyzw * r0.yyyy;
// r6.xyzw = cb0[5].xyzw * r1.yyyy;
// r5.xyzw = r6.xyzw + r5.xyzw;
// r6.xyzw = cb0[6].xyzw * r2.yyyy;
// r5.xyzw = r6.xyzw + r5.xyzw;
// r6.xyzw = cb0[7].xyzw * r3.yyyy;
// r5.xyzw = r6.xyzw + r5.xyzw;
// r6.xyzw = cb0[4].xyzw * r0.zzzz;
// r7.xyzw = cb0[5].xyzw * r1.zzzz;
// r6.xyzw = r7.xyzw + r6.xyzw;
// r7.xyzw = cb0[6].xyzw * r2.zzzz;
// r6.xyzw = r7.xyzw + r6.xyzw;
// r7.xyzw = cb0[7].xyzw * r3.zzzz;
// r6.xyzw = r7.xyzw + r6.xyzw;
// r0.xyzw = cb0[4].xyzw * r0.wwww;
// r1.xyzw = cb0[5].xyzw * r1.wwww;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.xyzw = cb0[6].xyzw * r2.wwww;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.xyzw = cb0[7].xyzw * r3.wwww;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.x = r4.x;
// r1.y = r5.x;
// r1.z = r6.x;
// r1.w = r0.x;
// r2.x = r4.y;
// r2.y = r5.y;
// r2.z = r6.y;
// r2.w = r0.y;
// r3.x = r4.z;
// r3.y = r5.z;
// r3.z = r6.z;
// r3.w = r0.z;
// r0.x = r4.w;
// r0.y = r5.w;
// r0.z = r6.w;
// r0.w = r0.w;
// r4.xyz = v2.xyz;
// r4.w = 1;
// r5.x = dot(r1.xyzw, r4.xyzw);
// r5.y = dot(r2.xyzw, r4.xyzw);
// r5.z = dot(r3.xyzw, r4.xyzw);
// r4.x = dot(r0.xyzw, r4.xyzw);
// r6.w = 0;
// r6.xyz = v1.xyz;
// r1.x = 0; //dot(r1.xyzw, r6.xyzw);
// r1.y = 0; //dot(r2.xyzw, r6.xyzw);
// r1.z = 0; //dot(r3.xyzw, r6.xyzw);
// r1.w = 0; //dot(r0.xyzw, r6.xyzw);
// r0.x = 0; //dot(r1.xyzw, r1.xyzw);
// r0.x = sqrt1(r0.x);
// r0.xyz = r1.xyz; //r1.xyz * r0.xxx;
// r0.xyz = cb0[524].xxx * r0.xyz;
// r0.xyz = r5.xyz + r0.xyz;
// r1.xyzw = cb0[0].xyzw * r0.xxxx;
// r2.xyzw = cb0[1].xyzw * r0.yyyy;
// r1.xyzw = r2.xyzw + r1.xyzw;
// r0.xyzw = cb0[2].xyzw * r0.zzzz;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.xyzw = cb0[3].xyzw * r4.xxxx;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.xyzw = cb0[8].xyzw * r0.xxxx;
// r2.xyzw = cb0[9].xyzw * r0.yyyy;
// r1.xyzw = r2.xyzw + r1.xyzw;
// r2.xyzw = cb0[10].xyzw * r0.zzzz;
// r1.xyzw = r2.xyzw + r1.xyzw;
// r0.xyzw = cb0[11].xyzw * r0.wwww;
// r0.xyzw = r1.xyzw + r0.xyzw;
// r1.xy = v3.xy;
// r0.xyzw = r0.xyzw;
// o0.xyzw = r0.xyzw;
// r0.z = r0.z - 0.000152;
// o1.xyzw = r0.xyzw;
// o2.xy = r1.xy;
// return;
//}
//

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[525];                   // Offset:    0 Size:  8400
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// POSITION                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 6   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[525], dynamicIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 22
itof r0.xyzw, v0.xyzw
mad r1.xyzw, r0.xxxx, l(4.000000, 4.000000, 4.000000, 4.000000), l(12.000000, 13.000000, 14.000000, 15.000000)
ftou r1.xyzw, r1.xyzw
mul r2.xyzw, v4.xxxx, cb0[r1.x + 0].xyzw
mov r3.x, r2.x
mul r4.xyzw, v4.xxxx, cb0[r1.y + 0].xzyw
mov r3.y, r4.x
mul r5.xyzw, v4.xxxx, cb0[r1.z + 0].xywz
mul r1.xyzw, v4.xxxx, cb0[r1.w + 0].xyzw
mov r3.z, r5.x
mov r3.w, r1.x
mad r6.xyzw, r0.yyyy, l(4.000000, 4.000000, 4.000000, 4.000000), l(12.000000, 13.000000, 14.000000, 15.000000)
ftou r6.xyzw, r6.xyzw
mul r7.xyzw, v4.yyyy, cb0[r6.x + 0].xyzw
mov r8.x, r7.x
mul r9.xyzw, v4.yyyy, cb0[r6.y + 0].xzyw
mov r8.y, r9.x
mul r10.xyzw, v4.yyyy, cb0[r6.z + 0].xywz
mul r6.xyzw, v4.yyyy, cb0[r6.w + 0].xyzw
mov r8.z, r10.x
mov r8.w, r6.x
add r3.xyzw, r3.xyzw, r8.xyzw
mad r8.xyzw, r0.zzzz, l(4.000000, 4.000000, 4.000000, 4.000000), l(12.000000, 13.000000, 14.000000, 15.000000)
mad r0.xyzw, r0.wwww, l(4.000000, 4.000000, 4.000000, 4.000000), l(12.000000, 13.000000, 14.000000, 15.000000)
ftou r0.xyzw, r0.xyzw
ftou r8.xyzw, r8.xyzw
mul r11.xyzw, v4.zzzz, cb0[r8.x + 0].xyzw
mov r12.x, r11.x
mul r13.xyzw, v4.zzzz, cb0[r8.y + 0].xzyw
mov r12.y, r13.x
mul r14.xyzw, v4.zzzz, cb0[r8.z + 0].xywz
mul r8.xyzw, v4.zzzz, cb0[r8.w + 0].xyzw
mov r12.z, r14.x
mov r12.w, r8.x
add r3.xyzw, r3.xyzw, r12.xyzw
mul r12.xyzw, v4.wwww, cb0[r0.x + 0].xyzw
mov r15.x, r12.x
mul r16.xyzw, v4.wwww, cb0[r0.y + 0].xzyw
mov r15.y, r16.x
mul r17.xyzw, v4.wwww, cb0[r0.z + 0].xywz
mul r0.xyzw, v4.wwww, cb0[r0.w + 0].xyzw
mov r15.z, r17.x
mov r15.w, r0.x
add r3.xyzw, r3.xyzw, r15.xyzw
mul r15.xyzw, r3.xxxx, cb0[4].xyzw
mov r18.x, r12.y
mov r18.y, r16.z
mov r18.z, r17.y
mov r18.w, r0.y
mov r19.x, r11.y
mov r19.y, r13.z
mov r19.z, r14.y
mov r19.w, r8.y
mov r20.x, r7.y
mov r20.y, r9.z
mov r20.z, r10.y
mov r20.w, r6.y
mov r21.x, r2.y
mov r21.y, r4.z
mov r21.z, r5.y
mov r21.w, r1.y
add r20.xyzw, r20.xyzw, r21.xyzw
add r19.xyzw, r19.xyzw, r20.xyzw
add r18.xyzw, r18.xyzw, r19.xyzw
mad r15.xyzw, cb0[5].xyzw, r18.xxxx, r15.xyzw
mov r9.x, r7.z
mov r10.x, r7.w
mov r10.y, r9.w
mov r9.z, r10.w
mov r9.w, r6.z
mov r10.w, r6.w
mov r4.x, r2.z
mov r5.x, r2.w
mov r5.y, r4.w
mov r4.z, r5.w
mov r4.w, r1.z
mov r5.w, r1.w
add r1.xyzw, r5.xyzw, r10.xyzw
add r2.xyzw, r4.xyzw, r9.xyzw
mov r13.x, r11.z
mov r14.x, r11.w
mov r14.y, r13.w
mov r13.z, r14.w
mov r13.w, r8.z
mov r14.w, r8.w
add r1.xyzw, r1.xyzw, r14.xyzw
add r2.xyzw, r2.xyzw, r13.xyzw
mov r16.x, r12.z
mov r17.x, r12.w
mov r17.y, r16.w
mov r16.z, r17.w
mov r16.w, r0.z
mov r17.w, r0.w
add r0.xyzw, r1.xyzw, r17.xyzw
add r1.xyzw, r2.xyzw, r16.xyzw
mad r2.xyzw, cb0[6].xyzw, r1.xxxx, r15.xyzw
mad r2.xyzw, cb0[7].xyzw, r0.xxxx, r2.xyzw
mov r4.x, r2.x
mul r5.xyzw, r3.yyyy, cb0[4].xyzw
mad r5.xyzw, cb0[5].xyzw, r18.yyyy, r5.xyzw
mad r5.xyzw, cb0[6].xyzw, r1.yyyy, r5.xyzw
mad r5.xyzw, cb0[7].xzyw, r0.yyyy, r5.xzyw
mov r4.y, r5.x
mul r6.xyzw, r3.zzzz, cb0[4].xyzw
mul r3.xyzw, r3.wwww, cb0[4].xyzw
mad r3.xyzw, cb0[5].xyzw, r18.wwww, r3.xyzw
mad r6.xyzw, cb0[5].xyzw, r18.zzzz, r6.xyzw
mad r6.xyzw, cb0[6].xyzw, r1.zzzz, r6.xyzw
mad r1.xyzw, cb0[6].xyzw, r1.wwww, r3.xyzw
mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
mad r0.xyzw, cb0[7].xywz, r0.zzzz, r6.xywz
mov r4.z, r0.x
mov r4.w, r1.x
mov r3.xyz, v2.xyzx
mov r3.w, l(1.000000)
dp4 r1.x, r4.xyzw, r3.xyzw
mul r4.xyzw, r1.xxxx, cb0[0].xyzw
mov r6.x, r2.y
mov r6.y, r5.z
mov r6.z, r0.y
mov r6.w, r1.y
dp4 r1.x, r6.xyzw, r3.xyzw
mad r4.xyzw, cb0[1].xyzw, r1.xxxx, r4.xyzw
mov r5.x, r2.z
mov r0.x, r2.w
mov r0.y, r5.w
mov r5.z, r0.w
mov r5.w, r1.z
mov r0.w, r1.w
dp4 r0.x, r0.xyzw, r3.xyzw
dp4 r0.y, r5.xyzw, r3.xyzw
mad r1.xyzw, cb0[2].xyzw, r0.yyyy, r4.xyzw
mad r0.xyzw, cb0[3].xyzw, r0.xxxx, r1.xyzw
mul r1.xyzw, r0.xxxx, cb0[8].xyzw
mad r1.xyzw, cb0[9].xyzw, r0.yyyy, r1.xyzw
mad r1.xyzw, cb0[10].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb0[11].xyzw, r0.wwww, r1.xyzw
mov o0.xyzw, r0.xyzw
add o1.xyzw, r0.xyzw, l(0.000000, 0.000000, -0.000152, 0.000000)
mov o2.xy, v3.xyxx
ret 
// Approximately 141 instruction slots used
