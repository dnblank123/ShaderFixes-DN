  // r2.x = (int)r2.x + asint(cb0[62].x);
  // r2.y = -r1.w;
  // r1.w = max(r2.y, r1.w);
  // r2.y = cmp(r1.w < cb0[63].x);
  // if (r2.y != 0) {
    // r2.z = 0;
  // }
  // if (r2.y == 0) {
    // r2.y = cmp(r1.w < cb0[63].y);
    // if (r2.y != 0) {
      // r2.z = 1;
    // }
    // if (r2.y == 0) {
      // r1.w = cmp(r1.w < cb0[63].z);
      // if (r1.w != 0) {
        // r2.z = 2;
      // }
      // if (r1.w == 0) {
        // r2.z = r2.x;
      // }
    // }
  // }
  // r2.z = r2.z;
  // r1.w = (int)r2.z * 4;
  // r3.xyzw = cb0[r1.w+46].xyzw * r1.xxxx;
  // r4.xyzw = cb0[r1.w+47].xyzw * r1.yyyy;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r4.xyzw = cb0[r1.w+48].xyzw * r1.zzzz;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r1.xyzw = cb0[r1.w+49].xyzw * float4(1,1,1,1);
  // r1.xyzw = r3.xywz + r1.xywz;
  // r1.w = r1.w / r1.z;
  // r2.xy = float2(0.5,0.5) * r1.xy;
  // r2.xy = r2.xy / r1.zz;
  // r2.xy = float2(0.5,0.5) + r2.xy;
  // r2.y = -r2.y;
  // r2.y = 1 + r2.y;
  // r2.x = r2.x;
  // r2.y = r2.y;
  // r2.z = r2.z;
  // r3.xy = float2(1,1);
  // r2.w = cmp(1 < asint(cb0[62].x));
  // if (r2.w != 0) {
    // r3.x = 0.5;
  // }
  // r2.w = cmp(2 < asint(cb0[62].x));
  // if (r2.w != 0) {
    // r3.y = 0.5;
  // }
  // r2.w = 2;
  // r2.w = (uint)r2.z % (uint)r2.w;
  // r2.w = (int)r2.w;
  // r2.x = r2.w + r2.x;
  // r4.x = r2.x * r3.x;
  // r2.x = 0;
  // r2.w = 1;
  // r2.w = cmp((uint)r2.w < (uint)r2.z);
  // if (r2.w != 0) {
    // r2.x = 1;
  // }
  // r2.x = (int)r2.x;
  // r2.x = r2.x + r2.y;
  // r4.y = r2.x * r3.y;
  // r4.x = r4.x;
  // r4.y = r4.y;
  // r4.xy = r4.xy;
  // r2.x = cmp(0 < cb0[67].z);
  // if (r2.x != 0) {
    // r2.x = max(0, cb0[67].z);
    // r2.x = min(1, r2.x);
    // r3.xyz = float3(-1,-1,-1);
    // r3.xyz = cb0[66].xyz + r3.xyz;
    // r2.xyw = r3.xyz * r2.xxx;
    // r2.xyw = float3(1,1,1) + r2.xyw;
  // } else {
    // r3.x = max(0, cb0[67].y);
    // r3.x = min(1, r3.x);
    // r3.yzw = float3(-1,-1,-1);
    // r3.yzw = cb0[65].xyz + r3.yzw;
    // r3.xyz = r3.xxx * r3.yzw;
    // r2.xyw = float3(1,1,1) + r3.xyz;
  // }
  // r2.xyw = r2.xyw;
  // r2.xyw = r2.xyw;
  // r4.xy = r4.xy;
  // r1.w = r1.w;
  // r2.z = r2.z;
  // r3.x = 0;
  // r3.y = asint(cb0[62].y);
  // r5.x = 2 * r3.y;
  // r3.y = asint(cb0[62].y);
  // r5.y = 2 * r3.y;
  // r3.y = -1;
  // r3.z = r3.x;
  // r3.w = r3.y;
  // while (true) {
    // r4.z = cmp(1 >= (int)r3.w);
    // if (r4.z == 0) break;
    // r4.z = -1;
    // r4.w = r3.z;
    // r5.z = r4.z;
    // while (true) {
      // r5.w = cmp(1 >= (int)r5.z);
      // if (r5.w == 0) break;
      // r6.x = (int)r3.w;
      // r6.y = (int)r5.z;
      // r6.xy = r6.xy / r5.xy;
      // r6.zw = r5.xy;
      // r6.xy = r6.xy + r4.xy;
      // r5.w = r1.w;
      // r7.x = r2.z;
      // r7.yz = float2(1,1) / r6.zw;
      // r8.xy = r6.xy * r6.zw;
      // r8.xy = float2(0.5,0.5) + r8.xy;
      // r8.xy = frac(r8.xy);
      // r6.xy = r6.xy * r6.zw;
      // r6.xy = float2(0.5,0.5) + r6.xy;
      // r6.xy = floor(r6.xy);
      // r6.xy = r6.xy / r6.zw;
      // r6.zw = float2(0,0) * r7.yz;
      // r6.zw = r6.xy + r6.zw;
      // r5.w = r5.w;
      // r7.x = r7.x;
      // r6.zw = r6.zw;
      // r6.z = t15.Sample(s15_s, r6.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r6.w = cb0[64].x + r6.z;
        // r6.w = cmp(r5.w >= r6.w);
        // r6.w = r6.w ? 1 : 0;
      // } else {
        // r6.z = cb0[64].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r6.w = r6.z ? 1 : 0;
      // }
      // r6.w = r6.w;
      // r6.w = r6.w;
      // r8.zw = float2(0,1) * r7.yz;
      // r8.zw = r8.zw + r6.xy;
      // r8.zw = r8.zw;
      // r6.z = t15.Sample(s15_s, r8.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r7.w = cb0[64].x + r6.z;
        // r7.w = cmp(r5.w >= r7.w);
        // r7.w = r7.w ? 1 : 0;
      // } else {
        // r6.z = cb0[64].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r7.w = r6.z ? 1 : 0;
      // }
      // r7.w = r7.w;
      // r7.w = r7.w;
      // r8.zw = float2(1,0) * r7.yz;
      // r8.zw = r8.zw + r6.xy;
      // r8.zw = r8.zw;
      // r6.z = t15.Sample(s15_s, r8.zw).x;
      // r6.z = r6.z;
      // r6.z = r6.z;
      // if (r7.x == 0) {
        // r8.z = cb0[64].x + r6.z;
        // r8.z = cmp(r5.w >= r8.z);
        // r8.z = r8.z ? 1 : 0;
      // } else {
        // r6.z = cb0[64].y + r6.z;
        // r6.z = cmp(r5.w >= r6.z);
        // r8.z = r6.z ? 1 : 0;
      // }
      // r8.z = r8.z;
      // r8.z = r8.z;
      // r7.yz = float2(1,1) * r7.yz;
      // r6.xy = r7.yz + r6.xy;
      // r6.xy = r6.xy;
      // r6.x = t15.Sample(s15_s, r6.xy).x;
      // r6.x = r6.x;
      // r6.x = r6.x;
      // if (r7.x == 0) {
        // r6.y = cb0[64].x + r6.x;
        // r6.y = cmp(r5.w >= r6.y);
        // r6.y = r6.y ? 1 : 0;
      // } else {
        // r6.x = cb0[64].y + r6.x;
        // r5.w = cmp(r5.w >= r6.x);
        // r6.y = r5.w ? 1 : 0;
      // }
      // r6.y = r6.y;
      // r6.y = r6.y;
      // r5.w = -r6.w;
      // r5.w = r7.w + r5.w;
      // r5.w = r8.y * r5.w;
      // r5.w = r6.w + r5.w;
      // r6.x = -r8.z;
      // r6.x = r6.y + r6.x;
      // r6.x = r8.y * r6.x;
      // r6.x = r8.z + r6.x;
      // r6.y = -r5.w;
      // r6.x = r6.x + r6.y;
      // r6.x = r8.x * r6.x;
      // r5.w = r6.x + r5.w;
      // r5.w = r5.w;
      // r4.w = r5.w + r4.w;
      // r5.z = (int)r5.z + 1;
    // }
    // r3.z = r4.w;
    // r3.w = (int)r3.w + 1;
  // }
  // r1.w = r3.z / 9;
  // r1.w = r1.w;
  // r3.xyz = float3(-1,-1,-1);
  // r2.xyw = r3.xyz + r2.xyw;
  // r2.xyw = r2.xyw * r1.www;
  r2.xyw = 1;//float3(1,1,1) + r2.xyw;
  // r2.xyw = r2.xyw;
  // r2.z = r2.z;
  // r1.xyz = r1.xyz;
  // r2.xyw = r2.xyw;
  // r1.w = -1;
  // r1.w = (int)r1.w + asint(cb0[62].x);
  // r1.w = cmp((int)r1.w == (int)r2.z);
  // if (r1.w != 0) {
    // r1.xy = float2(0.5,0.5) * r1.xy;
    // r1.xy = r1.xy / r1.zz;
    // r1.xy = float2(0.5,0.5) + r1.xy;
    // r1.y = -r1.y;
    // r1.y = 1 + r1.y;
    // r1.z = cmp(r1.x < 0);
    // r1.x = cmp(1 < r1.x);
    // r1.x = (int)r1.x | (int)r1.z;
    // r1.z = cmp(r1.y < 0);
    // r1.x = (int)r1.z | (int)r1.x;
    // r1.y = cmp(1 < r1.y);
    // r1.x = (int)r1.y | (int)r1.x;
    // if (r1.x != 0) {
      // r2.xyw = int3(1,1,1);
    // }
  // }