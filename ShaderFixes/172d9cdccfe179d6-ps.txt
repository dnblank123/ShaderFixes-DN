//// fs grass
// Texture2D<float4> t15 : register(t15);

// Texture2D<float4> t6 : register(t6);

// Texture2D<float4> t0 : register(t0);

// SamplerState s15_s : register(s15);

// SamplerState s6_s : register(s6);

// SamplerState s0_s : register(s0);

// cbuffer cb0 : register(b0)
// {
  // float4 cb0[31];
// }




// #define cmp -


// void main(
  // float4 v0 : SV_POSITION0,
  // float3 v1 : TEXCOORD7,
  // float w1 : DEPTHVALUE0,
  // float4 v2 : FOGFACTOR0,
  // float4 v3 : TEXCOORD6,
  // float4 v4 : TEXCOORD0,
  // float3 v5 : TEXCOORD4,
  // float3 v6 : WORLDVIEWNORMAL0,
  // float3 v7 : WORLDVIEWPOSITION0,
  // out float4 o0 : SV_TARGET0,
  // out float4 o1 : SV_TARGET1)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.xy = float2(1.32679486e-006,1);
  // r1.xyzw = t0.Sample(s0_s, v4.xy).xyzw;
  // r1.xyzw = r1.xyzw;
  // r2.xyz = cb0[29].xyz * cb0[23].xyz;
  // r3.xyz = cb0[24].xyz / cb0[24].www;
  // r0.z = -0.5;
  // r0.z = 1 + r0.z;
  // r0.z = cb0[24].w * r0.z;
  // r4.xyz = float3(0.5,0.5,0.5) + r0.zzz;
  // r0.zw = float2(-0.699999988,-0.699999988);
  // r0.zw = v4.xy + r0.zw;
  // r0.x = dot(r0.zw, r0.xy);
  // r0.x = 0.200000003 + r0.x;
  // r0.yzw = float3(0.850000024,0.850000024,0.850000024) * r1.xyz;
  // r0.x = 0.400000006 * r0.x;
  // r1.xyz = -r0.yzw;
  // r1.xyz = float3(0.150000006,0.150000006,0.150000006) + r1.xyz;
  // r1.xyz = r1.xyz * r0.xxx;
  // r0.xyz = r1.xyz + r0.yzw;
  // r1.xyz = cb0[30].xyz + r2.xyz;
  // r0.xyz = r1.xyz * r0.xyz;
  // r0.xyz = r0.xyz * r3.xyz;
  // r0.xyz = r0.xyz * r4.xyz;
  // r2.w = cb0[30].w * r1.w;
  // r1.xyz = v3.xyz;
  // r0.w = v3.w;
  // r0.w = r0.w;
  // r3.x = -1;
  // r3.x = floor(r3.x) + asint(cb0[18].x);
  // r3.y = -r0.w;
  // r0.w = max(r3.y, r0.w);
  // r3.y = cmp(r0.w < cb0[19].x);
  // if (r3.y != 0) {
    // r3.z = 0;
  // }
  // if (r3.y == 0) {
    // r3.y = cmp(r0.w < cb0[19].y);
    // if (r3.y != 0) {
      // r3.z = 1;
    // }
    // if (r3.y == 0) {
      // r0.w = cmp(r0.w < cb0[19].z);
      // if (r0.w != 0) {
        // r3.z = 2;
      // }
      // if (r0.w == 0) {
        // r3.z = r3.x;
      // }
    // }
  // }
  // r0.w = floor(r3.z) * 4;
  // r4.xyzw = cb0[r0.w+2].xyzw * r1.xxxx;
  // r5.xyzw = cb0[r0.w+3].xyzw * r1.yyyy;
  // r4.xyzw = r5.xyzw + r4.xyzw;
  // r5.xyzw = cb0[r0.w+4].xyzw * r1.zzzz;
  // r4.xyzw = r5.xyzw + r4.xyzw;
  // r5.xyzw = cb0[r0.w+5].xyzw * float4(1,1,1,1);
  // r4.xyzw = r5.xywz + r4.xywz;
  // r0.w = r4.w / r4.z;
  // r1.xy = float2(0.5,0.5) * r4.xy;
  // r1.xy = r1.xy / r4.zz;
  // r1.xy = float2(0.5,0.5) + r1.xy;
  // r1.y = -r1.y;
  // r1.y = 1 + r1.y;
  // r1.x = r1.x;
  // r1.y = r1.y;
  // r3.z = r3.z;
  // r3.xy = float2(1,1);
  // r1.z = cmp(1 < asint(cb0[18].x));
  // if (r1.z != 0) {
    // r3.x = 0.5;
  // }
  // r1.z = cmp(2 < asint(cb0[18].x));
  // if (r1.z != 0) {
    // r3.y = 0.5;
  // }
  // r1.z = 2;
  // r1.z = (uint)r3.z % (uint)r1.z;
  // r1.z = floor(r1.z);
  // r1.x = r1.z + r1.x;
  // r5.x = r1.x * r3.x;
  // r1.x = 0;
  // r1.z = 1;
  // r1.z = cmp((uint)r1.z < (uint)r3.z);
  // if (r1.z != 0) {
    // r1.x = 1;
  // }
  // r1.x = floor(r1.x);
  // r1.x = r1.x + r1.y;
  // r5.y = r1.x * r3.y;
  // r5.x = r5.x;
  // r5.y = r5.y;
  // r5.xy = r5.xy;
  // r1.x = max(0, cb0[22].x);
  // r1.x = min(1, r1.x);
  // r3.xyw = float3(-1,-1,-1);
  // r3.xyw = cb0[21].xyz + r3.xyw;
  // r1.xyz = r3.xyw * r1.xxx;
  // r1.xyz = float3(1,1,1) + r1.xyz;
  // r5.xy = r5.xy;
  // r0.w = r0.w;
  // r3.z = r3.z;
  // r3.x = 0;
  ////r3.y = asint(cb0[18].y);
  // r6.x = 1024;
  ////r3.y = asint(cb0[18].y);
  // r6.y = 1024;
  // r3.y = -1;
  // r3.w = r3.x;
  // r4.w = r3.y;
    // r5.z = -1;
    // r5.w = r3.w;
    // r6.z = r5.z;
      // r7.x = floor(r4.w);
      // r7.y = floor(r6.z);
      // r7.xy = r7.xy / r6.xy;
      // r7.zw = r6.xy;
      // r7.xy = r7.xy + r5.xy;
      // r6.w = r0.w;
      // r8.x = r3.z;
      // r8.yz = float2(1,1) / r7.zw;
      // r9.xy = r7.xy * r7.zw;
      // r9.xy = float2(0.5,0.5) + r9.xy;
      // r9.xy = frac(r9.xy);
      // r7.xy = r7.xy * r7.zw;
      // r7.xy = float2(0.5,0.5) + r7.xy;
      // r7.xy = floor(r7.xy);
      // r7.xy = r7.xy / r7.zw;
      // r7.zw = float2(0,0) * r8.yz;
      // r7.zw = r7.xy + r7.zw;
      // r6.w = r6.w;
      // r8.x = r8.x;
      // r7.zw = r7.zw;
      // r7.z = t15.Sample(s15_s, r7.zw).x;
      // r7.z = r7.z;
      // r7.z = r7.z;
      // if (r8.x == 0) {
        // r7.w = cb0[20].x + r7.z;
        // r7.w = cmp(r6.w >= r7.w);
        // r7.w = r7.w ? 1 : 0;
      // } else {
        // r7.z = cb0[20].y + r7.z;
        // r7.z = cmp(r6.w >= r7.z);
        // r7.w = r7.z ? 1 : 0;
      // }
      // r7.w = r7.w;
      // r7.w = r7.w;
      // r9.zw = float2(0,1) * r8.yz;
      // r9.zw = r9.zw + r7.xy;
      // r9.zw = r9.zw;
      // r7.z = t15.Sample(s15_s, r9.zw).x;
      // r7.z = r7.z;
      // r7.z = r7.z;
      // if (r8.x == 0) {
        // r8.w = cb0[20].x + r7.z;
        // r8.w = cmp(r6.w >= r8.w);
        // r8.w = r8.w ? 1 : 0;
      // } else {
        // r7.z = cb0[20].y + r7.z;
        // r7.z = cmp(r6.w >= r7.z);
        // r8.w = r7.z ? 1 : 0;
      // }
      // r8.w = r8.w;
      // r8.w = r8.w;
      // r9.zw = float2(1,0) * r8.yz;
      // r9.zw = r9.zw + r7.xy;
      // r9.zw = r9.zw;
      // r7.z = t15.Sample(s15_s, r9.zw).x;
      // r7.z = r7.z;
      // r7.z = r7.z;
      // if (r8.x == 0) {
        // r9.z = cb0[20].x + r7.z;
        // r9.z = cmp(r6.w >= r9.z);
        // r9.z = r9.z ? 1 : 0;
      // } else {
        // r7.z = cb0[20].y + r7.z;
        // r7.z = cmp(r6.w >= r7.z);
        // r9.z = r7.z ? 1 : 0;
      // }
      // r9.z = r9.z;
      // r9.z = r9.z;
      // r8.yz = float2(1,1) * r8.yz;
      // r7.xy = r8.yz + r7.xy;
      // r7.xy = r7.xy;
      // r7.x = t15.Sample(s15_s, r7.xy).x;
      // r7.x = r7.x;
      // r7.x = r7.x;
      // if (r8.x == 0) {
        // r7.y = cb0[20].x + r7.x;
        // r7.y = cmp(r6.w >= r7.y);
        // r7.y = r7.y ? 1 : 0;
      // } else {
        // r7.x = cb0[20].y + r7.x;
        // r6.w = cmp(r6.w >= r7.x);
        // r7.y = r6.w ? 1 : 0;
      // }
      // r7.y = r7.y;
      // r7.y = r7.y;
      // r6.w = -r7.w;
      // r6.w = r8.w + r6.w;
      // r6.w = r9.y * r6.w;
      // r6.w = r7.w + r6.w;
      // r7.x = -r9.z;
      // r7.x = r7.y + r7.x;
      // r7.x = r9.y * r7.x;
      // r7.x = r9.z + r7.x;
      // r7.y = -r6.w;
      // r7.x = r7.x + r7.y;
      // r7.x = r9.x * r7.x;
      // r6.w = r7.x + r6.w;
      // r6.w = r6.w;
      // r5.w = r6.w + r5.w;
    // r3.w = r5.w;
  // r0.w = r3.w;
  // r0.w = r0.w;
  // r3.xyw = float3(-1,-1,-1);
  // r1.xyz = r3.xyw + r1.xyz;
  // r1.xyz = r1.xyz * r0.www;
  // r1.xyz = float3(1,1,1) + r1.xyz;
  // r1.xyz = r1.xyz;
  // r3.z = r3.z;
  // r4.xyz = r4.xyz;
  // r1.xyz = r1.xyz;
  // r0.w = -1;
  // r0.w = floor(r0.w) + asint(cb0[18].x);
  // r0.w = cmp(floor(r0.w) == floor(r3.z));
  // if (r0.w != 0) {
    // r3.xy = float2(0.5,0.5) * r4.xy;
    // r3.xy = r3.xy / r4.zz;
    // r3.xy = float2(0.5,0.5) + r3.xy;
    // r0.w = -r3.y;
    // r0.w = 1 + r0.w;
    // r3.y = cmp(r3.x < 0);
    // r3.x = cmp(1 < r3.x);
    // r3.x = (int)r3.x | (int)r3.y;
    // r3.y = cmp(r0.w < 0);
    // r3.x = (int)r3.y | (int)r3.x;
    // r0.w = cmp(1 < r0.w);
    // r0.w = (int)r0.w | (int)r3.x;
    // if (r0.w != 0) {
      // r1.xyz = int3(1,1,1);
    // }
  // }
  // r1.xyz = r1.xyz;
  // r1.xyz = r1.xyz;
  // r0.xyz = r1.xyz * r0.xyz;
  // r0.w = cmp(r1.w < cb0[0].x);
  // if (r0.w != 0) {
    // if (-1 != 0) discard;
  // }
  // r0.xyz = r0.xyz;
  // r1.xy = v2.zw;
  // r3.xyz = t6.Sample(s6_s, v2.xy).xyz;
  // r3.xyz = r3.xyz;
  // r3.xyz = r3.xyz;
  // r4.xyz = -cb0[1].xyz;
  // r3.xyz = r4.xyz + r3.xyz;
  // r1.yzw = r3.xyz * r1.yyy;
  // r1.yzw = cb0[1].xyz + r1.yzw;
  // r3.xyz = -r1.yzw;
  // r0.xyz = r3.xyz + r0.xyz;
  // r0.xyz = r1.xxx * r0.xyz;
  // r2.xyz = r1.yzw + r0.xyz;
  // r2.xyz = r2.xyz;
  // r2.xyz = r2.xyz;
  // r2.w = r2.w;
  // r0.yzw = int3(0,0,0);
  // r0.x = w1.x;
  // o0.xyzw = r2.xyzw;
  // o1.xyzw = r0.xyzw;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[31];                    // Offset:    0 Size:   496
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// s0_s                              sampler      NA          NA             s0      1 
// s6_s                              sampler      NA          NA             s6      1 
// s15_s                             sampler      NA          NA            s15      1 
// t0                                texture  float4          2d             t0      1 
// t6                                texture  float4          2d             t6      1 
// t15                               texture  float4          2d            t15      1 
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 7   xyz         1     NONE   float       
// DEPTHVALUE               0      w        1     NONE   float      w
// FOGFACTOR                0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xy  
// TEXCOORD                 4   xyz         5     NONE   float       
// WORLDVIEWNORMAL          0   xyz         6     NONE   float       
// WORLDVIEWPOSITION        0   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[31], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s6, mode_default
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0
lt r1.x, r0.w, cb0[0].x
discard_nz r1.x
mov r1.xyz, cb0[24].xyzw //div r1.xyz, cb0[24].xyzw, cb0[24].wwww
mad r1.w, cb0[24].w, l(0.245000), l(0.500000) //mad r1.w, cb0[24].w, l(0.500000), l(0.500000)
add r2.xy, v4.xyxx, l(-0.700000, -0.700000, 0.000000, 0.000000)
dp2 r2.x, r2.xyxx, l(0.000001, 1.000000, 0.000000, 0.000000)
add r2.x, r2.x, l(0.200000)
mul r2.yzw, r0.xxyz, l(0.000000, 0.850000, 0.850000, 0.850000)
mul r2.x, r2.x, l(0.400000)
mad r0.xyz, -r0.xyzx, l(0.850000, 0.850000, 0.850000, 0.000000), l(0.150000, 0.150000, 0.150000, 0.000000)
mad r0.xyz, r0.xyzx, r2.xxxx, r2.yzwy
mad r2.xyz, cb0[29].xyzx, cb0[23].xyzx, cb0[30].xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
mul r0.xyz, r1.xyzx, r0.xyzx
mul r0.xyz, r1.wwww, r0.xyzx
mul o0.w, r0.w, cb0[30].w
itof r0.w, cb0[18].x
add r0.w, r0.w, l(-1.000000)
lt r1.xyz, |v3.wwww|, cb0[19].xyzx
movc r1.z, r1.z, l(2.000000), r0.w
movc r1.y, r1.y, l(1.000000), r1.z
movc r1.x, r1.x, l(0), r1.y
mad r2.xyzw, r1.xxxx, l(4.000000, 4.000000, 4.000000, 4.000000), l(2.000000, 3.000000, 4.000000, 5.000000)
ftou r2.xyzw, r2.xyzw
mul r3.xyzw, v3.xxxx, cb0[r2.x + 0].xywz
mad r3.xyzw, cb0[r2.y + 0].xywz, v3.yyyy, r3.xyzw
mad r3.xyzw, cb0[r2.z + 0].xywz, v3.zzzz, r3.xyzw
add r2.xyzw, r3.xyzw, cb0[r2.w + 0].xywz
mov r1.y, r2.w //div r1.y, r2.w, r2.z
mul r1.zw, r2.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mov r1.zw, r1.zzzw //div r1.zw, r1.zzzw, r2.zzzz
add r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
add r1.w, -r1.w, l(1.000000)
ilt r2.xy, l(1, 2, 0, 0), cb0[18].xxxx
movc r2.xy, r2.xyxx, l(0.500000,0.500000,0,0), l(1.000000,1.000000,0,0)
ftou r2.z, r1.x
and r2.w, r2.z, l(1)
utof r2.w, r2.w
add r2.w, r1.z, r2.w
mul r3.x, r2.x, r2.w
ult r2.x, l(1), r2.z
and r2.x, r2.x, l(0x3f800000)
add r2.x, r1.w, r2.x
mul r3.y, r2.y, r2.x
mov_sat r2.x, cb0[22].x
add r2.yzw, l(0.000000, -1.000000, -1.000000, -1.000000), cb0[21].xxyz
mul r2.xyz, r2.xxxx, r2.yzwy
add r3.xy, r3.xyxx, l(-0.000488, -0.000488, 0.000000, 0.000000)
mad r3.xy, r3.xyxx, l(2048.000000, 2048.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
frc r3.zw, r3.xxxy
round_ni r3.xy, r3.xyxx
mul r4.xy, r3.xyxx, l(0.000488, 0.000488, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t15.yzwx, s15
eq r4.x, r1.x, l(0.000000)
add r4.yz, r2.wwww, cb0[20].xxyx
ge r4.yz, r1.yyyy, r4.yyzy
and r4.yz, r4.yyzy, l(0, 0x3f800000, 0x3f800000, 0)
movc r2.w, r4.x, r4.y, r4.z
mad r5.xyzw, r3.xyxy, l(0.000488, 0.000488, 0.000488, 0.000488), l(0.000000, 0.000488, 0.000488, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r4.y, r5.xyxx, t15.yxzw, s15
add r4.yz, r4.yyyy, cb0[20].xxyx
ge r4.yz, r1.yyyy, r4.yyzy
and r4.yz, r4.yyzy, l(0, 0x3f800000, 0x3f800000, 0)
movc r4.y, r4.x, r4.y, r4.z
sample_indexable(texture2d)(float,float,float,float) r4.z, r5.zwzz, t15.yzxw, s15
add r4.zw, r4.zzzz, cb0[20].xxxy
ge r4.zw, r1.yyyy, r4.zzzw
and r4.zw, r4.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
movc r4.z, r4.x, r4.z, r4.w
mad r3.xy, r3.xyxx, l(0.000488, 0.000488, 0.000000, 0.000000), l(0.000488, 0.000488, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.x, r3.xyxx, t15.xyzw, s15
add r3.xy, r3.xxxx, cb0[20].xyxx
ge r3.xy, r1.yyyy, r3.xyxx
and r3.xy, r3.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
movc r1.y, r4.x, r3.x, r3.y
add r3.x, -r2.w, r4.y
mad r2.w, r3.w, r3.x, r2.w
add r1.y, -r4.z, r1.y
mad r1.y, r3.w, r1.y, r4.z
add r1.y, -r2.w, r1.y
mad r1.y, r3.z, r1.y, r2.w
mad r2.xyz, r2.xyzx, r1.yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
eq r0.w, r0.w, r1.x
lt r1.x, r1.z, l(0.000000)
lt r1.y, l(1.000000), r1.z
or r1.x, r1.x, r1.y
lt r1.y, r1.w, l(0.000000)
or r1.x, r1.x, r1.y
lt r1.y, l(1.000000), r1.w
or r1.x, r1.x, r1.y
itof r1.x, r1.x
ne r1.x, r1.x, l(0.000000)
movc r1.xyz, r1.xxxx, l(1.000000,1.000000,1.000000,0), r2.xyzx
movc r1.xyz, r0.wwww, r1.xyzx, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v2.xyxx, t6.xyzw, s6
add r2.xyz, r2.xyzx, -cb0[1].xyzx
mad r2.xyz, r2.xyzx, v2.wwww, cb0[1].xyzx
mad r0.xyz, r1.xyzx, r0.xyzx, -r2.xyzx
mad o0.xyz, v2.zzzz, r0.xyzx, r2.xyzx
mov o1.x, v1.w
mov o1.yzw, l(0,0,0,0)
ret 
// Approximately 103 instruction slots used
