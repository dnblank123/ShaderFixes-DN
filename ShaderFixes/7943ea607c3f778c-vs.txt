// vs grass
// cbuffer cb0 : register(b0)
// {
  // float4 cb0[139];
// }


// #define cmp -

// float sqrt1(const float n)
// {
    // int i;
    // float f;
    // i = 0x5F375A86 - (asint(n) >> 1);
    // f = asfloat(i);
    // return ((3 - n * f * f) * n * f * 0.5);
// }

// void main(
  // int4 v0 : BLENDINDICES0,
  // float4 v1 : NORMAL0,
  // float3 v2 : POSITION0,
  // float4 v3 : TEXCOORD0,
  // float v4 : TEXCOORD5,
  // float4 v5 : BLENDWEIGHT0,
  // out float4 o0 : SV_POSITION0,
  // out float3 o1 : TEXCOORD7,
  // out float p1 : DEPTHVALUE0,
  // out float4 o2 : FOGFACTOR0,
  // out float4 o3 : TEXCOORD6,
  // out float4 o4 : TEXCOORD0,
  // out float3 o5 : TEXCOORD4,
  // out float3 o6 : WORLDVIEWNORMAL0,
  // out float3 o7 : WORLDVIEWPOSITION0)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.xyz = float3(0,0,0);
  // r0.w = cb0[136].x;
  // r0.w = r0.w;
  // r1.x = v4.x;
  // r2.xyz = v2.xyz;
  // r1.y = 1;
  // r1.zw = -cb0[138].xy;
  // r1.zw = r2.xz + r1.zw;
  // r3.x = dot(r1.zw, r1.zw);
  // r3.x = sqrt1(r3.x);
  // r1.zw = r1.zw / r3.xx;
  // r3.y = cb0[138].zw; //dot(cb0[138].zw, cb0[138].zw);
  r3.y = sqrt1(r3.y);
  // r3.z = 0;
  r3.z = cmp(r3.z == r3.y);
  if (r3.z != 0) {
    r3.y = 1;
  }
  // r3.zw = cb0[138].zw / r3.yy;
  // r4.xy = -r1.zw;
  // r3.z = dot(r4.xy, r3.zw);
  // r3.w = 0;
  r3.w = cmp(r3.z < r3.w);
  if (r3.w != 0) {
    r3.w = -r3.z;
    r3.z = 0.300000012 * r3.w;
  }
  // r3.w = -50;
  // r3.w = r3.x + r3.w;
  // r3.w = r3.w / 150;
  // r3.w = max(0, r3.w);
  // r3.w = min(1, r3.w);
  // r3.w = 2 * r3.w;
  // r4.x = -1;
  // r3.w = r4.x + r3.w;
  // r4.x = -r3.w;
  // r3.w = max(r4.x, r3.w);
  // r3.w = -r3.w;
  // r3.w = 1 + r3.w;
  // r4.x = 3;
  // r4.x = r4.x * r3.w;
  // r4.x = r4.x * r3.w;
  // r4.y = 2;
  // r4.y = r4.y * r3.w;
  // r4.y = r4.y * r3.w;
  // r3.w = r4.y * r3.w;
  // r3.w = -r3.w;
  // r3.w = r4.x + r3.w;
  // r3.z = r3.w * r3.z;
  // r3.y = r3.z * r3.y;
  // r0.w = r3.y + r0.w;
  // r0.w = cos(r0.w);
  // r0.w = r0.w * r1.x;
  // r3.y = r3.x / 100;
  // r3.y = min(1, r3.y);
  // r0.w = r3.y * r0.w;
  // r3.y = 0;
  // r3.x = -r3.x;
  // r3.x = 100 + r3.x;
  // r3.x = max(r3.y, r3.x);
  // r1.zw = r3.xx * r1.zw;
  // r1.xz = r1.zw * r1.xx;
  // r1.xz = float2(0.0350000001,0.0350000001) * r1.xz;
  // r1.xz = r2.xz + r1.xz;
  // r2.xz = r1.xz + r0.ww;
  // r1.xzw = cb0[4].xyz * r2.xxx;
  // r3.xyz = cb0[5].xyz * r2.yyy;
  // r1.xzw = r3.xyz + r1.xzw;
  // r3.xyz = cb0[6].xyz * r2.zzz;
  // r1.xzw = r3.xyz + r1.xzw;
  // r3.xyz = cb0[7].xyz * r1.yyy;
  // r1.xzw = r3.xyz + r1.xzw;
  // r3.xyzw = cb0[0].xyzw * r1.xxxx;
  // r4.xyzw = cb0[1].xyzw * r1.zzzz;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r4.xyzw = cb0[2].xyzw * r1.wwww;
  // r3.xyzw = r4.xyzw + r3.xyzw;
  // r4.xyzw = float4(1,1,1,1) * cb0[3].xyzw;
  // r3.xyzw = r4.zxyw + r3.zxyw;
  // r0.w = 0;
  // r1.xzw = cb0[132].xyz * v1.xxx;
  // r4.xyz = cb0[133].xyz * v1.yyy;
  // r1.xzw = r4.xyz + r1.xzw;
  // r4.xyz = cb0[134].xyz * v1.zzz;
  // r1.xzw = r4.xyz + r1.xzw;
  // r4.xyz = cb0[135].xyz * r0.www;
  // r1.xzw = r4.xyz + r1.xzw;
  // r4.xyz = cb0[132].xyz * r2.xxx;
  // r5.xyz = cb0[133].xyz * r2.yyy;
  // r4.xyz = r5.xyz + r4.xyz;
  // r5.xyz = cb0[134].xyz * r2.zzz;
  // r4.xyz = r5.xyz + r4.xyz;
  // r5.xyz = cb0[135].xyz * r1.yyy;
  // r4.xyz = r5.xyz + r4.xyz;
  // r5.xyz = int3(1,0,0);
  // r6.xy = v3.xy;
  // r6.zw = r3.yz / r3.ww;
  // r6.zw = float2(1,1) + r6.zw;
  // r6.zw = float2(0.5,0.5) * r6.zw;
  // r0.w = -r6.w;
  // r0.w = 1 + r0.w;
  // r3.x = r3.x;
  // r1.y = -r3.x;
  // r1.y = cb0[137].z + r1.y;
  // r7.xy = cb0[137].xy * r1.yy;
  // r7.xy = max(float2(0,0), r7.xy);
  // r7.xz = min(float2(1,1), r7.yx);
  // r7.w = r7.x * r7.x;
  // r7.z = r7.z;
  // r7.w = r7.w;
  // r7.zw = r7.zw;
  // r2.xz = r2.xz;
  // r2.y = r2.y;
  // r2.w = r3.x;
  // r3.x = r3.x;
  // r1.y = 0.00999999978 * r3.x;
  // r1.y = r1.y;
  // o0.xyzw = r3.yzxw;
  // o1.xyz = 0;
  // p1.x = 0;
  // o2.x = r6.z;
  // o2.y = r0.w;
  // o2.zw = r7.zw;
  // o3.xyzw = r2.xyzw;
  // o5.xyz = 0;
  // o6.xyz = 0;
  // o7.xyz = 0;
  // o4.xy = r6.xy;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[139];                   // Offset:    0 Size:  2224
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int       
// NORMAL                   0   xyzw        1     NONE   float       
// POSITION                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 5   x           4     NONE   float   x   
// BLENDWEIGHT              0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 7   xyz         1     NONE   float   xyz 
// DEPTHVALUE               0      w        1     NONE   float      w
// FOGFACTOR                0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xy  
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// WORLDVIEWNORMAL          0   xyz         6     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[139], immediateIndexed
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 2
add r0.xy, v2.xzxx, -cb0[138].xyxx
dp2 r0.z, r0.xyxx, r0.xyxx
ishr r0.w, r0.z, l(1)
iadd r0.w, -r0.w, l(0x5f375a86)
mul r1.x, r0.w, r0.z
mad r1.x, -r1.x, r0.w, l(3.000000)
mul r0.z, r0.z, r1.x
mul r0.z, r0.w, r0.z
// mad r0.w, r0.z, l(0.500000), l(-50.000000)
// mul_sat r0.w, r0.w, l(0.006667)
mad r0.w, r0.w, l(2.000000), l(-1.000000)
add r0.w, -|r0.w|, l(1.000000)
mul r1.x, r0.w, r0.w
// dp2 r0.w, r1.xxxx, r0.wwww
mad r0.w, r1.x, l(3.000000), -r0.w
mul r1.xy, r0.zzzz, l(0.500000, 0.005000, 0.000000, 0.000000)
mad r0.z, -r0.z, l(0.500000), l(100.000000)
max r0.z, r0.z, l(0.000000)
mul r0.xy, r0.xy, l(0.018) //div r0.xy, r0.xyxx, r1.xxxx
min r1.x, r1.y, l(1.000000)
// div r1.yz, cb0[138].zzwz, cb0[138].zzzz
// dp2 r1.y, -r0.xyxx, r1.yzyy
mul r0.xy, r0.xyxx, r0.zzzz
mul r0.xy, r0.xyxx, v4.xxxx
mad r0.xy, r0.xyxx, l(0.035000, 0.035000, 0.000000, 0.000000), v2.xzxx
mul r0.z, r0.w, r1.y
mad r0.z, r0.z, cb0[138].z, cb0[136].x
sincos null, r0.z, r0.z
mul r0.z, r0.z, v4.x
mad r0.xy, r1.xxxx, r0.zzzz, r0.xyxx
mul r1.xyz, r0.xxxx, cb0[4].xyzx
mad r1.xyz, cb0[5].xyzx, v2.yyyy, r1.xyzx
mad r1.xyz, cb0[6].xyzx, r0.yyyy, r1.xyzx
mov o3.xz, r0.xxyx
add r0.xyz, r1.xyzx, cb0[7].xyzx
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mov o0.xyzw, r0.xyzw
mov o1.xyzw, l(0,0,0,0)
div r0.xy, r0.xyxx, r0.wwww
add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad o2.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
add r0.x, -r0.z, cb0[137].z
mov o3.w, r0.z
mul_sat r0.xy, r0.xxxx, cb0[137].yxyy
mul o2.w, r0.x, r0.x
mov o2.z, r0.y
mov o3.y, v2.y
mov o4.xy, v3.xyxx
mov o5.xyz, l(0,0,0,0)
mov o6.xyz, l(0,0,0,0)
mov o7.xyz, l(0,0,0,0)
ret 
// Approximately 56-6 instruction slots used

