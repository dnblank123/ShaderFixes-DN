// // vs default low
// cbuffer cb0 : register(b0)
// {
  // float4 cb0[138];
// }




// // 3Dmigoto declarations
// #define cmp -


// void main(
  // int4 v0 : BLENDINDICES0,
  // float4 v1 : NORMAL0,
  // float3 v2 : POSITION0,
  // float2 v3 : TEXCOORD0,
  // float4 v4 : BLENDWEIGHT0,
  // out float4 o0 : SV_POSITION0,
  // out float o1 : CLIPDISTANCE0,
  // out float3 p1 : TEXCOORD7,
  // out float o2 : DEPTHVALUE0,
  // out float2 p2 : TEXCOORD0,
  // out float4 o3 : FOGFACTOR0,
  // out float4 o4 : TEXCOORD6,
  // out float3 o5 : TEXCOORD4,
  // out float3 o6 : WORLDVIEWNORMAL0,
  // out float3 o7 : WORLDVIEWPOSITION0)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.x = cb0[4].x;
  // r0.y = cb0[5].x;
  // r0.z = cb0[6].x;
  // r0.w = cb0[7].x;
  // r1.x = cb0[4].y;
  // r1.y = cb0[5].y;
  // r1.z = cb0[6].y;
  // r1.w = cb0[7].y;
  // r2.x = cb0[4].z;
  // r2.y = cb0[5].z;
  // r2.z = cb0[6].z;
  // r2.w = cb0[7].z;
  // r3.x = cb0[4].w;
  // r3.y = cb0[5].w;
  // r3.z = cb0[6].w;
  // r3.w = cb0[7].w;
  // r4.x = cb0[132].x;
  // r4.y = cb0[133].x;
  // r4.z = cb0[134].x;
  // r4.w = cb0[135].x;
  // r5.x = cb0[132].y;
  // r5.y = cb0[133].y;
  // r5.z = cb0[134].y;
  // r5.w = cb0[135].y;
  // r6.x = cb0[132].z;
  // r6.y = cb0[133].z;
  // r6.z = cb0[134].z;
  // r6.w = cb0[135].z;
  // r7.xyz = int3(1,0,0);
  // r8.xyz = v2.xyz;
  // r8.w = 1;
  // r9.x = dot(r4.xyzw, r8.xyzw);
  // r9.y = dot(r5.xyzw, r8.xyzw);
  // r9.z = dot(r6.xyzw, r8.xyzw);
  // r10.w = 0;
  // r10.xyz = v1.xyz;
  // r4.x = dot(r4.xyz, r10.xyz);
  // r4.y = dot(r5.xyz, r10.xyz);
  // r4.z = dot(r6.xyz, r10.xyz);
  // r5.xyzw = cb0[0].xyzw * r9.xxxx;
  // r6.xyzw = cb0[1].xyzw * r9.yyyy;
  // r5.xyzw = r6.xyzw + r5.xyzw;
  // r6.xyzw = cb0[2].xyzw * r9.zzzz;
  // r5.xyzw = r6.xyzw + r5.xyzw;
  // r6.xyzw = float4(1,1,1,1) * cb0[3].xyzw;
  // r5.xyzw = r6.zxyw + r5.zxyw;
  // // r0.x = dot(r0.xyzw, r8.xyzw);
  // // r0.y = dot(r1.xyzw, r8.xyzw);
  // // r0.z = dot(r2.xyzw, r8.xyzw);
  // // r0.w = dot(r3.xyzw, r8.xyzw);
  // r1.x = 0;//dot(r0.xyzw, cb0[136].xyzw);
  // r0.xyz = r0.xyz;
  // r1.yz = v3.xy;
  // r2.xy = r5.yzyy / r5.wwww;
  // r2.zw = int2(1,1);
  // r2.xy = r2.xy + r2.zw;
  // r2.xy = float2(0.5,0.5) * r2.xy;
  // r1.w = -r2.y;
  // r1.w = 1 + r1.w;
  // r5.x = r5.x;
  // r2.y = -r5.x;
  // r2.y = cb0[137].z + r2.y;
  // r2.yz = cb0[137].xy * r2.yy;
  // r2.yz = max(float2(0,0), r2.yz);
  // r3.xz = min(float2(1,1), r2.zy);
  // r3.w = r3.x * r3.x;
  // r3.z = r3.z;
  // r3.w = r3.w;
  // r3.zw = r3.zw;
  // r5.x = r5.x;
  // r2.y = 0.01 * r5.x;
  // r2.y = r2.y;
  // r0.xyz = r0.xyz;
  // r0.w = r5.x;
  // o0.xyzw = r5.yzxw;
  // // o1.x = r1.x;
  // // p1.xyz = r7.xyz;
  // o3.x = r2.x;
  // o3.y = r1.w;
  // o3.zw = r3.zw;
  // // o4.xyzw = r0.xyzw;
  // o2.x = r2.y;
  // p2.xy = r1.yz;
  // // o5.xyz = r0.xyz;
  // o6.xyz = r4.xyz;
  // o7.xyz = r9.xyz;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[138];                   // Offset:    0 Size:  2208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int       
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// POSITION                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// BLENDWEIGHT              0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// CLIPDISTANCE             0   x           1     NONE   float       
// TEXCOORD                 7    yzw        1     NONE   float       
// DEPTHVALUE               0   x           2     NONE   float   x   
// TEXCOORD                 0    yz         2     NONE   float    yz 
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float       
// WORLDVIEWNORMAL          0   xyz         6     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[138], immediateIndexed
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o2.x
dcl_output o2.yz
dcl_output o3.xyzw
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 4
mov r0.w, cb0[135].x
mov r0.x, cb0[132].x
mov r0.y, cb0[133].x
mov r0.z, cb0[134].x
mov r1.xyz, v2.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, r0.xyzw, r1.xyzw
dp3 o6.x, r0.xyzx, v1.xyzx
mul r0.xyzw, r2.xxxx, cb0[0].xyzw
mov r3.w, cb0[135].y
mov r3.x, cb0[132].y
mov r3.y, cb0[133].y
mov r3.z, cb0[134].y
dp4 r2.y, r3.xyzw, r1.xyzw
dp3 o6.y, r3.xyzx, v1.xyzx
mad r0.xyzw, cb0[1].xyzw, r2.yyyy, r0.xyzw
mov r3.w, cb0[135].z
mov r3.x, cb0[132].z
mov r3.y, cb0[133].z
mov r3.z, cb0[134].z
dp4 r2.z, r3.xyzw, r1.xyzw
dp3 o6.z, r3.xyzx, v1.xyzx
mad r0.xyzw, cb0[2].xyzw, r2.zzzz, r0.xyzw
mov o7.xyz, r2.xyzx
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mov o0.xyzw, r0.xyzw
mul o2.x, r0.z, l(0.010000)
mov o2.yz, v3.xxyx
div r0.xy, r0.xyxx, r0.wwww
add r0.z, -r0.z, cb0[137].z
mul_sat r0.zw, r0.zzzz, cb0[137].yyyx
add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad o3.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
mul o3.w, r0.z, r0.z
mov o3.z, r0.w
ret 
// Approximately 37 instruction slots used
