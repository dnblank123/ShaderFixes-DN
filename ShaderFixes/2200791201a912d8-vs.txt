// //vs shadow props
// cbuffer cb0 : register(b0)
// {
  // float4 cb0[137];
// }


// void main(
  // int4 v0 : BLENDINDICES0,
  // float4 v1 : NORMAL0,
  // float3 v2 : POSITION0,
  // float2 v3 : TEXCOORD0,
  // float4 v4 : BLENDWEIGHT0,
  // out float4 o0 : SV_POSITION0,
  // out float4 o1 : TEXCOORD6,
  // out float2 o2 : TEXCOORD0)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.x = cb0[8].x;
  // r0.y = cb0[9].x;
  // r0.z = cb0[10].x;
  // r0.w = cb0[11].x;
  // r1.x = cb0[8].y;
  // r1.y = cb0[9].y;
  // r1.z = cb0[10].y;
  // r1.w = cb0[11].y;
  // r2.x = cb0[8].z;
  // r2.y = cb0[9].z;
  // r2.z = cb0[10].z;
  // r2.w = cb0[11].z;
  // r3.x = cb0[8].w;
  // r3.y = cb0[9].w;
  // r3.z = cb0[10].w;
  // r3.w = cb0[11].w;
  // r4.xyz = v2.xyz;
  // r4.w = 1;
  // r5.x = r0.x * r4.x + r0.y * r4.y + r0.z * r4.z + r0.w * r4.w;//dot(r0.xyzw, r4.xyzw);
  // r5.y = r1.x * r4.x + r1.y * r4.y + r1.z * r4.z + r1.w * r4.w;//dot(r1.xyzw, r4.xyzw);
  // r5.z = r2.x * r4.x + r2.y * r4.y + r2.z * r4.z + r2.w * r4.w;//dot(r2.xyzw, r4.xyzw);
  // r4.x = r3.x * r4.x + r3.y * r4.y + r3.z * r4.z + r3.w * r4.w;//dot(r3.xyzw, r4.xyzw);
  // // r6.w = 0;
  // // r6.xyz = v1.xyz;
  // // r0.x = 0; //dot(r0.xyzw, r6.xyzw);
  // // r0.y = 0; //dot(r1.xyzw, r6.xyzw);
  // // r0.z = 0; //dot(r2.xyzw, r6.xyzw);
  // // r0.w = 0; //dot(r3.xyzw, r6.xyzw);
  // // r0.w = 0; //dot(r0.xyzw, r0.xyzw);
  // // r0.w = sqrt1(r0.w);
  // // r0.xyz = 0; //r0.xyz * r0.www;
  // // r0.xyz = cb0[136].xxx;
  // r0.xyz = r5.xyz;// + r0.xyz;
  // r1.xyzw = cb0[0].xyzw * r0.xxxx;
  // r2.xyzw = cb0[1].xyzw * r0.yyyy;
  // r1.xyzw = r2.xyzw + r1.xyzw;
  // r0.xyzw = cb0[2].xyzw * r0.zzzz;
  // r0.xyzw = r1.xyzw + r0.xyzw;
  // r1.xyzw = cb0[3].xyzw * r4.xxxx;
  // r0.xyzw = r1.xyzw + r0.xyzw;
  // r1.xyzw = cb0[4].xyzw * r0.xxxx;
  // r2.xyzw = cb0[5].xyzw * r0.yyyy;
  // r1.xyzw = r2.xyzw + r1.xyzw;
  // r2.xyzw = cb0[6].xyzw * r0.zzzz;
  // r1.xyzw = r2.xyzw + r1.xyzw;
  // r0.xyzw = cb0[7].xyzw * r0.wwww;
  // o0.xyzw = r1.xyzw + r0.xyzw;
  // // r1.xy = v3.xy;
  // // r0.xyzw = r0.xyzw;
  // // o0.xyzw = r0.xyzw;
  // o1.xyzw = o0.xyzw;
  // // o2.xy = r1.xy;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[137];                   // Offset:    0 Size:  2192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int       
// NORMAL                   0   xyzw        1     NONE   float       
// POSITION                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float       
// BLENDWEIGHT              0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 6   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[12], immediateIndexed
dcl_input v2.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 2
mul r0.xyzw, v2.yyyy, cb0[9].xyzw
mad r0.xyzw, cb0[8].xyzw, v2.xxxx, r0.xyzw
mad r0.xyzw, cb0[10].xyzw, v2.zzzz, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[11].xyzw
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r1.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb0[3].xyzw, r0.wwww, r1.xyzw
mul r1.xyzw, r0.xxxx, cb0[4].xyzw
mad r1.xyzw, cb0[5].xyzw, r0.yyyy, r1.xyzw
mad r1.xyzw, cb0[6].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r0.xyzw
ret 
// Approximately 15 instruction slots used
