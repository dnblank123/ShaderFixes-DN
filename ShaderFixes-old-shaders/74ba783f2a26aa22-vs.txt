// vs shadow ani
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int       
// NORMAL                   0   xyzw        1     NONE   float       
// POSITION                 0   xyz         2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// BLENDWEIGHT              0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 6   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
mov o0.xyzw, l(0,0,0,0)
mov o1.xyzw, l(0,0,0,0)
mov o2.xy, l(0,0,0,0)
ret 
// Approximately 4 instruction slots used

// // ---- Created with 3Dmigoto v1.4.1 on Sat Dec 28 22:52:04 2024
// cbuffer cb0 : register(b0)
// {
  // float4 cb0[517];
// }




// // 3Dmigoto declarations
// #define cmp -


// void main(
  // int4 v0 : BLENDINDICES0,
  // float4 v1 : NORMAL0,
  // float3 v2 : POSITION0,
  // float2 v3 : TEXCOORD0,
  // float4 v4 : BLENDWEIGHT0,
  // out float4 o0 : SV_POSITION0,
  // out float4 o1 : TEXCOORD6,
  // out float2 o2 : TEXCOORD0)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.xyz = cb0[512].xxx * v1.xyz;
  // r0.xyz = v2.xyz + r0.xyz;
  // r1.xyzw = v4.xyzw;
  // r2.x = (int)v0.x * 4;
  // r3.x = cb0[r2.x+0].x * r1.x;
  // r3.y = cb0[r2.x+1].x * r1.x;
  // r3.z = cb0[r2.x+2].x * r1.x;
  // r3.w = cb0[r2.x+3].x * r1.x;
  // r4.x = cb0[r2.x+0].y * r1.x;
  // r4.y = cb0[r2.x+1].y * r1.x;
  // r4.z = cb0[r2.x+2].y * r1.x;
  // r4.w = cb0[r2.x+3].y * r1.x;
  // r5.x = cb0[r2.x+0].z * r1.x;
  // r5.y = cb0[r2.x+1].z * r1.x;
  // r5.z = cb0[r2.x+2].z * r1.x;
  // r5.w = cb0[r2.x+3].z * r1.x;
  // r1.x = (int)v0.y * 4;
  // r2.x = cb0[r1.x+0].x * r1.y;
  // r2.y = cb0[r1.x+1].x * r1.y;
  // r2.z = cb0[r1.x+2].x * r1.y;
  // r2.w = cb0[r1.x+3].x * r1.y;
  // r6.x = cb0[r1.x+0].y * r1.y;
  // r6.y = cb0[r1.x+1].y * r1.y;
  // r6.z = cb0[r1.x+2].y * r1.y;
  // r6.w = cb0[r1.x+3].y * r1.y;
  // r7.x = cb0[r1.x+0].z * r1.y;
  // r7.y = cb0[r1.x+1].z * r1.y;
  // r7.z = cb0[r1.x+2].z * r1.y;
  // r7.w = cb0[r1.x+3].z * r1.y;
  // r2.xyzw = r3.xyzw + r2.xyzw;
  // r3.xyzw = r6.xyzw + r4.xyzw;
  // r4.xyzw = r7.xyzw + r5.xyzw;
  // r1.x = (int)v0.z * 4;
  // r5.x = cb0[r1.x+0].x * r1.z;
  // r5.y = cb0[r1.x+1].x * r1.z;
  // r5.z = cb0[r1.x+2].x * r1.z;
  // r5.w = cb0[r1.x+3].x * r1.z;
  // r6.x = cb0[r1.x+0].y * r1.z;
  // r6.y = cb0[r1.x+1].y * r1.z;
  // r6.z = cb0[r1.x+2].y * r1.z;
  // r6.w = cb0[r1.x+3].y * r1.z;
  // r7.x = cb0[r1.x+0].z * r1.z;
  // r7.y = cb0[r1.x+1].z * r1.z;
  // r7.z = cb0[r1.x+2].z * r1.z;
  // r7.w = cb0[r1.x+3].z * r1.z;
  // r2.xyzw = r5.xyzw + r2.xyzw;
  // r3.xyzw = r6.xyzw + r3.xyzw;
  // r4.xyzw = r7.xyzw + r4.xyzw;
  // r1.x = (int)v0.w * 4;
  // r5.x = cb0[r1.x+0].x * r1.w;
  // r5.y = cb0[r1.x+1].x * r1.w;
  // r5.z = cb0[r1.x+2].x * r1.w;
  // r5.w = cb0[r1.x+3].x * r1.w;
  // r6.x = cb0[r1.x+0].y * r1.w;
  // r6.y = cb0[r1.x+1].y * r1.w;
  // r6.z = cb0[r1.x+2].y * r1.w;
  // r6.w = cb0[r1.x+3].y * r1.w;
  // r7.x = cb0[r1.x+0].z * r1.w;
  // r7.y = cb0[r1.x+1].z * r1.w;
  // r7.z = cb0[r1.x+2].z * r1.w;
  // r7.w = cb0[r1.x+3].z * r1.w;
  // r1.xyzw = r5.xyzw + r2.xyzw;
  // r2.xyzw = r6.xyzw + r3.xyzw;
  // r3.xyzw = r7.xyzw + r4.xyzw;
  // r1.xyzw = r1.xyzw;
  // r2.xyzw = r2.xyzw;
  // r3.xyzw = r3.xyzw;
  // r0.w = 1;
  // r1.x = dot(r1.xyzw, r0.xyzw);
  // r1.y = dot(r2.xyzw, r0.xyzw);
  // r0.x = dot(r3.xyzw, r0.xyzw);
  // r2.xyzw = cb0[513].xyzw * r1.xxxx;
  // r1.xyzw = cb0[514].xyzw * r1.yyyy;
  // r1.xyzw = r2.xyzw + r1.xyzw;
  // r0.xyzw = cb0[515].xyzw * r0.xxxx;
  // r0.xyzw = r1.xyzw + r0.xyzw;
  // r1.xyzw = float4(1,1,1,1) * cb0[516].xyzw;
  // r0.xyzw = r1.xyzw + r0.xyzw;
  // r1.xy = v3.xy;
  // r0.xyzw = r0.xyzw;
  // o0.xyzw = 0;
  // o1.xyzw = 0;
  // o2.xy = 0;
  // return;
// }
