// vs terrain
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[162];
//}
//
//
//
//
//#define cmp -
//
//
//void main(
//  float4 v0 : COLOR0,
//  float4 v1 : COLOR1,
//  float4 v2 : NORMAL0,
//  float3 v3 : POSITION0,
//  float4 v4 : TEXCOORD0,
//  float2 v5 : TEXCOORD1,
//  out float4 o0 : SV_POSITION0,
//  out float o1 : CLIPDISTANCE0,
//  out float3 p1 : TEXCOORD7,
//  out float4 o2 : COLOR0,
//  out float4 o3 : COLOR1,
//  out float4 o4 : COLOR2,
//  out float o5 : DEPTHVALUE0,
//  out float2 p5 : TEXCOORD0,
//  out float4 o6 : FOGFACTOR0,
//  out float4 o7 : TEXCOORD6,
//  out float4 o8 : TEXCOORD1,
//  out float4 o9 : TEXCOORD2,
//  out float4 o10 : TEXCOORD3,
//  out float3 o11 : TEXCOORD4,
//  out float3 o12 : WORLDVIEWNORMAL0,
//  out float3 o13 : WORLDVIEWPOSITION0)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.xyz = float3(0,0,0);
//  r1.xyz = float3(0,0,0);
//  r2.xyz = cb0[132].xyz * v3.xxx;
//  r3.xyz = cb0[133].xyz * v3.yyy;
//  r2.xyz = r3.xyz + r2.xyz;
//  r3.xyz = cb0[134].xyz * v3.zzz;
//  r2.xyz = r3.xyz + r2.xyz;
//  r3.xyz = float3(1,1,1) * cb0[135].xyz;
//  r2.xyz = r3.xyz + r2.xyz;
//  r3.xyzw = cb0[0].xyzw * r2.xxxx;
//  r4.xyzw = cb0[1].xyzw * r2.yyyy;
//  r3.xyzw = r4.xyzw + r3.xyzw;
//  r4.xyzw = cb0[2].xyzw * r2.zzzz;
//  r3.xyzw = r4.xyzw + r3.xyzw;
//  r4.xyzw = float4(1,1,1,1) * cb0[3].xyzw;
//  r3.xyzw = r4.zxyw + r3.zxyw;
//  r0.w = 0;
//  r4.xyz = cb0[132].xyz * v2.xxx;
//  r5.xyz = cb0[133].xyz * v2.yyy;
//  r4.xyz = r5.xyz + r4.xyz;
//  r5.xyz = cb0[134].xyz * v2.zzz;
//  r4.xyz = r5.xyz + r4.xyz;
//  r5.xyz = cb0[135].xyz * r0.www;
//  r4.xyz = r5.xyz + r4.xyz;
//  r0.w = 1; //dot(r4.xyz, r4.xyz);
//  // r0.w = rsqrt(r0.w);
//  // r4.xyz = r4.xyz * r0.www;
//  // r5.xyzw = cb0[4].xyzw * v3.xxxx;
//  // r6.xyzw = cb0[5].xyzw * v3.yyyy;
//  // r5.xyzw = r6.xyzw + r5.xyzw;
//  // r6.xyzw = cb0[6].xyzw * v3.zzzz;
//  // r5.xyzw = r6.xyzw + r5.xyzw;
//  // r6.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
//  // r5.xyzw = r6.xyzw + r5.xyzw;
//  // r0.w = dot(r5.xyzw, cb0[136].xyzw);
//  r6.xyzw = v0.xyzw;
//  r7.xy = cb0[160].xz + v3.xz;
//  r7.xy = r7.xy / cb0[161].xx;
//  r3.x = r3.x;
//  // r1.w = -r3.x;
//  // r1.w = cb0[137].z + r1.w;
//  // r7.zw = cb0[137].xy * r1.ww;
//  // r7.zw = max(float2(0,0), r7.zw);
//  // r8.xy = min(float2(1,1), r7.zw);
//  // r8.y = r8.y * r8.y;
//  r8.x = r8.x;
//  r8.y = r8.y;
//  r8.z = 0;
//  r8.xy = r8.xy;
//  r9.xyzw = v1.xyzw;
//  r10.z = 0;
//  r10.xy = v4.xy;
//  r11.z = 0;
//  r11.xy = v5.xy;
//  r12.xyzw = float4(0,0,0,1);
//  r12.xyzw = r12.xyzw;
//  r4.xyz = r4.xyz;
//  r2.xyz = r2.xyz;
//  // r1.w = (int)cb0[139].x;
//  // r1.w = r1.w;
//  // r2.w = 0;
//  r13.xyz = r12.xyz;
//  // r4.w = r2.w;
//
//    r7.z = r4.w;
//    r14.xyz = r4.xyz;
//    r7.w = 0;
//    r15.xyz = -cb0[r7.z+140].xyz;
//    r8.w = dot(r14.xyz, r15.xyz);
//    r7.w = max(r8.w, r7.w);
//    r14.xyz = cb0[r7.z+145].xyz * r7.www;
//    r13.xyz = r14.xyz + r13.xyz;
//
//  // r1.w = (int)cb0[139].y;
//  // r1.w = r1.w;
//  // r2.w = 0;
//  r12.xyz = r13.xyz;
//  // r4.w = r2.w;
//  // while (true) {
//    // r7.z = cmp((int)r4.w < (int)r1.w);
//    // if (r7.z == 0) break;
//    // r7.z = r4.w;
//    // r14.xyz = r4.xyz;
//    // r15.xyz = r2.xyz;
//    // r15.xyz = -r15.xyz;
//    // r15.xyz = cb0[r7.z+150].xyz + r15.xyz;
//    // r7.w = dot(r15.xyz, r15.xyz);
//    // r7.w = sqrt(r7.w);
//    // r8.w = cb0[r7.z+150].w * r7.w;
//    // r8.w = -r8.w;
//    // r8.w = 1 + r8.w;
//    // r8.w = max(0, r8.w);
//    // r15.xyz = r15.xyz / r7.www;
//    // r7.w = dot(r14.xyz, r15.xyz);
//    // r7.w = max(0, r7.w);
//    // r7.w = min(1, r7.w);
//    // r14.xyz = cb0[r7.z+155].xyz * r7.www;
//    // r14.xyz = r14.xyz * r8.www;
//    // r14.xyz = r14.xyz;
//    // r12.xyz = r14.xyz + r12.xyz;
//    // r4.w = (int)r4.w + 1;
//  // }
//  r12.xyz = r12.xyz;
//  r12.w = r12.w;
//  r12.xyzw = r12.xyzw;
//  r13.xyzw = float4(0.681999981,0.681999981,0.681999981,1) * cb0[138].xyzw;
//  r12.xyzw = r13.xyzw + r12.xyzw;
//  // r7.zw = r3.yz / r3.ww;
//  // r13.xy = int2(1,1);
//  // r7.zw = r13.xy + r7.zw;
//  // r7.zw = float2(0.5,0.5) * r7.zw;
//  // r1.w = -r7.w;
//  r1.w = 0; //1 + r1.w;
//  // r3.x = r3.x;
//  r2.w = -r3.x;
//  r2.w = cb0[137].z + r2.w;
//  r13.xy = r2.ww; //cb0[137].xy * r2.ww;
//  r13.xy = max(float2(0,0), r13.xy);
//  r13.xz = min(float2(1,1), r13.yx);
//  r13.w = r13.x * r13.x;
//  r13.z = r13.z;
//  r13.w = r13.w;
//  r13.zw = r13.zw;
//  r3.x = r3.x;
//  r2.w = 0.00999999978 * r3.x;
//  r2.w = r2.w;
//  r5.xyz = r5.xyz;
//  r5.w = r3.x;
//  o0.xyzw = r3.yzxw;
//  o1.x = r0.w;
//  p1.xyz = r0.xyz;
//  o2.xyzw = r6.xyzw;
//  o3.xyzw = r9.xyzw;
//  o4.xyzw = r12.xyzw;
//  o6.x = r7.z;
//  o6.y = r1.w;
//  o6.zw = r13.zw;
//  o7.xyzw = r5.xyzw;
//  o5.x = r2.w;
//  p5.xy = r7.xy;
//  o8.xyz = r8.xyz;
//  o9.xyz = r10.xyz;
//  o10.xyz = r11.xyz;
//  o11.xyz = r1.xyz;
//  o12.xyz = r4.xyz;
//  o13.xyz = r2.xyz;
//  return;
//}

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4 cb0[162];                   // Offset:    0 Size:  2592
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// POSITION                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xyzw        4     NONE   float   xy  
// TEXCOORD                 1   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// CLIPDISTANCE             0   x           1     NONE   float   x   
// TEXCOORD                 7    yzw        1     NONE   float    yzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float   xyzw
// COLOR                    2   xyzw        4     NONE   float   xyzw
// DEPTHVALUE               0   x           5     NONE   float   x   
// TEXCOORD                 0    yz         5     NONE   float    yz 
// FOGFACTOR                0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 1   xyzw        8     NONE   float     z 
// TEXCOORD                 2   xyzw        9     NONE   float   xyz 
// TEXCOORD                 3   xyzw       10     NONE   float   xyz 
// TEXCOORD                 4   xyz        11     NONE   float   xyz 
// WORLDVIEWNORMAL          0   xyz        12     NONE   float   xyz 
// WORLDVIEWPOSITION        0   xyz        13     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[162], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xy
dcl_input v5.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.yzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.x
dcl_output o5.yz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.z
dcl_output o9.xyz
dcl_output o10.xyz
dcl_output o11.xyz
dcl_output o12.xyz
dcl_output o13.xyz
dcl_temps 2
mul r0.xyz, v3.xxxx, cb0[132].xyzx
mad r0.xyz, cb0[133].xyzx, v3.yyyy, r0.xyzx
mad r0.xyz, cb0[134].xyzx, v3.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb0[135].xyzx
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mad r1.xyzw, cb0[1].xyzw, r0.yyyy, r1.xyzw
mad r1.xyzw, cb0[2].xyzw, r0.zzzz, r1.xyzw
mov o13.xyz, r0.xyzx
add r0.xyzw, r1.xyzw, cb0[3].xyzw
mov o0.xyzw, r0.xyzw
mov o1.xyzw, l(1.000000,0,0,0)
mov o2.xyzw, v0.xyzw
mov o3.xyzw, v1.xyzw
mul r0.xyw, v2.xxxx, cb0[132].xyxz
mad r0.xyw, cb0[133].xyxz, v2.yyyy, r0.xyxw
mad r0.xyw, cb0[134].xyxz, v2.zzzz, r0.xyxw
add r1.xy, l(140.000000, 145.000000, 0.000000, 0.000000), cb0[3].wwww
ftou r1.xy, r1.xyxx
dp3 r1.x, r0.xywx, -cb0[r1.x + 0].xyzx
mov o12.xyz, r0.xywx
max r0.x, r1.x, l(0.000000)
mul r1.xyz, r0.xxxx, cb0[r1.y + 0].xyzx
mov r1.w, l(1.000000)
mad o4.xyzw, cb0[138].xyzw, l(0.682000, 0.682000, 0.682000, 1.000000), r1.xyzw
mul o5.x, r0.z, l(0.010000)
add r0.xy, v3.xzxx, cb0[160].xzxx
div o5.yz, r0.xxyx, cb0[161].xxxx
add_sat r0.x, -r0.z, cb0[137].z
mov o7.w, r0.z
mul o6.w, r0.x, r0.x
mov o6.z, r0.x
mov o6.x, cb0[3].w
mov o6.y, l(0)
mov o7.xyz, l(0,0,0,0)
mov o8.z, l(0)
mov o9.xy, v4.xyxx
mov o9.z, l(0)
mov o10.xy, v5.xyxx
mov o10.z, l(0)
mov o11.xyz, l(0,0,0,0)
ret 
// Approximately 41 instruction slots used
