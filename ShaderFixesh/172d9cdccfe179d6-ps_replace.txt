// ps grass
Texture2D<float4> t15 : register(t15);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t0 : register(t0);

SamplerState s15_s : register(s15);

SamplerState s6_s : register(s6);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[31];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float3 v1 : TEXCOORD7,
  float w1 : DEPTHVALUE0,
  float4 v2 : FOGFACTOR0,
  float4 v3 : TEXCOORD6,
  float4 v4 : TEXCOORD0,
  float3 v5 : TEXCOORD4,
  float3 v6 : WORLDVIEWNORMAL0,
  float3 v7 : WORLDVIEWPOSITION0,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(1.32679486e-006,1);
  r1.xyzw = t0.Sample(s0_s, v4.xy).xyzw;
  r1.xyzw = r1.xyzw;
  r2.xyz = cb0[29].xyz * cb0[23].xyz;
  r3.xyz = cb0[24].xyz / cb0[24].www;
  r0.z = -0.5;
  r0.z = 1 + r0.z;
  r0.z = cb0[24].w * r0.z;
  r4.xyz = float3(0.5,0.5,0.5) + r0.zzz;
  r0.zw = float2(-0.699999988,-0.699999988);
  r0.zw = v4.xy + r0.zw;
  r0.x = dot(r0.zw, r0.xy);
  r0.x = 0.200000003 + r0.x;
  r0.yzw = float3(0.850000024,0.850000024,0.850000024) * r1.xyz;
  r0.x = 0.400000006 * r0.x;
  r1.xyz = -r0.yzw;
  r1.xyz = float3(0.150000006,0.150000006,0.150000006) + r1.xyz;
  r1.xyz = r1.xyz * r0.xxx;
  r0.xyz = r1.xyz + r0.yzw;
  r1.xyz = cb0[30].xyz + r2.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  r0.xyz = r0.xyz * r3.xyz;
  r0.xyz = r0.xyz * r4.xyz;
  r2.w = cb0[30].w * r1.w;
  r1.xyz = v3.xyz;
  r0.w = v3.w;
  r0.w = r0.w;
  r3.x = -1;
  r3.x = (int)r3.x + asint(cb0[18].x);
  r3.y = -r0.w;
  r0.w = max(r3.y, r0.w);
  r3.y = cmp(r0.w < cb0[19].x);
  if (r3.y != 0) {
    r3.z = 0;
  }
  if (r3.y == 0) {
    r3.y = cmp(r0.w < cb0[19].y);
    if (r3.y != 0) {
      r3.z = 1;
    }
    if (r3.y == 0) {
      r0.w = cmp(r0.w < cb0[19].z);
      if (r0.w != 0) {
        r3.z = 2;
      }
      if (r0.w == 0) {
        r3.z = r3.x;
      }
    }
  }
  r3.z = r3.z;
  r0.w = (int)r3.z * 4;
  r4.xyzw = cb0[r0.w+2].xyzw * r1.xxxx;
  r5.xyzw = cb0[r0.w+3].xyzw * r1.yyyy;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.xyzw = cb0[r0.w+4].xyzw * r1.zzzz;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.xyzw = cb0[r0.w+5].xyzw * float4(1,1,1,1);
  r4.xyzw = r5.xywz + r4.xywz;
  r0.w = r4.w / r4.z;
  r1.xy = float2(0.5,0.5) * r4.xy;
  r1.xy = r1.xy / r4.zz;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r1.y = -r1.y;
  r1.y = 1 + r1.y;
  r1.x = r1.x;
  r1.y = r1.y;
  r3.z = r3.z;
  r3.xy = float2(1,1);
  r1.z = cmp(1 < asint(cb0[18].x));
  if (r1.z != 0) {
    r3.x = 0.5;
  }
  r1.z = cmp(2 < asint(cb0[18].x));
  if (r1.z != 0) {
    r3.y = 0.5;
  }
  r1.z = 2;
  r1.z = (uint)r3.z % (uint)r1.z;
  r1.z = (int)r1.z;
  r1.x = r1.z + r1.x;
  r5.x = r1.x * r3.x;
  r1.x = 0;
  r1.z = 1;
  r1.z = cmp((uint)r1.z < (uint)r3.z);
  if (r1.z != 0) {
    r1.x = 1;
  }
  r1.x = (int)r1.x;
  r1.x = r1.x + r1.y;
  r5.y = r1.x * r3.y;
  r5.x = r5.x;
  r5.y = r5.y;
  r5.xy = r5.xy;
  r1.x = max(0, cb0[22].x);
  r1.x = min(1, r1.x);
  r3.xyw = float3(-1,-1,-1);
  r3.xyw = cb0[21].xyz + r3.xyw;
  r1.xyz = r3.xyw * r1.xxx;
  r1.xyz = float3(1,1,1) + r1.xyz;
  r5.xy = r5.xy;
  r0.w = r0.w;
  r3.z = r3.z;
  r3.x = 0;
  r3.y = asint(cb0[18].y);
  r6.x = r3.y;
  r3.y = asint(cb0[18].y);
  r6.y = r3.y;
  r3.y = -1;
  r3.w = r3.x;
  r4.w = r3.y;
    r5.z = -1;
    r5.w = r3.w;
    r6.z = r5.z;
      r7.x = (int)r4.w;
      r7.y = (int)r6.z;
      r7.xy = r7.xy / r6.xy;
      r7.zw = r6.xy;
      r7.xy = r7.xy + r5.xy;
      r6.w = r0.w;
      r8.x = r3.z;
      r8.yz = float2(1,1) / r7.zw;
      r9.xy = r7.xy * r7.zw;
      r9.xy = float2(0.5,0.5) + r9.xy;
      r9.xy = frac(r9.xy);
      r7.xy = r7.xy * r7.zw;
      r7.xy = float2(0.5,0.5) + r7.xy;
      r7.xy = floor(r7.xy);
      r7.xy = r7.xy / r7.zw;
      r7.zw = float2(0,0) * r8.yz;
      r7.zw = r7.xy + r7.zw;
      r6.w = r6.w;
      r8.x = r8.x;
      r7.zw = r7.zw;
      r7.z = t15.Sample(s15_s, r7.zw).x;
      r7.z = r7.z;
      r7.z = r7.z;
      if (r8.x == 0) {
        r7.w = cb0[20].x + r7.z;
        r7.w = cmp(r6.w >= r7.w);
        r7.w = r7.w ? 1 : 0;
      } else {
        r7.z = cb0[20].y + r7.z;
        r7.z = cmp(r6.w >= r7.z);
        r7.w = r7.z ? 1 : 0;
      }
      r7.w = r7.w;
      r7.w = r7.w;
      r9.zw = float2(0,1) * r8.yz;
      r9.zw = r9.zw + r7.xy;
      r9.zw = r9.zw;
      r7.z = t15.Sample(s15_s, r9.zw).x;
      r7.z = r7.z;
      r7.z = r7.z;
      if (r8.x == 0) {
        r8.w = cb0[20].x + r7.z;
        r8.w = cmp(r6.w >= r8.w);
        r8.w = r8.w ? 1 : 0;
      } else {
        r7.z = cb0[20].y + r7.z;
        r7.z = cmp(r6.w >= r7.z);
        r8.w = r7.z ? 1 : 0;
      }
      r8.w = r8.w;
      r8.w = r8.w;
      r9.zw = float2(1,0) * r8.yz;
      r9.zw = r9.zw + r7.xy;
      r9.zw = r9.zw;
      r7.z = t15.Sample(s15_s, r9.zw).x;
      r7.z = r7.z;
      r7.z = r7.z;
      if (r8.x == 0) {
        r9.z = cb0[20].x + r7.z;
        r9.z = cmp(r6.w >= r9.z);
        r9.z = r9.z ? 1 : 0;
      } else {
        r7.z = cb0[20].y + r7.z;
        r7.z = cmp(r6.w >= r7.z);
        r9.z = r7.z ? 1 : 0;
      }
      r9.z = r9.z;
      r9.z = r9.z;
      r8.yz = float2(1,1) * r8.yz;
      r7.xy = r8.yz + r7.xy;
      r7.xy = r7.xy;
      r7.x = t15.Sample(s15_s, r7.xy).x;
      r7.x = r7.x;
      r7.x = r7.x;
      if (r8.x == 0) {
        r7.y = cb0[20].x + r7.x;
        r7.y = cmp(r6.w >= r7.y);
        r7.y = r7.y ? 1 : 0;
      } else {
        r7.x = cb0[20].y + r7.x;
        r6.w = cmp(r6.w >= r7.x);
        r7.y = r6.w ? 1 : 0;
      }
      r7.y = r7.y;
      r7.y = r7.y;
      r6.w = -r7.w;
      r6.w = r8.w + r6.w;
      r6.w = r9.y * r6.w;
      r6.w = r7.w + r6.w;
      r7.x = -r9.z;
      r7.x = r7.y + r7.x;
      r7.x = r9.y * r7.x;
      r7.x = r9.z + r7.x;
      r7.y = -r6.w;
      r7.x = r7.x + r7.y;
      r7.x = r9.x * r7.x;
      r6.w = r7.x + r6.w;
      r6.w = r6.w;
      r5.w = r6.w + r5.w;
    r3.w = r5.w;
  r0.w = r3.w;
  r0.w = r0.w;
  r3.xyw = float3(-1,-1,-1);
  r1.xyz = r3.xyw + r1.xyz;
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = float3(1,1,1) + r1.xyz;
  r1.xyz = r1.xyz;
  r3.z = r3.z;
  r4.xyz = r4.xyz;
  r1.xyz = r1.xyz;
  r0.w = -1;
  r0.w = (int)r0.w + asint(cb0[18].x);
  r0.w = cmp((int)r0.w == (int)r3.z);
  if (r0.w != 0) {
    r3.xy = float2(0.5,0.5) * r4.xy;
    r3.xy = r3.xy / r4.zz;
    r3.xy = float2(0.5,0.5) + r3.xy;
    r0.w = -r3.y;
    r0.w = 1 + r0.w;
    r3.y = cmp(r3.x < 0);
    r3.x = cmp(1 < r3.x);
    r3.x = (int)r3.x | (int)r3.y;
    r3.y = cmp(r0.w < 0);
    r3.x = (int)r3.y | (int)r3.x;
    r0.w = cmp(1 < r0.w);
    r0.w = (int)r0.w | (int)r3.x;
    if (r0.w != 0) {
      r1.xyz = int3(1,1,1);
    }
  }
  r1.xyz = r1.xyz;
  r1.xyz = r1.xyz;
  r0.xyz = r1.xyz * r0.xyz;
  r0.w = cmp(r1.w < cb0[0].x);
  if (r0.w != 0) {
    if (-1 != 0) discard;
  }
  r0.xyz = r0.xyz;
  r1.xy = v2.zw;
  r3.xyz = t6.Sample(s6_s, v2.xy).xyz;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r4.xyz = -cb0[1].xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r1.yzw = r3.xyz * r1.yyy;
  r1.yzw = cb0[1].xyz + r1.yzw;
  r3.xyz = -r1.yzw;
  r0.xyz = r3.xyz + r0.xyz;
  r0.xyz = r1.xxx * r0.xyz;
  r2.xyz = r1.yzw + r0.xyz;
  r2.xyz = r2.xyz;
  r2.xyz = r2.xyz;
  r2.w = r2.w;
  r0.yzw = int3(0,0,0);
  r0.x = w1.x;
  o0.xyzw = r2.xyzw;
  o1.xyzw = r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jan 20 19:55:37 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 7   xyz         1     NONE   float
// DEPTHVALUE               0      w        1     NONE   float      w
// FOGFACTOR                0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy
// TEXCOORD                 4   xyz         5     NONE   float
// WORLDVIEWNORMAL          0   xyz         6     NONE   float
// WORLDVIEWPOSITION        0   xyz         7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[31], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s6, mode_default
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 10
mov r0.xy, l(0.00000132679486,1.000000,0,0)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0
mov r1.xyzw, r1.xyzw
mul r2.xyz, cb0[23].xyzx, cb0[29].xyzx
div r3.xyz, cb0[24].xyzx, cb0[24].wwww
mov r0.z, l(-0.500000)
add r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, cb0[24].w
add r4.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000)
mov r0.zw, l(-0.000000,-0.000000,-0.700000,-0.700000)
add r0.zw, r0.zzzw, v4.xxxy
dp2 r0.x, r0.zwzz, r0.xyxx
add r0.x, r0.x, l(0.200000)
mul r0.yzw, r1.xxyz, l(0.000000, 0.850000, 0.850000, 0.850000)
mul r0.x, r0.x, l(0.400000)
mov r1.xyz, -r0.yzwy
add r1.xyz, r1.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000)
mul r1.xyz, r0.xxxx, r1.xyzx
add r0.xyz, r0.yzwy, r1.xyzx
add r1.xyz, r2.xyzx, cb0[30].xyzx
mul r0.xyz, r0.xyzx, r1.xyzx
mul r0.xyz, r3.xyzx, r0.xyzx
mul r0.xyz, r4.xyzx, r0.xyzx
mul r2.w, r1.w, cb0[30].w
mov r1.xyz, v3.xyzx
mov r0.w, v3.w
mov r0.w, r0.w
ineg r3.x, l(1)
iadd r3.x, r3.x, cb0[18].x
mov r3.y, -r0.w
max r0.w, r0.w, r3.y
lt r3.y, r0.w, cb0[19].x
if_nz r3.y
  mov r3.z, l(0)
endif
if_z r3.y
  lt r3.y, r0.w, cb0[19].y
  if_nz r3.y
    mov r3.z, l(1)
  endif
  if_z r3.y
    lt r0.w, r0.w, cb0[19].z
    if_nz r0.w
      mov r3.z, l(2)
    endif
    if_z r0.w
      mov r3.z, r3.x
    endif
  endif
endif
mov r3.z, r3.z
imul null, r0.w, r3.z, l(4)
mul r4.xyzw, r1.xxxx, cb0[r0.w + 2].xyzw
mul r5.xyzw, r1.yyyy, cb0[r0.w + 3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb0[r0.w + 4].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[r0.w + 5].xyzw
add r4.xyzw, r4.xywz, r5.xywz
div r0.w, r4.w, r4.z
mul r1.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r1.xy, r1.xyxx, r4.zzzz
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov r1.y, -r1.y
add r1.y, r1.y, l(1.000000)
mov r1.x, r1.x
mov r1.y, r1.y
mov r3.z, r3.z
mov r3.xy, l(1.000000,1.000000,0,0)
ilt r1.z, l(1), cb0[18].x
if_nz r1.z
  mov r3.x, l(0.500000)
endif
ilt r1.z, l(2), cb0[18].x
if_nz r1.z
  mov r3.y, l(0.500000)
endif
mov r1.z, l(2)
udiv null, r1.z, r3.z, r1.z
itof r1.z, r1.z
add r1.x, r1.x, r1.z
mul r5.x, r3.x, r1.x
mov r1.x, l(0)
mov r1.z, l(1)
ult r1.z, r1.z, r3.z
if_nz r1.z
  mov r1.x, l(1)
endif
itof r1.x, r1.x
add r1.x, r1.y, r1.x
mul r5.y, r3.y, r1.x
mov r5.x, r5.x
mov r5.y, r5.y
mov r5.xy, r5.xyxx
max r1.x, cb0[22].x, l(0.000000)
min r1.x, r1.x, l(1.000000)
mov r3.xyw, l(-1.000000,-1.000000,-0.000000,-1.000000)
add r3.xyw, r3.xyxw, cb0[21].xyxz
mul r1.xyz, r1.xxxx, r3.xywx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r5.xy, r5.xyxx
mov r0.w, r0.w
mov r3.z, r3.z
mov r3.x, l(0)
itof r3.y, cb0[18].y
mul r6.x, r3.y, l(2.000000)
itof r3.y, cb0[18].y
mul r6.y, r3.y, l(2.000000)
mov r3.y, l(-1)
mov r3.w, r3.x
mov r4.w, r3.y
loop
  ige r5.z, l(1), r4.w
  breakc_z r5.z
  mov r5.z, l(-1)
  mov r5.w, r3.w
  mov r6.z, r5.z
  loop
    ige r6.w, l(1), r6.z
    breakc_z r6.w
    itof r7.x, r4.w
    itof r7.y, r6.z
    div r7.xy, r7.xyxx, r6.xyxx
    mov r7.zw, r6.xxxy
    add r7.xy, r5.xyxx, r7.xyxx
    mov r6.w, r0.w
    mov r8.x, r3.z
    div r8.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r7.zzwz
    mul r9.xy, r7.zwzz, r7.xyxx
    add r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    frc r9.xy, r9.xyxx
    mul r7.xy, r7.zwzz, r7.xyxx
    add r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    round_ni r7.xy, r7.xyxx
    div r7.xy, r7.xyxx, r7.zwzz
    mul r7.zw, r8.yyyz, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r7.zw, r7.zzzw, r7.xxxy
    mov r6.w, r6.w
    mov r8.x, r8.x
    mov r7.zw, r7.zzzw
    sample_indexable(texture2d)(float,float,float,float) r7.z, r7.zwzz, t15.yzxw, s15
    mov r7.z, r7.z
    mov r7.z, r7.z
    if_z r8.x
      add r7.w, r7.z, cb0[20].x
      ge r7.w, r6.w, r7.w
      movc r7.w, r7.w, l(1.000000), l(0)
    else
      add r7.z, r7.z, cb0[20].y
      ge r7.z, r6.w, r7.z
      movc r7.w, r7.z, l(1.000000), l(0)
    endif
    mov r7.w, r7.w
    mov r7.w, r7.w
    mul r9.zw, r8.yyyz, l(0.000000, 0.000000, 0.000000, 1.000000)
    add r9.zw, r7.xxxy, r9.zzzw
    mov r9.zw, r9.zzzw
    sample_indexable(texture2d)(float,float,float,float) r7.z, r9.zwzz, t15.yzxw, s15
    mov r7.z, r7.z
    mov r7.z, r7.z
    if_z r8.x
      add r8.w, r7.z, cb0[20].x
      ge r8.w, r6.w, r8.w
      movc r8.w, r8.w, l(1.000000), l(0)
    else
      add r7.z, r7.z, cb0[20].y
      ge r7.z, r6.w, r7.z
      movc r8.w, r7.z, l(1.000000), l(0)
    endif
    mov r8.w, r8.w
    mov r8.w, r8.w
    mul r9.zw, r8.yyyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    add r9.zw, r7.xxxy, r9.zzzw
    mov r9.zw, r9.zzzw
    sample_indexable(texture2d)(float,float,float,float) r7.z, r9.zwzz, t15.yzxw, s15
    mov r7.z, r7.z
    mov r7.z, r7.z
    if_z r8.x
      add r9.z, r7.z, cb0[20].x
      ge r9.z, r6.w, r9.z
      movc r9.z, r9.z, l(1.000000), l(0)
    else
      add r7.z, r7.z, cb0[20].y
      ge r7.z, r6.w, r7.z
      movc r9.z, r7.z, l(1.000000), l(0)
    endif
    mov r9.z, r9.z
    mov r9.z, r9.z
    mul r8.yz, r8.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
    add r7.xy, r7.xyxx, r8.yzyy
    mov r7.xy, r7.xyxx
    sample_indexable(texture2d)(float,float,float,float) r7.x, r7.xyxx, t15.xyzw, s15
    mov r7.x, r7.x
    mov r7.x, r7.x
    if_z r8.x
      add r7.y, r7.x, cb0[20].x
      ge r7.y, r6.w, r7.y
      movc r7.y, r7.y, l(1.000000), l(0)
    else
      add r7.x, r7.x, cb0[20].y
      ge r6.w, r6.w, r7.x
      movc r7.y, r6.w, l(1.000000), l(0)
    endif
    mov r7.y, r7.y
    mov r7.y, r7.y
    mov r6.w, -r7.w
    add r6.w, r6.w, r8.w
    mul r6.w, r6.w, r9.y
    add r6.w, r6.w, r7.w
    mov r7.x, -r9.z
    add r7.x, r7.x, r7.y
    mul r7.x, r7.x, r9.y
    add r7.x, r7.x, r9.z
    mov r7.y, -r6.w
    add r7.x, r7.y, r7.x
    mul r7.x, r7.x, r9.x
    add r6.w, r6.w, r7.x
    mov r6.w, r6.w
    add r5.w, r5.w, r6.w
    iadd r6.z, r6.z, l(1)
  endloop
  mov r3.w, r5.w
  iadd r4.w, r4.w, l(1)
endloop
div r0.w, r3.w, l(9.000000)
mov r0.w, r0.w
mov r3.xyw, l(-1.000000,-1.000000,-0.000000,-1.000000)
add r1.xyz, r1.xyzx, r3.xywx
mul r1.xyz, r0.wwww, r1.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r1.xyz, r1.xyzx
mov r3.z, r3.z
mov r4.xyz, r4.xyzx
mov r1.xyz, r1.xyzx
ineg r0.w, l(1)
iadd r0.w, r0.w, cb0[18].x
ieq r0.w, r0.w, r3.z
if_nz r0.w
  mul r3.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  div r3.xy, r3.xyxx, r4.zzzz
  add r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  mov r0.w, -r3.y
  add r0.w, r0.w, l(1.000000)
  lt r3.y, r3.x, l(0.000000)
  lt r3.x, l(1.000000), r3.x
  or r3.x, r3.x, r3.y
  lt r3.y, r0.w, l(0.000000)
  or r3.x, r3.y, r3.x
  lt r0.w, l(1.000000), r0.w
  or r0.w, r0.w, r3.x
  if_nz r0.w
    itof r1.xyz, l(1, 1, 1, 0)
  endif
endif
mov r1.xyz, r1.xyzx
mov r1.xyz, r1.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx
lt r0.w, r1.w, cb0[0].x
if_nz r0.w
  discard_nz l(-1)
endif
mov r0.xyz, r0.xyzx
mov r1.xy, v2.zwzz
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t6.xyzw, s6
mov r3.xyz, r3.xyzx
mov r3.xyz, r3.xyzx
mov r4.xyz, -cb0[1].xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r1.yzw, r1.yyyy, r3.xxyz
add r1.yzw, r1.yyzw, cb0[1].xxyz
mov r3.xyz, -r1.yzwy
add r0.xyz, r0.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, r1.xxxx
add r2.xyz, r0.xyzx, r1.yzwy
mov r2.xyz, r2.xyzx
mov r2.xyz, r2.xyzx
mov r2.w, r2.w
itof r0.yzw, l(0, 0, 0, 1)
mov r0.x, v1.w
mov o0.xyzw, r2.xyzw
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
