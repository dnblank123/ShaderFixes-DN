// ---- Created with 3Dmigoto v1.3.16 on Sat Jan 20 19:51:51 2024
cbuffer cb0 : register(b0)
{
  float4 cb0[139];
}




// 3Dmigoto declarations
#define cmp -


void main(
  int4 v0 : BLENDINDICES0,
  float4 v1 : NORMAL0,
  float3 v2 : POSITION0,
  float4 v3 : TEXCOORD0,
  float v4 : TEXCOORD5,
  float4 v5 : BLENDWEIGHT0,
  out float4 o0 : SV_POSITION0,
  out float3 o1 : TEXCOORD7,
  out float p1 : DEPTHVALUE0,
  out float4 o2 : FOGFACTOR0,
  out float4 o3 : TEXCOORD6,
  out float4 o4 : TEXCOORD0,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : WORLDVIEWNORMAL0,
  out float3 o7 : WORLDVIEWPOSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0,0,0);
  r0.w = cb0[136].x;
  r0.w = r0.w;
  r1.x = v4.x;
  r2.xyz = v2.xyz;
  r1.y = 1;
  r1.zw = -cb0[138].xy;
  r1.zw = r2.xz + r1.zw;
  r3.x = dot(r1.zw, r1.zw);
  r3.x = sqrt(r3.x);
  r1.zw = r1.zw / r3.xx;
  r3.y = dot(cb0[138].zw, cb0[138].zw);
  r3.y = sqrt(r3.y);
  r3.z = 0;
  r3.z = cmp(r3.z == r3.y);
  if (r3.z != 0) {
    r3.y = 1;
  }
  r3.zw = cb0[138].zw / r3.yy;
  r4.xy = -r1.zw;
  r3.z = dot(r4.xy, r3.zw);
  r3.w = 0;
  r3.w = cmp(r3.z < r3.w);
  if (r3.w != 0) {
    r3.w = -r3.z;
    r3.z = 0.300000012 * r3.w;
  }
  r3.w = -50;
  r3.w = r3.x + r3.w;
  r3.w = r3.w / 150;
  r3.w = max(0, r3.w);
  r3.w = min(1, r3.w);
  r3.w = 2 * r3.w;
  r4.x = -1;
  r3.w = r4.x + r3.w;
  r4.x = -r3.w;
  r3.w = max(r4.x, r3.w);
  r3.w = -r3.w;
  r3.w = 1 + r3.w;
  r4.x = 3;
  r4.x = r4.x * r3.w;
  r4.x = r4.x * r3.w;
  r4.y = 2;
  r4.y = r4.y * r3.w;
  r4.y = r4.y * r3.w;
  r3.w = r4.y * r3.w;
  r3.w = -r3.w;
  r3.w = r4.x + r3.w;
  r3.z = r3.w * r3.z;
  r3.y = r3.z * r3.y;
  r0.w = r3.y + r0.w;
  r0.w = cos(r0.w);
  r0.w = r0.w * r1.x;
  r3.y = r3.x / 100;
  r3.y = min(1, r3.y);
  r0.w = r3.y * r0.w;
  r3.y = 0;
  r3.x = -r3.x;
  r3.x = 100 + r3.x;
  r3.x = max(r3.y, r3.x);
  r1.zw = r3.xx * r1.zw;
  r1.xz = r1.zw * r1.xx;
  r1.xz = float2(0.0350000001,0.0350000001) * r1.xz;
  r1.xz = r2.xz + r1.xz;
  r2.xz = r1.xz + r0.ww;
  r1.xzw = cb0[4].xyz * r2.xxx;
  r3.xyz = cb0[5].xyz * r2.yyy;
  r1.xzw = r3.xyz + r1.xzw;
  r3.xyz = cb0[6].xyz * r2.zzz;
  r1.xzw = r3.xyz + r1.xzw;
  r3.xyz = cb0[7].xyz * r1.yyy;
  r1.xzw = r3.xyz + r1.xzw;
  r3.xyzw = cb0[0].xyzw * r1.xxxx;
  r4.xyzw = cb0[1].xyzw * r1.zzzz;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = cb0[2].xyzw * r1.wwww;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = float4(1,1,1,1) * cb0[3].xyzw;
  r3.xyzw = r4.zxyw + r3.zxyw;
  r0.w = 0;
  r1.xzw = cb0[132].xyz * v1.xxx;
  r4.xyz = cb0[133].xyz * v1.yyy;
  r1.xzw = r4.xyz + r1.xzw;
  r4.xyz = cb0[134].xyz * v1.zzz;
  r1.xzw = r4.xyz + r1.xzw;
  r4.xyz = cb0[135].xyz * r0.www;
  r1.xzw = r4.xyz + r1.xzw;
  r4.xyz = cb0[132].xyz * r2.xxx;
  r5.xyz = cb0[133].xyz * r2.yyy;
  r4.xyz = r5.xyz + r4.xyz;
  r5.xyz = cb0[134].xyz * r2.zzz;
  r4.xyz = r5.xyz + r4.xyz;
  r5.xyz = cb0[135].xyz * r1.yyy;
  r4.xyz = r5.xyz + r4.xyz;
  r5.xyz = int3(1,0,0);
  r6.xy = v3.xy;
  r6.zw = r3.yz / r3.ww;
  r6.zw = float2(1,1) + r6.zw;
  r6.zw = float2(0.5,0.5) * r6.zw;
  r0.w = -r6.w;
  r0.w = 1 + r0.w;
  r3.x = r3.x;
  r1.y = -r3.x;
  r1.y = cb0[137].z + r1.y;
  r7.xy = cb0[137].xy * r1.yy;
  r7.xy = max(float2(0,0), r7.xy);
  r7.xz = min(float2(1,1), r7.yx);
  r7.w = r7.x * r7.x;
  r7.z = r7.z;
  r7.w = r7.w;
  r7.zw = r7.zw;
  r2.xz = r2.xz;
  r2.y = r2.y;
  r2.w = r3.x;
  r3.x = r3.x;
  r1.y = 0.00999999978 * r3.x;
  r1.y = r1.y;
  o0.xyzw = r3.yzxw;
  o1.xyz = r5.xyz;
  p1.x = r1.y;
  o2.x = r6.z;
  o2.y = r0.w;
  o2.zw = r7.zw;
  o3.xyzw = r2.xyzw;
  o5.xyz = r0.xyz;
  o6.xyz = r1.xzw;
  o7.xyz = r4.xyz;
  o4.xy = r6.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jan 20 19:51:51 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int
// NORMAL                   0   xyzw        1     NONE   float   xyz
// POSITION                 0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xy          3     NONE   float   xy
// TEXCOORD                 5   x           4     NONE   float   x
// BLENDWEIGHT              0   xyzw        5     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 7   xyz         1     NONE   float   xyz
// DEPTHVALUE               0      w        1     NONE   float      w
// FOGFACTOR                0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// WORLDVIEWNORMAL          0   xyz         6     NONE   float   xyz
// WORLDVIEWPOSITION        0   xyz         7     NONE   float   xyz
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[139], immediateIndexed
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 8
mov r0.xyz, l(0,0,0,0)
mov r0.w, cb0[136].x
mov r0.w, r0.w
mov r1.x, v4.x
mov r2.xyz, v2.xyzx
mov r1.y, l(1.000000)
mov r1.zw, -cb0[138].xxxy
add r1.zw, r1.zzzw, r2.xxxz
dp2 r3.x, r1.zwzz, r1.zwzz
sqrt r3.x, r3.x
div r1.zw, r1.zzzw, r3.xxxx
dp2 r3.y, cb0[138].zwzz, cb0[138].zwzz
sqrt r3.y, r3.y
itof r3.z, l(0)
eq r3.z, r3.z, r3.y
if_nz r3.z
  mov r3.y, l(1.000000)
endif
div r3.zw, cb0[138].zzzw, r3.yyyy
mov r4.xy, -r1.zwzz
dp2 r3.z, r4.xyxx, r3.zwzz
itof r3.w, l(0)
lt r3.w, r3.z, r3.w
if_nz r3.w
  mov r3.w, -r3.z
  mul r3.z, r3.w, l(0.300000)
endif
mov r3.w, l(-50.000000)
add r3.w, r3.w, r3.x
div r3.w, r3.w, l(150.000000)
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)
mul r3.w, r3.w, l(2.000000)
mov r4.x, l(-1.000000)
add r3.w, r3.w, r4.x
mov r4.x, -r3.w
max r3.w, r3.w, r4.x
mov r3.w, -r3.w
add r3.w, r3.w, l(1.000000)
itof r4.x, l(3)
mul r4.x, r3.w, r4.x
mul r4.x, r3.w, r4.x
itof r4.y, l(2)
mul r4.y, r3.w, r4.y
mul r4.y, r3.w, r4.y
mul r3.w, r3.w, r4.y
mov r3.w, -r3.w
add r3.w, r3.w, r4.x
mul r3.z, r3.z, r3.w
mul r3.y, r3.y, r3.z
add r0.w, r0.w, r3.y
sincos null, r0.w, r0.w
mul r0.w, r1.x, r0.w
div r3.y, r3.x, l(100.000000)
min r3.y, r3.y, l(1.000000)
mul r0.w, r0.w, r3.y
itof r3.y, l(0)
mov r3.x, -r3.x
add r3.x, r3.x, l(100.000000)
max r3.x, r3.x, r3.y
mul r1.zw, r1.zzzw, r3.xxxx
mul r1.xz, r1.xxxx, r1.zzwz
mul r1.xz, r1.xxzx, l(0.035000, 0.000000, 0.035000, 0.000000)
add r1.xz, r1.xxzx, r2.xxzx
add r2.xz, r0.wwww, r1.xxzx
mul r1.xzw, r2.xxxx, cb0[4].xxyz
mul r3.xyz, r2.yyyy, cb0[5].xyzx
add r1.xzw, r1.xxzw, r3.xxyz
mul r3.xyz, r2.zzzz, cb0[6].xyzx
add r1.xzw, r1.xxzw, r3.xxyz
mul r3.xyz, r1.yyyy, cb0[7].xyzx
add r1.xzw, r1.xxzw, r3.xxyz
mul r3.xyzw, r1.xxxx, cb0[0].xyzw
mul r4.xyzw, r1.zzzz, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r1.wwww, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r3.xyzw, r3.zxyw, r4.zxyw
itof r0.w, l(0)
mul r1.xzw, v1.xxxx, cb0[132].xxyz
mul r4.xyz, v1.yyyy, cb0[133].xyzx
add r1.xzw, r1.xxzw, r4.xxyz
mul r4.xyz, v1.zzzz, cb0[134].xyzx
add r1.xzw, r1.xxzw, r4.xxyz
mul r4.xyz, r0.wwww, cb0[135].xyzx
add r1.xzw, r1.xxzw, r4.xxyz
mul r4.xyz, r2.xxxx, cb0[132].xyzx
mul r5.xyz, r2.yyyy, cb0[133].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, r2.zzzz, cb0[134].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, r1.yyyy, cb0[135].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
itof r5.xyz, l(1, 0, 0, 0)
mov r6.xy, v3.xyxx
div r6.zw, r3.yyyz, r3.wwww
add r6.zw, r6.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
mov r0.w, -r6.w
add r0.w, r0.w, l(1.000000)
mov r3.x, r3.x
mov r1.y, -r3.x
add r1.y, r1.y, cb0[137].z
mul r7.xy, r1.yyyy, cb0[137].xyxx
max r7.xy, r7.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r7.xz, r7.yyxy, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r7.w, r7.x, r7.x
mov r7.z, r7.z
mov r7.w, r7.w
mov r7.zw, r7.zzzw
mov r2.xz, r2.xxzx
mov r2.y, r2.y
mov r2.w, r3.x
mov r3.x, r3.x
mul r1.y, r3.x, l(0.010000)
mov r1.y, r1.y
mov o0.xyzw, r3.yzxw
mov o1.xyz, r5.xyzx
mov o1.w, r1.y
mov o2.x, r6.z
mov o2.y, r0.w
mov o2.zw, r7.zzzw
mov o3.xyzw, r2.xyzw
mov o5.xyz, r0.xyzx
mov o6.xyz, r1.xzwx
mov o7.xyz, r4.xyzx
mov o4.xy, r6.xyxx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
