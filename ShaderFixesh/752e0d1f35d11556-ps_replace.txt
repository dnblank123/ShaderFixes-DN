// ---- Created with 3Dmigoto v1.3.16 on Wed Jan 24 19:50:38 2024
Texture2D<float4> t15 : register(t15);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t0 : register(t0);

SamplerState s15_s : register(s15);

SamplerState s8_s : register(s8);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s3_s : register(s3);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[71];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float v1 : CLIPDISTANCE0,
  float3 w1 : TEXCOORD7,
  float v2 : DEPTHVALUE0,
  float2 w2 : TEXCOORD0,
  float4 v3 : FOGFACTOR0,
  float4 v4 : TEXCOORD6,
  float4 v5 : TEXCOORD2,
  float3 v6 : TEXCOORD4,
  float3 v7 : WORLDVIEWNORMAL0,
  float3 v8 : WORLDVIEWPOSITION0,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 0;
  r0.x = cmp(v1.x < r0.x);
  if (r0.x != 0) {
    if (-1 != 0) discard;
  }
  r0.x = cb0[70].x;
  r0.x = r0.x;
  r0.y = cb0[70].y;
  r0.y = r0.y;
  r0.z = cb0[70].z;
  r0.z = r0.z;
  r0.w = cb0[1].x;
  r0.w = r0.w;
  r1.xyz = int3(0,0,0);
  r1.xyz = r1.xyz;
  r1.w = dot(v7.xyz, v7.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = v7.xyz * r1.www;
  r3.xyz = v8.xyz;
  r4.xyz = -r3.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r1.w = dot(r2.xyz, r4.xyz);
  r1.w = max(0, r1.w);
  r1.w = min(1, r1.w);
  r2.xyz = r2.xyz;
  r4.xyz = r4.xyz;
  r1.w = r1.w;
  r5.xyz = -cb0[28].xyz;
  r4.xyz = r5.xyz + r4.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r4.xyz * r2.www;
  r2.xyz = r2.xyz;
  r5.xyz = -cb0[28].xyz;
  r2.w = cb0[26].x;
  r2.w = r2.w;
  r3.w = dot(r2.xyz, r5.xyz);
  r3.w = r3.w + r2.w;
  r4.w = 1;
  r2.w = r4.w + r2.w;
  r2.w = r3.w / r2.w;
  r2.w = max(0, r2.w);
  r2.w = min(1, r2.w);
  r2.w = r2.w;
  r2.w = r2.w;
  r5.xyz = -cb0[28].xyz;
  r3.w = dot(r5.xyz, r4.xyz);
  r3.w = max(0, r3.w);
  r3.w = min(1, r3.w);
  r4.x = 2;
  r4.x = r4.x * r3.w;
  r3.w = r4.x * r3.w;
  r4.x = cb0[26].y;
  r3.w = r4.x * r3.w;
  r3.w = 0.5 + r3.w;
  r4.x = 1;
  r4.y = 1;
  r4.y = -r4.y;
  r4.y = r4.y + r3.w;
  r4.z = 1;
  r4.w = -r2.w;
  r4.z = r4.z + r4.w;
  r4.w = 1;
  r4.w = r4.w * r4.z;
  r4.z = r4.z * r4.z;
  r4.z = r4.z * r4.z;
  r4.z = r4.w * r4.z;
  r4.y = r4.y * r4.z;
  r4.x = r4.x + r4.y;
  r4.y = 1;
  r4.z = 1;
  r4.z = -r4.z;
  r3.w = r4.z + r3.w;
  r4.z = 1;
  r1.w = -r1.w;
  r1.w = r4.z + r1.w;
  r4.z = 1;
  r4.z = r4.z * r1.w;
  r1.w = r1.w * r1.w;
  r1.w = r1.w * r1.w;
  r1.w = r4.z * r1.w;
  r1.w = r3.w * r1.w;
  r1.w = r4.y + r1.w;
  r4.xyz = cb0[33].xyz * r4.xxx;
  r4.xyz = r4.xyz * r1.www;
  r4.xyz = r4.xyz * r2.www;
  r1.xyz = r4.xyz + r1.xyz;
  r1.w = (int)cb0[27].y;
  r1.w = r1.w;
  r2.w = 0;
  r4.xyz = r1.xyz;
  r3.w = r2.w;
  while (true) {
    r4.w = cmp((int)r3.w < (int)r1.w);
    if (r4.w == 0) break;
    r4.w = r3.w;
    r5.xyz = r2.xyz;
    r6.xyz = r3.xyz;
    r6.xyz = -r6.xyz;
    r6.xyz = cb0[r4.w+38].xyz + r6.xyz;
    r5.w = dot(r6.xyz, r6.xyz);
    r5.w = sqrt(r5.w);
    r6.w = cb0[r4.w+38].w * r5.w;
    r6.w = -r6.w;
    r6.w = 1 + r6.w;
    r6.w = max(0, r6.w);
    r6.xyz = r6.xyz / r5.www;
    r5.x = dot(r5.xyz, r6.xyz);
    r5.x = max(0, r5.x);
    r5.x = min(1, r5.x);
    r5.xyz = cb0[r4.w+43].xyz * r5.xxx;
    r5.xyz = r5.xyz * r6.www;
    r5.xyz = r5.xyz;
    r4.xyz = r5.xyz + r4.xyz;
    r3.w = (int)r3.w + 1;
  }
  r1.x = (int)cb0[27].z;
  r1.x = r1.x;
  r1.y = 0;
  r5.xyz = r4.xyz;
  r1.z = r1.y;
  while (true) {
    r1.w = cmp((int)r1.z < (int)r1.x);
    if (r1.w == 0) break;
    r6.xyz = -r3.xyz;
    r6.xyz = cb0[r1.z+53].xyz + r6.xyz;
    r1.w = dot(r6.xyz, r6.xyz);
    r1.w = sqrt(r1.w);
    r6.xyz = r6.xyz / r1.www;
    r7.xyz = -cb0[r1.z+48].xyz;
    r2.w = dot(r7.xyz, r6.xyz);
    r1.w = cmp(cb0[r1.z+53].w >= r1.w);
    if (r1.w != 0) {
      r1.w = -cb0[r1.z+63].w;
      r1.w = r2.w + r1.w;
      r1.w = r1.w / cb0[r1.z+58].w;
      r1.w = max(0, r1.w);
      r1.w = min(1, r1.w);
      r1.w = log2(r1.w);
      r1.w = cb0[r1.z+48].w * r1.w;
      r1.w = exp2(r1.w);
    } else {
      r1.w = 0;
    }
    r2.w = 0;
    r3.w = dot(r2.xyz, r6.xyz);
    r2.w = max(r3.w, r2.w);
    r6.xyz = cb0[r1.z+58].xyz * r2.www;
    r6.xyz = r6.xyz * r1.www;
    r5.xyz = r6.xyz + r5.xyz;
    r1.z = (int)r1.z + 1;
  }
  r5.xyz = r5.xyz;
  r5.xyz = r5.xyz;
  r1.xyz = cb0[68].xyz * cb0[25].xyz;
  r2.xyz = cb0[69].xyz * r5.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = cb0[68].w;
  r2.xyzw = t0.Sample(s0_s, w2.xy).xyzw;
  r2.xyzw = r2.xyzw;
  r0.z = r0.w * r0.z;
  r0.z = cos(r0.z);
  r0.y = r0.y * r0.z;
  r0.x = r0.x + r0.y;
  r3.xyzw = t3.Sample(s3_s, w2.xy).xyzw;
  r0.xyzw = r3.xyzw * r0.xxxx;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r2.xyz = -r1.xyz;
  r0.xyz = r2.xyz + r0.xyz;
  r0.xyz = r0.www * r0.xyz;
  r1.xyz = r1.xyz + r0.xyz;
  r0.xyz = t7.Sample(s7_s, w2.xy).xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.w = cmp(r2.w < cb0[0].x);
  if (r0.w != 0) {
    if (-1 != 0) discard;
  }
  r0.w = -v5.x;
  r0.w = max(v5.x, r0.w);
  r2.x = -v5.z;
  r2.y = max(v5.z, r2.x);
  r2.z = min(r2.y, r0.w);
  r2.w = max(r2.y, r0.w);
  r2.w = 1 / r2.w;
  r2.z = r2.z * r2.w;
  r2.w = r2.z * r2.z;
  r3.x = 0.0208350997 * r2.w;
  r3.x = -0.0851330012 + r3.x;
  r3.x = r3.x * r2.w;
  r3.x = 0.180141002 + r3.x;
  r3.x = r3.x * r2.w;
  r3.x = -0.330299497 + r3.x;
  r2.w = r3.x * r2.w;
  r2.w = 0.999866009 + r2.w;
  r2.z = r2.z * r2.w;
  r0.w = cmp(r2.y < r0.w);
  r2.y = -2 * r2.z;
  r2.y = 1.57079637 + r2.y;
  r0.w = r0.w ? r2.y : 0;
  r0.w = r0.w + r2.z;
  r2.x = cmp(v5.z < r2.x);
  r2.x = r2.x ? -3.141593 : 0;
  r0.w = r2.x + r0.w;
  r2.x = min(v5.x, v5.z);
  r2.y = max(v5.x, v5.z);
  r2.z = -r2.x;
  r2.x = cmp(r2.x < r2.z);
  r2.z = -r2.y;
  r2.y = cmp(r2.y >= r2.z);
  r2.x = r2.y ? r2.x : 0;
  r2.y = -r0.w;
  r0.w = r2.x ? r2.y : r0.w;
  r0.w = r0.w / 6.28318548;
  r0.w = 1 + r0.w;
  r2.x = frac(r0.w);
  r0.w = 0.5 * v5.y;
  r0.w = -r0.w;
  r2.y = 0.5 + r0.w;
  r2.x = r2.x;
  r2.y = r2.y;
  r2.xyzw = t8.Sample(s8_s, r2.xy).xyzw;
  r2.xyzw = r2.xyzw;
  r0.xyz = r2.xyz * r0.xyz;
  r0.w = 0 * r2.w;
  r0.xyzw = r1.xyzw + r0.xyzw;
  r1.xyz = v4.xyz;
  r1.w = v4.w;
  r1.w = r1.w;
  r2.x = -1;
  r2.x = (int)r2.x + asint(cb0[19].x);
  r2.y = -r1.w;
  r1.w = max(r2.y, r1.w);
  r2.y = cmp(r1.w < cb0[20].x);
  if (r2.y != 0) {
    r2.z = 0;
  }
  if (r2.y == 0) {
    r2.y = cmp(r1.w < cb0[20].y);
    if (r2.y != 0) {
      r2.z = 1;
    }
    if (r2.y == 0) {
      r1.w = cmp(r1.w < cb0[20].z);
      if (r1.w != 0) {
        r2.z = 2;
      }
      if (r1.w == 0) {
        r2.z = r2.x;
      }
    }
  }
  r2.z = r2.z;
  r1.w = (int)r2.z * 4;
  r3.xyzw = cb0[r1.w+3].xyzw * r1.xxxx;
  r4.xyzw = cb0[r1.w+4].xyzw * r1.yyyy;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyzw = cb0[r1.w+5].xyzw * r1.zzzz;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r1.xyzw = cb0[r1.w+6].xyzw * float4(1,1,1,1);
  r1.xyzw = r3.xywz + r1.xywz;
  r1.w = r1.w / r1.z;
  r2.xy = float2(0.5,0.5) * r1.xy;
  r2.xy = r2.xy / r1.zz;
  r2.xy = float2(0.5,0.5) + r2.xy;
  r2.y = -r2.y;
  r2.y = 1 + r2.y;
  r2.x = r2.x;
  r2.y = r2.y;
  r2.z = r2.z;
  r3.xy = float2(1,1);
  r2.w = cmp(1 < asint(cb0[19].x));
  if (r2.w != 0) {
    r3.x = 0.5;
  }
  r2.w = cmp(2 < asint(cb0[19].x));
  if (r2.w != 0) {
    r3.y = 0.5;
  }
  r2.w = 2;
  r2.w = (uint)r2.z % (uint)r2.w;
  r2.w = (int)r2.w;
  r2.x = r2.w + r2.x;
  r4.x = r2.x * r3.x;
  r2.x = 0;
  r2.w = 1;
  r2.w = cmp((uint)r2.w < (uint)r2.z);
  if (r2.w != 0) {
    r2.x = 1;
  }
  r2.x = (int)r2.x;
  r2.x = r2.x + r2.y;
  r4.y = r2.x * r3.y;
  r4.x = r4.x;
  r4.y = r4.y;
  r4.xy = r4.xy;
  r2.x = cmp(0 < cb0[24].z);
  if (r2.x != 0) {
    r2.x = max(0, cb0[24].z);
    r2.x = min(1, r2.x);
    r3.xyz = float3(-1,-1,-1);
    r3.xyz = cb0[23].xyz + r3.xyz;
    r2.xyw = r3.xyz * r2.xxx;
    r2.xyw = float3(1,1,1) + r2.xyw;
  } else {
    r3.x = max(0, cb0[24].y);
    r3.x = min(1, r3.x);
    r3.yzw = float3(-1,-1,-1);
    r3.yzw = cb0[22].xyz + r3.yzw;
    r3.xyz = r3.xxx * r3.yzw;
    r2.xyw = float3(1,1,1) + r3.xyz;
  }
  r2.xyw = r2.xyw;
  r2.xyw = r2.xyw;
  r4.xy = r4.xy;
  r1.w = r1.w;
  r2.z = r2.z;
  r3.x = 0;
  r3.y = asint(cb0[19].y);
  r5.x = 2 * r3.y;
  r3.y = asint(cb0[19].y);
  r5.y = 2 * r3.y;
  r3.y = -1;
  r3.z = r3.x;
  r3.w = r3.y;
  while (true) {
    r4.z = cmp(1 >= (int)r3.w);
    if (r4.z == 0) break;
    r4.z = -1;
    r4.w = r3.z;
    r5.z = r4.z;
    while (true) {
      r5.w = cmp(1 >= (int)r5.z);
      if (r5.w == 0) break;
      r6.x = (int)r3.w;
      r6.y = (int)r5.z;
      r6.xy = r6.xy / r5.xy;
      r6.zw = r5.xy;
      r6.xy = r6.xy + r4.xy;
      r5.w = r1.w;
      r7.x = r2.z;
      r7.yz = float2(1,1) / r6.zw;
      r8.xy = r6.xy * r6.zw;
      r8.xy = float2(0.5,0.5) + r8.xy;
      r8.xy = frac(r8.xy);
      r6.xy = r6.xy * r6.zw;
      r6.xy = float2(0.5,0.5) + r6.xy;
      r6.xy = floor(r6.xy);
      r6.xy = r6.xy / r6.zw;
      r6.zw = float2(0,0) * r7.yz;
      r6.zw = r6.xy + r6.zw;
      r5.w = r5.w;
      r7.x = r7.x;
      r6.zw = r6.zw;
      r6.z = t15.Sample(s15_s, r6.zw).x;
      r6.z = r6.z;
      r6.z = r6.z;
      if (r7.x == 0) {
        r6.w = cb0[21].x + r6.z;
        r6.w = cmp(r5.w >= r6.w);
        r6.w = r6.w ? 1 : 0;
      } else {
        r6.z = cb0[21].y + r6.z;
        r6.z = cmp(r5.w >= r6.z);
        r6.w = r6.z ? 1 : 0;
      }
      r6.w = r6.w;
      r6.w = r6.w;
      r8.zw = float2(0,1) * r7.yz;
      r8.zw = r8.zw + r6.xy;
      r8.zw = r8.zw;
      r6.z = t15.Sample(s15_s, r8.zw).x;
      r6.z = r6.z;
      r6.z = r6.z;
      if (r7.x == 0) {
        r7.w = cb0[21].x + r6.z;
        r7.w = cmp(r5.w >= r7.w);
        r7.w = r7.w ? 1 : 0;
      } else {
        r6.z = cb0[21].y + r6.z;
        r6.z = cmp(r5.w >= r6.z);
        r7.w = r6.z ? 1 : 0;
      }
      r7.w = r7.w;
      r7.w = r7.w;
      r8.zw = float2(1,0) * r7.yz;
      r8.zw = r8.zw + r6.xy;
      r8.zw = r8.zw;
      r6.z = t15.Sample(s15_s, r8.zw).x;
      r6.z = r6.z;
      r6.z = r6.z;
      if (r7.x == 0) {
        r8.z = cb0[21].x + r6.z;
        r8.z = cmp(r5.w >= r8.z);
        r8.z = r8.z ? 1 : 0;
      } else {
        r6.z = cb0[21].y + r6.z;
        r6.z = cmp(r5.w >= r6.z);
        r8.z = r6.z ? 1 : 0;
      }
      r8.z = r8.z;
      r8.z = r8.z;
      r7.yz = float2(1,1) * r7.yz;
      r6.xy = r7.yz + r6.xy;
      r6.xy = r6.xy;
      r6.x = t15.Sample(s15_s, r6.xy).x;
      r6.x = r6.x;
      r6.x = r6.x;
      if (r7.x == 0) {
        r6.y = cb0[21].x + r6.x;
        r6.y = cmp(r5.w >= r6.y);
        r6.y = r6.y ? 1 : 0;
      } else {
        r6.x = cb0[21].y + r6.x;
        r5.w = cmp(r5.w >= r6.x);
        r6.y = r5.w ? 1 : 0;
      }
      r6.y = r6.y;
      r6.y = r6.y;
      r5.w = -r6.w;
      r5.w = r7.w + r5.w;
      r5.w = r8.y * r5.w;
      r5.w = r6.w + r5.w;
      r6.x = -r8.z;
      r6.x = r6.y + r6.x;
      r6.x = r8.y * r6.x;
      r6.x = r8.z + r6.x;
      r6.y = -r5.w;
      r6.x = r6.x + r6.y;
      r6.x = r8.x * r6.x;
      r5.w = r6.x + r5.w;
      r5.w = r5.w;
      r4.w = r5.w + r4.w;
      r5.z = (int)r5.z + 1;
    }
    r3.z = r4.w;
    r3.w = (int)r3.w + 1;
  }
  r1.w = r3.z / 9;
  r1.w = r1.w;
  r3.xyz = float3(-1,-1,-1);
  r2.xyw = r3.xyz + r2.xyw;
  r2.xyw = r2.xyw * r1.www;
  r2.xyw = float3(1,1,1) + r2.xyw;
  r2.xyw = r2.xyw;
  r2.z = r2.z;
  r1.xyz = r1.xyz;
  r2.xyw = r2.xyw;
  r1.w = -1;
  r1.w = (int)r1.w + asint(cb0[19].x);
  r1.w = cmp((int)r1.w == (int)r2.z);
  if (r1.w != 0) {
    r1.xy = float2(0.5,0.5) * r1.xy;
    r1.xy = r1.xy / r1.zz;
    r1.xy = float2(0.5,0.5) + r1.xy;
    r1.y = -r1.y;
    r1.y = 1 + r1.y;
    r1.z = cmp(r1.x < 0);
    r1.x = cmp(1 < r1.x);
    r1.x = (int)r1.x | (int)r1.z;
    r1.z = cmp(r1.y < 0);
    r1.x = (int)r1.z | (int)r1.x;
    r1.y = cmp(1 < r1.y);
    r1.x = (int)r1.y | (int)r1.x;
    if (r1.x != 0) {
      r2.xyw = int3(1,1,1);
    }
  }
  r2.xyw = r2.xyw;
  r2.xyw = r2.xyw;
  r1.xyz = r2.xyw * r0.xyz;
  r1.xyz = r1.xyz;
  r2.xy = v3.zw;
  r3.xyz = t6.Sample(s6_s, v3.xy).xyz;
  r3.xyz = r3.xyz;
  r3.xyz = r3.xyz;
  r4.xyz = -cb0[2].xyz;
  r3.xyz = r4.xyz + r3.xyz;
  r2.yzw = r3.xyz * r2.yyy;
  r2.yzw = cb0[2].xyz + r2.yzw;
  r3.xyz = -r2.yzw;
  r1.xyz = r3.xyz + r1.xyz;
  r1.xyz = r2.xxx * r1.xyz;
  r0.xyz = r2.yzw + r1.xyz;
  r0.xyz = r0.xyz;
  r0.xyz = r0.xyz;
  r0.w = r0.w;
  r1.yzw = int3(0,0,0);
  r1.x = v2.x;
  o0.xyzw = r0.xyzw;
  o1.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Jan 24 19:50:38 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// CLIPDISTANCE             0   x           1     NONE   float   x
// TEXCOORD                 7    yzw        1     NONE   float
// DEPTHVALUE               0   x           2     NONE   float   x
// TEXCOORD                 0    yz         2     NONE   float    yz
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xyz         6     NONE   float
// WORLDVIEWNORMAL          0   xyz         7     NONE   float   xyz
// WORLDVIEWPOSITION        0   xyz         8     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[71], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s3, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.x
dcl_input_ps linear v2.x
dcl_input_ps linear v2.yz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 9
itof r0.x, l(0)
lt r0.x, v1.x, r0.x
if_nz r0.x
  discard_nz l(-1)
endif
mov r0.x, cb0[70].x
mov r0.x, r0.x
mov r0.y, cb0[70].y
mov r0.y, r0.y
mov r0.z, cb0[70].z
mov r0.z, r0.z
mov r0.w, cb0[1].x
mov r0.w, r0.w
itof r1.xyz, l(0, 0, 0, 0)
mov r1.xyz, r1.xyzx
dp3 r1.w, v7.xyzx, v7.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, v7.xyzx
mov r3.xyz, v8.xyzx
mov r4.xyz, -r3.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
dp3 r1.w, r2.xyzx, r4.xyzx
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)
mov r2.xyz, r2.xyzx
mov r4.xyz, r4.xyzx
mov r1.w, r1.w
mov r5.xyz, -cb0[28].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx
mov r2.xyz, r2.xyzx
mov r5.xyz, -cb0[28].xyzx
mov r2.w, cb0[26].x
mov r2.w, r2.w
dp3 r3.w, r2.xyzx, r5.xyzx
add r3.w, r2.w, r3.w
itof r4.w, l(1)
add r2.w, r2.w, r4.w
div r2.w, r3.w, r2.w
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)
mov r2.w, r2.w
mov r2.w, r2.w
mov r5.xyz, -cb0[28].xyzx
dp3 r3.w, r5.xyzx, r4.xyzx
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)
itof r4.x, l(2)
mul r4.x, r3.w, r4.x
mul r3.w, r3.w, r4.x
mov r4.x, cb0[26].y
mul r3.w, r3.w, r4.x
add r3.w, r3.w, l(0.500000)
itof r4.x, l(1)
itof r4.y, l(1)
mov r4.y, -r4.y
add r4.y, r3.w, r4.y
itof r4.z, l(1)
mov r4.w, -r2.w
add r4.z, r4.w, r4.z
mov r4.w, l(1.000000)
mul r4.w, r4.z, r4.w
mul r4.z, r4.z, r4.z
mul r4.z, r4.z, r4.z
mul r4.z, r4.z, r4.w
mul r4.y, r4.z, r4.y
add r4.x, r4.y, r4.x
itof r4.y, l(1)
itof r4.z, l(1)
mov r4.z, -r4.z
add r3.w, r3.w, r4.z
itof r4.z, l(1)
mov r1.w, -r1.w
add r1.w, r1.w, r4.z
mov r4.z, l(1.000000)
mul r4.z, r1.w, r4.z
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r4.z
mul r1.w, r1.w, r3.w
add r1.w, r1.w, r4.y
mul r4.xyz, r4.xxxx, cb0[33].xyzx
mul r4.xyz, r1.wwww, r4.xyzx
mul r4.xyz, r2.wwww, r4.xyzx
add r1.xyz, r1.xyzx, r4.xyzx
ftoi r1.w, cb0[27].y
mov r1.w, r1.w
mov r2.w, l(0)
mov r4.xyz, r1.xyzx
mov r3.w, r2.w
loop
  ilt r4.w, r3.w, r1.w
  breakc_z r4.w
  mov r4.w, r3.w
  mov r5.xyz, r2.xyzx
  mov r6.xyz, r3.xyzx
  mov r6.xyz, -r6.xyzx
  add r6.xyz, r6.xyzx, cb0[r4.w + 38].xyzx
  dp3 r5.w, r6.xyzx, r6.xyzx
  sqrt r5.w, r5.w
  mul r6.w, r5.w, cb0[r4.w + 38].w
  mov r6.w, -r6.w
  add r6.w, r6.w, l(1.000000)
  max r6.w, r6.w, l(0.000000)
  div r6.xyz, r6.xyzx, r5.wwww
  dp3 r5.x, r5.xyzx, r6.xyzx
  max r5.x, r5.x, l(0.000000)
  min r5.x, r5.x, l(1.000000)
  mul r5.xyz, r5.xxxx, cb0[r4.w + 43].xyzx
  mul r5.xyz, r6.wwww, r5.xyzx
  mov r5.xyz, r5.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  iadd r3.w, r3.w, l(1)
endloop
ftoi r1.x, cb0[27].z
mov r1.x, r1.x
mov r1.y, l(0)
mov r5.xyz, r4.xyzx
mov r1.z, r1.y
loop
  ilt r1.w, r1.z, r1.x
  breakc_z r1.w
  mov r6.xyz, -r3.xyzx
  add r6.xyz, r6.xyzx, cb0[r1.z + 53].xyzx
  dp3 r1.w, r6.xyzx, r6.xyzx
  sqrt r1.w, r1.w
  div r6.xyz, r6.xyzx, r1.wwww
  mov r7.xyz, -cb0[r1.z + 48].xyzx
  dp3 r2.w, r7.xyzx, r6.xyzx
  ge r1.w, cb0[r1.z + 53].w, r1.w
  if_nz r1.w
    mov r1.w, -cb0[r1.z + 63].w
    add r1.w, r1.w, r2.w
    div r1.w, r1.w, cb0[r1.z + 58].w
    max r1.w, r1.w, l(0.000000)
    min r1.w, r1.w, l(1.000000)
    log r1.w, r1.w
    mul r1.w, r1.w, cb0[r1.z + 48].w
    exp r1.w, r1.w
  else
    mov r1.w, l(0)
  endif
  itof r2.w, l(0)
  dp3 r3.w, r2.xyzx, r6.xyzx
  max r2.w, r2.w, r3.w
  mul r6.xyz, r2.wwww, cb0[r1.z + 58].xyzx
  mul r6.xyz, r1.wwww, r6.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  iadd r1.z, r1.z, l(1)
endloop
mov r5.xyz, r5.xyzx
mov r5.xyz, r5.xyzx
mul r1.xyz, cb0[25].xyzx, cb0[68].xyzx
mul r2.xyz, r5.xyzx, cb0[69].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mov r1.w, cb0[68].w
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v2.yzyy, t0.xyzw, s0
mov r2.xyzw, r2.xyzw
mul r0.z, r0.z, r0.w
sincos null, r0.z, r0.z
mul r0.y, r0.z, r0.y
add r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v2.yzyy, t3.xyzw, s3
mul r0.xyzw, r0.xxxx, r3.xyzw
mul r1.xyzw, r1.xyzw, r2.xyzw
mov r2.xyz, -r1.xyzx
add r0.xyz, r0.xyzx, r2.xyzx
mul r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, r0.xyzx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.yzyy, t7.xyzw, s7
mov r0.xyz, r0.xyzx
mov r0.xyz, r0.xyzx
lt r0.w, r2.w, cb0[0].x
if_nz r0.w
  discard_nz l(-1)
endif
mov r0.w, -v5.x
max r0.w, r0.w, v5.x
mov r2.x, -v5.z
max r2.y, r2.x, v5.z
min r2.z, r0.w, r2.y
max r2.w, r0.w, r2.y
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r2.z, r2.w, r2.z
mul r2.w, r2.z, r2.z
mul r3.x, r2.w, l(0.0208350997)
add r3.x, r3.x, l(-0.085133)
mul r3.x, r2.w, r3.x
add r3.x, r3.x, l(0.180141)
mul r3.x, r2.w, r3.x
add r3.x, r3.x, l(-0.330299497)
mul r2.w, r2.w, r3.x
add r2.w, r2.w, l(0.999866)
mul r2.z, r2.w, r2.z
lt r0.w, r2.y, r0.w
mul r2.y, r2.z, l(-2.000000)
add r2.y, r2.y, l(1.57079637)
and r0.w, r0.w, r2.y
add r0.w, r2.z, r0.w
lt r2.x, v5.z, r2.x
and r2.x, r2.x, l(0xc0490fdb)
add r0.w, r0.w, r2.x
min r2.x, v5.z, v5.x
max r2.y, v5.z, v5.x
mov r2.z, -r2.x
lt r2.x, r2.x, r2.z
mov r2.z, -r2.y
ge r2.y, r2.y, r2.z
and r2.x, r2.y, r2.x
mov r2.y, -r0.w
movc r0.w, r2.x, r2.y, r0.w
div r0.w, r0.w, l(6.28318548)
add r0.w, r0.w, l(1.000000)
frc r2.x, r0.w
mul r0.w, v5.y, l(0.500000)
mov r0.w, -r0.w
add r2.y, r0.w, l(0.500000)
mov r2.x, r2.x
mov r2.y, r2.y
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xyxx, t8.xyzw, s8
mov r2.xyzw, r2.xyzw
mul r0.xyz, r0.xyzx, r2.xyzx
mul r0.w, r2.w, l(0.000000)
add r0.xyzw, r0.xyzw, r1.xyzw
mov r1.xyz, v4.xyzx
mov r1.w, v4.w
mov r1.w, r1.w
ineg r2.x, l(1)
iadd r2.x, r2.x, cb0[19].x
mov r2.y, -r1.w
max r1.w, r1.w, r2.y
lt r2.y, r1.w, cb0[20].x
if_nz r2.y
  mov r2.z, l(0)
endif
if_z r2.y
  lt r2.y, r1.w, cb0[20].y
  if_nz r2.y
    mov r2.z, l(1)
  endif
  if_z r2.y
    lt r1.w, r1.w, cb0[20].z
    if_nz r1.w
      mov r2.z, l(2)
    endif
    if_z r1.w
      mov r2.z, r2.x
    endif
  endif
endif
mov r2.z, r2.z
imul null, r1.w, r2.z, l(4)
mul r3.xyzw, r1.xxxx, cb0[r1.w + 3].xyzw
mul r4.xyzw, r1.yyyy, cb0[r1.w + 4].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r1.zzzz, cb0[r1.w + 5].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[r1.w + 6].xyzw
add r1.xyzw, r1.xywz, r3.xywz
div r1.w, r1.w, r1.z
mul r2.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r2.xy, r2.xyxx, r1.zzzz
add r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov r2.y, -r2.y
add r2.y, r2.y, l(1.000000)
mov r2.x, r2.x
mov r2.y, r2.y
mov r2.z, r2.z
mov r3.xy, l(1.000000,1.000000,0,0)
ilt r2.w, l(1), cb0[19].x
if_nz r2.w
  mov r3.x, l(0.500000)
endif
ilt r2.w, l(2), cb0[19].x
if_nz r2.w
  mov r3.y, l(0.500000)
endif
mov r2.w, l(2)
udiv null, r2.w, r2.z, r2.w
itof r2.w, r2.w
add r2.x, r2.x, r2.w
mul r4.x, r3.x, r2.x
mov r2.x, l(0)
mov r2.w, l(1)
ult r2.w, r2.w, r2.z
if_nz r2.w
  mov r2.x, l(1)
endif
itof r2.x, r2.x
add r2.x, r2.y, r2.x
mul r4.y, r3.y, r2.x
mov r4.x, r4.x
mov r4.y, r4.y
mov r4.xy, r4.xyxx
lt r2.x, l(0.000000), cb0[24].z
if_nz r2.x
  max r2.x, cb0[24].z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  mov r3.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
  add r3.xyz, r3.xyzx, cb0[23].xyzx
  mul r2.xyw, r2.xxxx, r3.xyxz
  add r2.xyw, r2.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
else
  max r3.x, cb0[24].y, l(0.000000)
  min r3.x, r3.x, l(1.000000)
  mov r3.yzw, l(-0.000000,-1.000000,-1.000000,-1.000000)
  add r3.yzw, r3.yyzw, cb0[22].xxyz
  mul r3.xyz, r3.yzwy, r3.xxxx
  add r2.xyw, r3.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
endif
mov r2.xyw, r2.xyxw
mov r2.xyw, r2.xyxw
mov r4.xy, r4.xyxx
mov r1.w, r1.w
mov r2.z, r2.z
mov r3.x, l(0)
itof r3.y, cb0[19].y
mul r5.x, r3.y, l(2.000000)
itof r3.y, cb0[19].y
mul r5.y, r3.y, l(2.000000)
mov r3.y, l(-1)
mov r3.z, r3.x
mov r3.w, r3.y
loop
  ige r4.z, l(1), r3.w
  breakc_z r4.z
  mov r4.z, l(-1)
  mov r4.w, r3.z
  mov r5.z, r4.z
  loop
    ige r5.w, l(1), r5.z
    breakc_z r5.w
    itof r6.x, r3.w
    itof r6.y, r5.z
    div r6.xy, r6.xyxx, r5.xyxx
    mov r6.zw, r5.xxxy
    add r6.xy, r4.xyxx, r6.xyxx
    mov r5.w, r1.w
    mov r7.x, r2.z
    div r7.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r6.zzwz
    mul r8.xy, r6.zwzz, r6.xyxx
    add r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    frc r8.xy, r8.xyxx
    mul r6.xy, r6.zwzz, r6.xyxx
    add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    round_ni r6.xy, r6.xyxx
    div r6.xy, r6.xyxx, r6.zwzz
    mul r6.zw, r7.yyyz, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r6.zw, r6.zzzw, r6.xxxy
    mov r5.w, r5.w
    mov r7.x, r7.x
    mov r6.zw, r6.zzzw
    sample_indexable(texture2d)(float,float,float,float) r6.z, r6.zwzz, t15.yzxw, s15
    mov r6.z, r6.z
    mov r6.z, r6.z
    if_z r7.x
      add r6.w, r6.z, cb0[21].x
      ge r6.w, r5.w, r6.w
      movc r6.w, r6.w, l(1.000000), l(0)
    else
      add r6.z, r6.z, cb0[21].y
      ge r6.z, r5.w, r6.z
      movc r6.w, r6.z, l(1.000000), l(0)
    endif
    mov r6.w, r6.w
    mov r6.w, r6.w
    mul r8.zw, r7.yyyz, l(0.000000, 0.000000, 0.000000, 1.000000)
    add r8.zw, r6.xxxy, r8.zzzw
    mov r8.zw, r8.zzzw
    sample_indexable(texture2d)(float,float,float,float) r6.z, r8.zwzz, t15.yzxw, s15
    mov r6.z, r6.z
    mov r6.z, r6.z
    if_z r7.x
      add r7.w, r6.z, cb0[21].x
      ge r7.w, r5.w, r7.w
      movc r7.w, r7.w, l(1.000000), l(0)
    else
      add r6.z, r6.z, cb0[21].y
      ge r6.z, r5.w, r6.z
      movc r7.w, r6.z, l(1.000000), l(0)
    endif
    mov r7.w, r7.w
    mov r7.w, r7.w
    mul r8.zw, r7.yyyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    add r8.zw, r6.xxxy, r8.zzzw
    mov r8.zw, r8.zzzw
    sample_indexable(texture2d)(float,float,float,float) r6.z, r8.zwzz, t15.yzxw, s15
    mov r6.z, r6.z
    mov r6.z, r6.z
    if_z r7.x
      add r8.z, r6.z, cb0[21].x
      ge r8.z, r5.w, r8.z
      movc r8.z, r8.z, l(1.000000), l(0)
    else
      add r6.z, r6.z, cb0[21].y
      ge r6.z, r5.w, r6.z
      movc r8.z, r6.z, l(1.000000), l(0)
    endif
    mov r8.z, r8.z
    mov r8.z, r8.z
    mul r7.yz, r7.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
    add r6.xy, r6.xyxx, r7.yzyy
    mov r6.xy, r6.xyxx
    sample_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t15.xyzw, s15
    mov r6.x, r6.x
    mov r6.x, r6.x
    if_z r7.x
      add r6.y, r6.x, cb0[21].x
      ge r6.y, r5.w, r6.y
      movc r6.y, r6.y, l(1.000000), l(0)
    else
      add r6.x, r6.x, cb0[21].y
      ge r5.w, r5.w, r6.x
      movc r6.y, r5.w, l(1.000000), l(0)
    endif
    mov r6.y, r6.y
    mov r6.y, r6.y
    mov r5.w, -r6.w
    add r5.w, r5.w, r7.w
    mul r5.w, r5.w, r8.y
    add r5.w, r5.w, r6.w
    mov r6.x, -r8.z
    add r6.x, r6.x, r6.y
    mul r6.x, r6.x, r8.y
    add r6.x, r6.x, r8.z
    mov r6.y, -r5.w
    add r6.x, r6.y, r6.x
    mul r6.x, r6.x, r8.x
    add r5.w, r5.w, r6.x
    mov r5.w, r5.w
    add r4.w, r4.w, r5.w
    iadd r5.z, r5.z, l(1)
  endloop
  mov r3.z, r4.w
  iadd r3.w, r3.w, l(1)
endloop
div r1.w, r3.z, l(9.000000)
mov r1.w, r1.w
mov r3.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r2.xyw, r2.xyxw, r3.xyxz
mul r2.xyw, r1.wwww, r2.xyxw
add r2.xyw, r2.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
mov r2.xyw, r2.xyxw
mov r2.z, r2.z
mov r1.xyz, r1.xyzx
mov r2.xyw, r2.xyxw
ineg r1.w, l(1)
iadd r1.w, r1.w, cb0[19].x
ieq r1.w, r1.w, r2.z
if_nz r1.w
  mul r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  div r1.xy, r1.xyxx, r1.zzzz
  add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  mov r1.y, -r1.y
  add r1.y, r1.y, l(1.000000)
  lt r1.z, r1.x, l(0.000000)
  lt r1.x, l(1.000000), r1.x
  or r1.x, r1.x, r1.z
  lt r1.z, r1.y, l(0.000000)
  or r1.x, r1.z, r1.x
  lt r1.y, l(1.000000), r1.y
  or r1.x, r1.y, r1.x
  if_nz r1.x
    itof r2.xyw, l(1, 1, 0, 1)
  endif
endif
mov r2.xyw, r2.xyxw
mov r2.xyw, r2.xyxw
mul r1.xyz, r0.xyzx, r2.xywx
mov r1.xyz, r1.xyzx
mov r2.xy, v3.zwzz
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v3.xyxx, t6.xyzw, s6
mov r3.xyz, r3.xyzx
mov r3.xyz, r3.xyzx
mov r4.xyz, -cb0[2].xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r2.yzw, r2.yyyy, r3.xxyz
add r2.yzw, r2.yyzw, cb0[2].xxyz
mov r3.xyz, -r2.yzwy
add r1.xyz, r1.xyzx, r3.xyzx
mul r1.xyz, r1.xyzx, r2.xxxx
add r0.xyz, r1.xyzx, r2.yzwy
mov r0.xyz, r0.xyzx
mov r0.xyz, r0.xyzx
mov r0.w, r0.w
itof r1.yzw, l(0, 0, 0, 1)
mov r1.x, v2.x
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
