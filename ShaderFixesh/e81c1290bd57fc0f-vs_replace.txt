// ---- Created with 3Dmigoto v1.3.16 on Wed Jan 24 17:13:28 2024
cbuffer cb0 : register(b0)
{
  float4 cb0[89];
}




// 3Dmigoto declarations
#define cmp -


void main(
  int4 v0 : BLENDINDICES0,
  float4 v1 : NORMAL0,
  float4 v2 : TEXCOORD0,
  float v3 : TEXCOORD5,
  float4 v4 : BLENDWEIGHT0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float3 o2 : TEXCOORD7,
  out float4 o3 : FOGFACTOR0,
  out float4 o4 : TEXCOORD0,
  out float3 o5 : TEXCOORD1)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[4];
  float4 x1[4];
  r0.xyz = float3(0,0,0);
  r1.xyz = float3(0,0,0);
  x0[0].xy = float2(-0.5,0.5);
  x0[1].xy = float2(0.5,0.5);
  x0[2].xy = float2(-0.5,-0.5);
  x0[3].xy = float2(0.5,-0.5);
  x1[0].xy = float2(0,0);
  x1[1].xy = float2(1,0);
  x1[2].xy = float2(0,1);
  x1[3].xy = float2(1,1);
  r0.w = cb0[16].x;
  r0.w = r0.w;
  r1.w = cb0[20].z;
  r1.w = r1.w;
  r2.xy = v2.xy;
  r2.z = cb0[18].x;
  r2.z = r2.z;
  r2.w = cb0[18].y;
  r2.w = r2.w;
  r3.x = cb0[16].z;
  r3.x = r3.x;
  r3.y = cb0[18].z;
  r3.y = r3.y;
  r4.xyz = cb0[19].xyz;
  r3.z = cb0[20].y;
  r3.z = r3.z;
  r3.w = cb0[20].x;
  r3.w = r3.w;
  r4.w = cb0[16].y;
  r4.w = r4.w;
  r5.x = (int)cb0[20].w;
  r5.x = r5.x;
  r5.y = v3.x;
  r5.z = v0.y;
  r6.xyz = cb0[r5.z+49].xxx * cb0[0].xyz;
  r7.xyz = cb0[r5.z+49].yyy * cb0[1].xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r7.xyz = cb0[r5.z+49].zzz * cb0[2].xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r7.xyz = cb0[r5.z+49].www * cb0[3].xyz;
  r6.xyz = r7.xyz + r6.xyz;
  r7.xyz = cb0[8].xyz * v4.xxx;
  r8.xyz = cb0[9].xyz * v4.yyy;
  r7.xyz = r8.xyz + r7.xyz;
  r8.xyz = cb0[10].xyz * v4.zzz;
  r7.xyz = r8.xyz + r7.xyz;
  r8.xyz = float3(0,0,0) * cb0[11].xyz;
  r7.xyz = r8.xyz + r7.xyz;
  r7.xyz = v4.www * r7.xyz;
  r5.z = -r2.x;
  r5.z = r5.z + r0.w;
  r5.z = r5.z * r1.w;
  r5.w = cmp(r2.z < r5.z);
  if (r5.w != 0) {
    r5.w = -r2.z;
    r5.w = r5.z + r5.w;
    r5.w = r5.w * r2.w;
    r5.w = -r5.w;
    r5.w = r5.z + r5.w;
    r5.w = r5.w * r3.x;
  } else {
    r5.w = r5.z * r3.x;
  }
  r6.w = 0.5 * r5.w;
  r7.xyz = r7.xyz * r5.www;
  r7.xyz = r7.xyz + r6.xyz;
  r6.w = 1 + r6.w;
  r7.w = log2(r3.y);
  r6.w = r7.w * r6.w;
  r6.w = exp2(r6.w);
  r8.xyz = r6.www * r4.xyz;
  r8.xyz = r8.xyz * r5.www;
  r7.xyz = r8.xyz + r7.xyz;
  r3.z = r5.z * r3.z;
  r3.z = r3.z + r3.w;
  r2.y = r3.z * r2.y;
  r3.z = 20;
  r3.z = r5.z * r3.z;
  r3.w = floor(r3.z);
  r5.w = 1 + r3.w;
  r3.z = frac(r3.z);
  r6.w = (int)r3.w;
  r7.w = -(int)r6.w;
  r8.x = -4;
  r8.y = (int)r6.w ^ 4;
  r7.w = max((int)r7.w, (int)r6.w);
  r8.x = max(4, (int)r8.x);
  uiDest.w = (uint)r7.w / (uint)r8.x;
  r7.w = uiDest.w;
  r8.x = -(int)r7.w;
  r8.y = (int)r8.y & 0x80000000;
  r8.y = cmp(0 != (int)r8.y);
  r7.w = r8.y ? r8.x : r7.w;
  r8.x = -(int)r6.w;
  r8.y = -4;
  r8.z = (int)r6.w & 0x80000000;
  r6.w = max((int)r8.x, (int)r6.w);
  r8.x = max(4, (int)r8.y);
  r6.w = (uint)r6.w % (uint)r8.x;
  r8.x = -(int)r6.w;
  r8.y = cmp(0 != (int)r8.z);
  r6.w = r8.y ? r8.x : r6.w;
  r6.w = dot(cb0[r7.w+22].xyzw, icb[r6.w+0].xyzw);
  r7.w = (int)r5.w;
  r8.x = -(int)r7.w;
  r8.y = -4;
  r8.z = (int)r7.w ^ 4;
  r8.x = max((int)r8.x, (int)r7.w);
  r8.y = max(4, (int)r8.y);
  uiDest.x = (uint)r8.x / (uint)r8.y;
  r8.x = uiDest.x;
  r8.y = -(int)r8.x;
  r8.z = (int)r8.z & 0x80000000;
  r8.z = cmp(0 != (int)r8.z);
  r8.x = r8.z ? r8.y : r8.x;
  r8.y = -(int)r7.w;
  r8.z = -4;
  r8.w = (int)r7.w & 0x80000000;
  r7.w = max((int)r8.y, (int)r7.w);
  r8.y = max(4, (int)r8.z);
  r7.w = (uint)r7.w % (uint)r8.y;
  r8.y = -(int)r7.w;
  r8.z = cmp(0 != (int)r8.w);
  r7.w = r8.z ? r8.y : r7.w;
  r7.w = dot(cb0[r8.x+22].xyzw, icb[r7.w+0].xyzw);
  r8.x = -r6.w;
  r7.w = r8.x + r7.w;
  r7.w = r7.w * r3.z;
  r6.w = r7.w + r6.w;
  r4.w = r6.w * r4.w;
  r5.y = r4.w * r5.y;
  r4.w = r5.y + r4.w;
  r5.y = cmp(r5.z < 0);
  r5.z = cmp(r5.z >= 1);
  r5.y = (int)r5.z | (int)r5.y;
  if (r5.y != 0) {
    r5.y = 0;
  } else {
    r5.y = v0.x;
  }
  r8.xy = x0[r5.y+0].xy;
  r8.xy = r8.xy * r4.ww;
  r4.w = cmp(0 < (int)r5.x);
  if (r4.w != 0) {
    r9.xyz = cb0[8].xyz * v4.xxx;
    r10.xyz = cb0[9].xyz * v4.yyy;
    r9.xyz = r10.xyz + r9.xyz;
    r10.xyz = cb0[10].xyz * v4.zzz;
    r9.xyz = r10.xyz + r9.xyz;
    r10.xyz = float3(0,0,0) * cb0[11].xyz;
    r9.xyz = r10.xyz + r9.xyz;
    r9.xyz = v4.www * r9.xyz;
    r2.x = 0.100000001 + r2.x;
    r2.x = -r2.x;
    r0.w = r2.x + r0.w;
    r0.w = r0.w * r1.w;
    r1.w = cmp(r2.z < r0.w);
    if (r1.w != 0) {
      r1.w = -r2.z;
      r1.w = r1.w + r0.w;
      r1.w = r1.w * r2.w;
      r1.w = -r1.w;
      r0.w = r1.w + r0.w;
    } else {
      r0.w = r0.w;
    }
    r0.w = r0.w * r3.x;
    r1.w = 0.5 * r0.w;
    r2.xzw = r9.xyz * r0.www;
    r2.xzw = r2.xzw + r6.xyz;
    r3.x = 1;
    r1.w = r3.x + r1.w;
    r3.x = log2(r3.y);
    r1.w = r3.x * r1.w;
    r1.w = exp2(r1.w);
    r4.xyz = r1.www * r4.xyz;
    r4.xyz = r4.xyz * r0.www;
    r2.xzw = r4.xyz + r2.xzw;
    r4.xyzw = cb0[4].xyzw * r2.xxxx;
    r6.xyzw = cb0[5].xyzw * r2.zzzz;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r6.xyzw = cb0[6].xyzw * r2.wwww;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r6.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r6.xyzw = cb0[4].xyzw * r7.xxxx;
    r9.xyzw = cb0[5].xyzw * r7.yyyy;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r9.xyzw = cb0[6].xyzw * r7.zzzz;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r9.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
    r6.xyzw = r9.xyzw + r6.xyzw;
    r6.xyzw = -r6.xyzw;
    r4.xyzw = r6.xyzw + r4.xyzw;
    r0.w = dot(r4.xyzw, r4.xyzw);
    r0.w = sqrt(r0.w);
    r1.w = 0;
    r0.w = cmp(r0.w == r1.w);
    if (r0.w == 0) {
      r0.w = dot(r4.xy, r4.xy);
      r0.w = rsqrt(r0.w);
      r4.xy = r4.xy * r0.ww;
    }
    r4.x = r4.x;
    r0.w = -r4.y;
    r1.w = -r4.x;
    r2.x = max(r4.x, r1.w);
    r2.z = -r2.x;
    r2.z = 1 + r2.z;
    r2.z = sqrt(r2.z);
    r2.w = -0.0187292993 * r2.x;
    r2.w = 0.0742610022 + r2.w;
    r2.w = r2.w * r2.x;
    r2.w = -0.212114394 + r2.w;
    r2.x = r2.w * r2.x;
    r2.x = 1.57072878 + r2.x;
    r2.x = r2.x * r2.z;
    r2.z = -2 * r2.x;
    r2.z = 3.14159274 + r2.z;
    r1.w = cmp(r4.x < r1.w);
    r1.w = r1.w ? r2.z : 0;
    r1.w = r2.x + r1.w;
    r1.w = -r1.w;
    r1.w = 1.57079637 + r1.w;
    r2.x = 0;
    r1.w = cmp(r2.x < r1.w);
    r2.x = -r0.w;
    r2.z = max(r2.x, r0.w);
    r2.w = -r2.z;
    r2.w = 1 + r2.w;
    r2.w = sqrt(r2.w);
    r3.x = -0.0187292993 * r2.z;
    r3.x = 0.0742610022 + r3.x;
    r3.x = r3.x * r2.z;
    r3.x = -0.212114394 + r3.x;
    r2.z = r3.x * r2.z;
    r2.z = 1.57072878 + r2.z;
    r2.z = r2.z * r2.w;
    r2.w = -2 * r2.z;
    r2.w = 3.14159274 + r2.w;
    r2.x = cmp(r0.w < r2.x);
    r2.x = r2.x ? r2.w : 0;
    r2.x = r2.z + r2.x;
    r2.z = -r0.w;
    r2.w = max(r2.z, r0.w);
    r3.x = -r2.w;
    r3.x = 1 + r3.x;
    r3.x = sqrt(r3.x);
    r3.y = -0.0187292993 * r2.w;
    r3.y = 0.0742610022 + r3.y;
    r3.y = r3.y * r2.w;
    r3.y = -0.212114394 + r3.y;
    r2.w = r3.y * r2.w;
    r2.w = 1.57072878 + r2.w;
    r2.w = r2.w * r3.x;
    r3.x = -2 * r2.w;
    r3.x = 3.14159274 + r3.x;
    r0.w = cmp(r0.w < r2.z);
    r0.w = r0.w ? r3.x : 0;
    r0.w = r2.w + r0.w;
    r0.w = -r0.w;
    r0.w = r1.w ? r2.x : r0.w;
    r0.w = r0.w;
    r2.y = r2.y + r0.w;
  }
  r0.w = sin(r2.y);
  r1.w = cos(r2.y);
  r2.x = r8.x * r1.w;
  r2.y = r8.y * r0.w;
  r2.y = -r2.y;
  r2.x = r2.x + r2.y;
  r0.w = r8.x * r0.w;
  r1.w = r8.y * r1.w;
  r0.w = r1.w + r0.w;
  r1.w = 0;
  r2.yzw = cb0[8].xyz * v1.xxx;
  r4.xyz = cb0[9].xyz * v1.yyy;
  r2.yzw = r4.xyz + r2.yzw;
  r4.xyz = cb0[10].xyz * v1.zzz;
  r2.yzw = r4.xyz + r2.yzw;
  r4.xyz = float3(0,0,0) * cb0[11].xyz;
  r2.yzw = r4.xyz + r2.yzw;
  r2.x = r2.x + r2.y;
  r0.w = r2.z + r0.w;
  r1.w = r2.w + r1.w;
  r2.xyz = cb0[12].xyz * r2.xxx;
  r4.xyz = cb0[13].xyz * r0.www;
  r2.xyz = r4.xyz + r2.xyz;
  r4.xyz = cb0[14].xyz * r1.www;
  r2.xyz = r4.xyz + r2.xyz;
  r3.xy = x1[r5.y+0].xy;
  r0.w = r7.x + r2.x;
  r1.w = r7.y + r2.y;
  r2.x = r7.z + r2.z;
  r4.xyzw = cb0[4].xyzw * r0.wwww;
  r6.xyzw = cb0[5].xyzw * r1.wwww;
  r4.xyzw = r6.xyzw + r4.xyzw;
  r2.xyzw = cb0[6].xyzw * r2.xxxx;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r4.xyzw = float4(1,1,1,1) * cb0[7].xyzw;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r0.w = (uint)r3.w;
  r1.w = (uint)r5.w;
  r4.xyzw = -cb0[r0.w+28].xyzw;
  r4.xyzw = cb0[r1.w+28].xyzw + r4.xyzw;
  r4.xyzw = r4.xyzw * r3.zzzz;
  r4.xyzw = cb0[r0.w+28].xyzw + r4.xyzw;
  r4.xyzw = cb0[17].xyzw * r4.xyzw;
  r2.xyzw = r2.xyzw;
  o0.xyzw = r2.xyzw;
  o1.xyzw = r4.xyzw;
  o3.xyzw = r2.xyzw;
  o2.xyz = r0.xyz;
  o5.xyz = r1.xyz;
  o4.xy = r3.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Jan 24 17:13:28 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BLENDINDICES             0   xyzw        0     NONE     int   xy
// NORMAL                   0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xy          2     NONE   float   xy
// TEXCOORD                 5   x           3     NONE   float   x
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 7   xyz         2     NONE   float   xyz
// FOGFACTOR                0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy
// TEXCOORD                 1   xyz         5     NONE   float   xyz
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[89], dynamicIndexed
dcl_input v0.xy
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.x
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyz
dcl_temps 11
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
mov r0.xyz, l(0,0,0,0)
mov r1.xyz, l(0,0,0,0)
mov x0[0].xy, l(-0.500000,0.500000,0,0)
mov x0[1].xy, l(0.500000,0.500000,0,0)
mov x0[2].xy, l(-0.500000,-0.500000,0,0)
mov x0[3].xy, l(0.500000,-0.500000,0,0)
mov x1[0].xy, l(0,0,0,0)
mov x1[1].xy, l(1.000000,0,0,0)
mov x1[2].xy, l(0,1.000000,0,0)
mov x1[3].xy, l(1.000000,1.000000,0,0)
mov r0.w, cb0[16].x
mov r0.w, r0.w
mov r1.w, cb0[20].z
mov r1.w, r1.w
mov r2.xy, v2.xyxx
mov r2.z, cb0[18].x
mov r2.z, r2.z
mov r2.w, cb0[18].y
mov r2.w, r2.w
mov r3.x, cb0[16].z
mov r3.x, r3.x
mov r3.y, cb0[18].z
mov r3.y, r3.y
mov r4.xyz, cb0[19].xyzx
mov r3.z, cb0[20].y
mov r3.z, r3.z
mov r3.w, cb0[20].x
mov r3.w, r3.w
mov r4.w, cb0[16].y
mov r4.w, r4.w
ftoi r5.x, cb0[20].w
mov r5.x, r5.x
mov r5.y, v3.x
mov r5.z, v0.y
mul r6.xyz, cb0[0].xyzx, cb0[r5.z + 49].xxxx
mul r7.xyz, cb0[1].xyzx, cb0[r5.z + 49].yyyy
add r6.xyz, r6.xyzx, r7.xyzx
mul r7.xyz, cb0[2].xyzx, cb0[r5.z + 49].zzzz
add r6.xyz, r6.xyzx, r7.xyzx
mul r7.xyz, cb0[3].xyzx, cb0[r5.z + 49].wwww
add r6.xyz, r6.xyzx, r7.xyzx
mul r7.xyz, v4.xxxx, cb0[8].xyzx
mul r8.xyz, v4.yyyy, cb0[9].xyzx
add r7.xyz, r7.xyzx, r8.xyzx
mul r8.xyz, v4.zzzz, cb0[10].xyzx
add r7.xyz, r7.xyzx, r8.xyzx
mul r8.xyz, cb0[11].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r7.xyz, r7.xyzx, r8.xyzx
mul r7.xyz, r7.xyzx, v4.wwww
mov r5.z, -r2.x
add r5.z, r0.w, r5.z
mul r5.z, r1.w, r5.z
lt r5.w, r2.z, r5.z
if_nz r5.w
  mov r5.w, -r2.z
  add r5.w, r5.w, r5.z
  mul r5.w, r2.w, r5.w
  mov r5.w, -r5.w
  add r5.w, r5.w, r5.z
  mul r5.w, r3.x, r5.w
else
  mul r5.w, r3.x, r5.z
endif
mul r6.w, r5.w, l(0.500000)
mul r7.xyz, r5.wwww, r7.xyzx
add r7.xyz, r6.xyzx, r7.xyzx
add r6.w, r6.w, l(1.000000)
log r7.w, r3.y
mul r6.w, r6.w, r7.w
exp r6.w, r6.w
mul r8.xyz, r4.xyzx, r6.wwww
mul r8.xyz, r5.wwww, r8.xyzx
add r7.xyz, r7.xyzx, r8.xyzx
mul r3.z, r3.z, r5.z
add r3.z, r3.w, r3.z
mul r2.y, r2.y, r3.z
itof r3.z, l(20)
mul r3.z, r3.z, r5.z
round_ni r3.w, r3.z
add r5.w, r3.w, l(1.000000)
frc r3.z, r3.z
ftoi r6.w, r3.w
ineg r7.w, r6.w
ineg r8.x, l(4)
xor r8.y, r6.w, l(4)
imax r7.w, r6.w, r7.w
imax r8.x, r8.x, l(4)
udiv r7.w, null, r7.w, r8.x
ineg r8.x, r7.w
and r8.y, r8.y, l(0x80000000)
ine r8.y, l(0, 0, 0, 0), r8.y
movc r7.w, r8.y, r8.x, r7.w
ineg r8.x, r6.w
ineg r8.y, l(4)
and r8.z, r6.w, l(0x80000000)
imax r6.w, r6.w, r8.x
imax r8.x, r8.y, l(4)
udiv null, r6.w, r6.w, r8.x
ineg r8.x, r6.w
ine r8.y, l(0, 0, 0, 0), r8.z
movc r6.w, r8.y, r8.x, r6.w
dp4 r6.w, cb0[r7.w + 22].xyzw, icb[r6.w + 0].xyzw
ftoi r7.w, r5.w
ineg r8.x, r7.w
ineg r8.y, l(4)
xor r8.z, r7.w, l(4)
imax r8.x, r7.w, r8.x
imax r8.y, r8.y, l(4)
udiv r8.x, null, r8.x, r8.y
ineg r8.y, r8.x
and r8.z, r8.z, l(0x80000000)
ine r8.z, l(0, 0, 0, 0), r8.z
movc r8.x, r8.z, r8.y, r8.x
ineg r8.y, r7.w
ineg r8.z, l(4)
and r8.w, r7.w, l(0x80000000)
imax r7.w, r7.w, r8.y
imax r8.y, r8.z, l(4)
udiv null, r7.w, r7.w, r8.y
ineg r8.y, r7.w
ine r8.z, l(0, 0, 0, 0), r8.w
movc r7.w, r8.z, r8.y, r7.w
dp4 r7.w, cb0[r8.x + 22].xyzw, icb[r7.w + 0].xyzw
mov r8.x, -r6.w
add r7.w, r7.w, r8.x
mul r7.w, r3.z, r7.w
add r6.w, r6.w, r7.w
mul r4.w, r4.w, r6.w
mul r5.y, r5.y, r4.w
add r4.w, r4.w, r5.y
lt r5.y, r5.z, l(0.000000)
ge r5.z, r5.z, l(1.000000)
or r5.y, r5.z, r5.y
if_nz r5.y
  mov r5.y, l(0)
else
  mov r5.y, v0.x
endif
mov r8.xy, x0[r5.y + 0].xyxx
mul r8.xy, r4.wwww, r8.xyxx
ilt r4.w, l(0), r5.x
if_nz r4.w
  mul r9.xyz, v4.xxxx, cb0[8].xyzx
  mul r10.xyz, v4.yyyy, cb0[9].xyzx
  add r9.xyz, r9.xyzx, r10.xyzx
  mul r10.xyz, v4.zzzz, cb0[10].xyzx
  add r9.xyz, r9.xyzx, r10.xyzx
  mul r10.xyz, cb0[11].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r9.xyz, r9.xyzx, r10.xyzx
  mul r9.xyz, r9.xyzx, v4.wwww
  add r2.x, r2.x, l(0.100000)
  mov r2.x, -r2.x
  add r0.w, r0.w, r2.x
  mul r0.w, r1.w, r0.w
  lt r1.w, r2.z, r0.w
  if_nz r1.w
    mov r1.w, -r2.z
    add r1.w, r0.w, r1.w
    mul r1.w, r2.w, r1.w
    mov r1.w, -r1.w
    add r0.w, r0.w, r1.w
  else
    mov r0.w, r0.w
  endif
  mul r0.w, r3.x, r0.w
  mul r1.w, r0.w, l(0.500000)
  mul r2.xzw, r0.wwww, r9.xxyz
  add r2.xzw, r6.xxyz, r2.xxzw
  itof r3.x, l(1)
  add r1.w, r1.w, r3.x
  log r3.x, r3.y
  mul r1.w, r1.w, r3.x
  exp r1.w, r1.w
  mul r4.xyz, r4.xyzx, r1.wwww
  mul r4.xyz, r0.wwww, r4.xyzx
  add r2.xzw, r2.xxzw, r4.xxyz
  mul r4.xyzw, r2.xxxx, cb0[4].xyzw
  mul r6.xyzw, r2.zzzz, cb0[5].xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw
  mul r6.xyzw, r2.wwww, cb0[6].xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw
  mul r6.xyzw, cb0[7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r4.xyzw, r4.xyzw, r6.xyzw
  mul r6.xyzw, r7.xxxx, cb0[4].xyzw
  mul r9.xyzw, r7.yyyy, cb0[5].xyzw
  add r6.xyzw, r6.xyzw, r9.xyzw
  mul r9.xyzw, r7.zzzz, cb0[6].xyzw
  add r6.xyzw, r6.xyzw, r9.xyzw
  mul r9.xyzw, cb0[7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r6.xyzw, -r6.xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw
  dp4 r0.w, r4.xyzw, r4.xyzw
  sqrt r0.w, r0.w
  itof r1.w, l(0)
  eq r0.w, r0.w, r1.w
  if_z r0.w
    dp2 r0.w, r4.xyxx, r4.xyxx
    rsq r0.w, r0.w
    mul r4.xy, r0.wwww, r4.xyxx
  endif
  mov r4.x, r4.x
  mov r0.w, -r4.y
  mov r1.w, -r4.x
  max r2.x, r1.w, r4.x
  mov r2.z, -r2.x
  add r2.z, r2.z, l(1.000000)
  sqrt r2.z, r2.z
  mul r2.w, r2.x, l(-0.0187292993)
  add r2.w, r2.w, l(0.074261)
  mul r2.w, r2.x, r2.w
  add r2.w, r2.w, l(-0.212114394)
  mul r2.x, r2.x, r2.w
  add r2.x, r2.x, l(1.57072878)
  mul r2.x, r2.z, r2.x
  mul r2.z, r2.x, l(-2.000000)
  add r2.z, r2.z, l(3.14159274)
  lt r1.w, r4.x, r1.w
  and r1.w, r1.w, r2.z
  add r1.w, r1.w, r2.x
  mov r1.w, -r1.w
  add r1.w, r1.w, l(1.57079637)
  itof r2.x, l(0)
  lt r1.w, r2.x, r1.w
  mov r2.x, -r0.w
  max r2.z, r0.w, r2.x
  mov r2.w, -r2.z
  add r2.w, r2.w, l(1.000000)
  sqrt r2.w, r2.w
  mul r3.x, r2.z, l(-0.0187292993)
  add r3.x, r3.x, l(0.074261)
  mul r3.x, r2.z, r3.x
  add r3.x, r3.x, l(-0.212114394)
  mul r2.z, r2.z, r3.x
  add r2.z, r2.z, l(1.57072878)
  mul r2.z, r2.w, r2.z
  mul r2.w, r2.z, l(-2.000000)
  add r2.w, r2.w, l(3.14159274)
  lt r2.x, r0.w, r2.x
  and r2.x, r2.x, r2.w
  add r2.x, r2.x, r2.z
  mov r2.z, -r0.w
  max r2.w, r0.w, r2.z
  mov r3.x, -r2.w
  add r3.x, r3.x, l(1.000000)
  sqrt r3.x, r3.x
  mul r3.y, r2.w, l(-0.0187292993)
  add r3.y, r3.y, l(0.074261)
  mul r3.y, r2.w, r3.y
  add r3.y, r3.y, l(-0.212114394)
  mul r2.w, r2.w, r3.y
  add r2.w, r2.w, l(1.57072878)
  mul r2.w, r3.x, r2.w
  mul r3.x, r2.w, l(-2.000000)
  add r3.x, r3.x, l(3.14159274)
  lt r0.w, r0.w, r2.z
  and r0.w, r0.w, r3.x
  add r0.w, r0.w, r2.w
  mov r0.w, -r0.w
  movc r0.w, r1.w, r2.x, r0.w
  mov r0.w, r0.w
  add r2.y, r0.w, r2.y
endif
sincos r0.w, null, r2.y
sincos null, r1.w, r2.y
mul r2.x, r1.w, r8.x
mul r2.y, r0.w, r8.y
mov r2.y, -r2.y
add r2.x, r2.y, r2.x
mul r0.w, r0.w, r8.x
mul r1.w, r1.w, r8.y
add r0.w, r0.w, r1.w
itof r1.w, l(0)
mul r2.yzw, v1.xxxx, cb0[8].xxyz
mul r4.xyz, v1.yyyy, cb0[9].xyzx
add r2.yzw, r2.yyzw, r4.xxyz
mul r4.xyz, v1.zzzz, cb0[10].xyzx
add r2.yzw, r2.yyzw, r4.xxyz
mul r4.xyz, cb0[11].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r2.yzw, r2.yyzw, r4.xxyz
add r2.x, r2.y, r2.x
add r0.w, r0.w, r2.z
add r1.w, r1.w, r2.w
mul r2.xyz, r2.xxxx, cb0[12].xyzx
mul r4.xyz, r0.wwww, cb0[13].xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mul r4.xyz, r1.wwww, cb0[14].xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mov r3.xy, x1[r5.y + 0].xyxx
add r0.w, r2.x, r7.x
add r1.w, r2.y, r7.y
add r2.x, r2.z, r7.z
mul r4.xyzw, r0.wwww, cb0[4].xyzw
mul r6.xyzw, r1.wwww, cb0[5].xyzw
add r4.xyzw, r4.xyzw, r6.xyzw
mul r2.xyzw, r2.xxxx, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r4.xyzw, cb0[7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r2.xyzw, r2.xyzw, r4.xyzw
ftou r0.w, r3.w
ftou r1.w, r5.w
mov r4.xyzw, -cb0[r0.w + 28].xyzw
add r4.xyzw, r4.xyzw, cb0[r1.w + 28].xyzw
mul r4.xyzw, r3.zzzz, r4.xyzw
add r4.xyzw, r4.xyzw, cb0[r0.w + 28].xyzw
mul r4.xyzw, r4.xyzw, cb0[17].xyzw
mov r2.xyzw, r2.xyzw
mov o0.xyzw, r2.xyzw
mov o1.xyzw, r4.xyzw
mov o3.xyzw, r2.xyzw
mov o2.xyz, r0.xyzx
mov o5.xyz, r1.xyzx
mov o4.xy, r3.xyxx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
