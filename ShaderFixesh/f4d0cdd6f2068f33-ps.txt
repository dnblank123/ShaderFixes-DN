// radial blur
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// s0_s                              sampler      NA          NA             s0      1 
// t0                                texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 7   xyzw        1     NONE   float       
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 4   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
// ps_5_0
// dcl_globalFlags refactoringAllowed
// dcl_sampler s0, mode_default
// dcl_resource_texture2d (float,float,float,float) t0
// dcl_input_ps linear v2.xy
// dcl_output o0.xyzw
// dcl_temps 3
// sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
// mov r1.xyz, l(0,0,0,0)
// // mov r0.w, l(0)
// loop 
  // // ftoi r1.w, r0.w
  // ilt r2.x, r1.w, l(16)
  // if_z r2.x
    // break 
  // endif 
  // add r1.xyz, r0.xyzx, r1.xyzx
  // iadd r1.w, r1.w, l(1)
  // // itof r0.w, r1.w
// endloop 
// mul o0.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)
// // mov o0.w, l(1.000000)
// ret 
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
mov r1.xyz, l(0,0,0,0)
mov r1.w, l(16)
loop 
  breakc_z r1.w
  add r1.xyz, r0.xyzx, r1.xyzx
  iadd r1.w, r1.w, l(-1)
endloop 
mul o0.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)
ret 
// Approximately 10 instruction slots used
